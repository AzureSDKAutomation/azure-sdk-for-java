/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.hybridkubernetes.v2020_01_01_preview.implementation;

import com.microsoft.azure.management.hybridkubernetes.v2020_01_01_preview.ConnectedClusterIdentity;
import com.microsoft.azure.management.hybridkubernetes.v2020_01_01_preview.ConnectedClusterAADProfile;
import com.microsoft.azure.management.hybridkubernetes.v2020_01_01_preview.ProvisioningState;
import org.joda.time.DateTime;
import com.microsoft.azure.management.hybridkubernetes.v2020_01_01_preview.ConnectivityStatus;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.Resource;

/**
 * Represents a connected cluster.
 */
@JsonFlatten
public class ConnectedClusterInner extends Resource {
    /**
     * The identity of the connected cluster.
     */
    @JsonProperty(value = "identity", required = true)
    private ConnectedClusterIdentity identity;

    /**
     * Base64 encoded public certificate used by the agent to do the initial
     * handshake to the backend services in Azure.
     */
    @JsonProperty(value = "properties.agentPublicKeyCertificate", required = true)
    private String agentPublicKeyCertificate;

    /**
     * AAD profile of the connected cluster.
     */
    @JsonProperty(value = "properties.aadProfile", required = true)
    private ConnectedClusterAADProfile aadProfile;

    /**
     * The Kubernetes version of the connected cluster resource.
     */
    @JsonProperty(value = "properties.kubernetesVersion", access = JsonProperty.Access.WRITE_ONLY)
    private String kubernetesVersion;

    /**
     * Number of nodes present in the connected cluster resource.
     */
    @JsonProperty(value = "properties.totalNodeCount", access = JsonProperty.Access.WRITE_ONLY)
    private Integer totalNodeCount;

    /**
     * Number of CPU cores present in the connected cluster resource.
     */
    @JsonProperty(value = "properties.totalCoreCount", access = JsonProperty.Access.WRITE_ONLY)
    private Integer totalCoreCount;

    /**
     * Version of the agent running on the connected cluster resource.
     */
    @JsonProperty(value = "properties.agentVersion", access = JsonProperty.Access.WRITE_ONLY)
    private String agentVersion;

    /**
     * Provisioning state of the connected cluster resource. Possible values
     * include: 'Succeeded', 'Failed', 'Canceled', 'Provisioning', 'Updating',
     * 'Deleting', 'Accepted'.
     */
    @JsonProperty(value = "properties.provisioningState")
    private ProvisioningState provisioningState;

    /**
     * The Kubernetes distribution running on this connected cluster.
     */
    @JsonProperty(value = "properties.distribution")
    private String distribution;

    /**
     * The infrastructure on which the Kubernetes cluster represented by this
     * connected cluster is running on.
     */
    @JsonProperty(value = "properties.infrastructure")
    private String infrastructure;

    /**
     * Connected cluster offering.
     */
    @JsonProperty(value = "properties.offering", access = JsonProperty.Access.WRITE_ONLY)
    private String offering;

    /**
     * Expiration time of the managed identity certificate.
     */
    @JsonProperty(value = "properties.managedIdentityCertificateExpirationTime", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime managedIdentityCertificateExpirationTime;

    /**
     * Time representing the last instance when heart beat was received from
     * the cluster.
     */
    @JsonProperty(value = "properties.lastConnectivityTime", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime lastConnectivityTime;

    /**
     * Represents the connectivity status of the connected cluster. Possible
     * values include: 'Connecting', 'Connected', 'Offline', 'Expired'.
     */
    @JsonProperty(value = "properties.connectivityStatus")
    private ConnectivityStatus connectivityStatus;

    /**
     * Get the identity of the connected cluster.
     *
     * @return the identity value
     */
    public ConnectedClusterIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity of the connected cluster.
     *
     * @param identity the identity value to set
     * @return the ConnectedClusterInner object itself.
     */
    public ConnectedClusterInner withIdentity(ConnectedClusterIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get base64 encoded public certificate used by the agent to do the initial handshake to the backend services in Azure.
     *
     * @return the agentPublicKeyCertificate value
     */
    public String agentPublicKeyCertificate() {
        return this.agentPublicKeyCertificate;
    }

    /**
     * Set base64 encoded public certificate used by the agent to do the initial handshake to the backend services in Azure.
     *
     * @param agentPublicKeyCertificate the agentPublicKeyCertificate value to set
     * @return the ConnectedClusterInner object itself.
     */
    public ConnectedClusterInner withAgentPublicKeyCertificate(String agentPublicKeyCertificate) {
        this.agentPublicKeyCertificate = agentPublicKeyCertificate;
        return this;
    }

    /**
     * Get aAD profile of the connected cluster.
     *
     * @return the aadProfile value
     */
    public ConnectedClusterAADProfile aadProfile() {
        return this.aadProfile;
    }

    /**
     * Set aAD profile of the connected cluster.
     *
     * @param aadProfile the aadProfile value to set
     * @return the ConnectedClusterInner object itself.
     */
    public ConnectedClusterInner withAadProfile(ConnectedClusterAADProfile aadProfile) {
        this.aadProfile = aadProfile;
        return this;
    }

    /**
     * Get the Kubernetes version of the connected cluster resource.
     *
     * @return the kubernetesVersion value
     */
    public String kubernetesVersion() {
        return this.kubernetesVersion;
    }

    /**
     * Get number of nodes present in the connected cluster resource.
     *
     * @return the totalNodeCount value
     */
    public Integer totalNodeCount() {
        return this.totalNodeCount;
    }

    /**
     * Get number of CPU cores present in the connected cluster resource.
     *
     * @return the totalCoreCount value
     */
    public Integer totalCoreCount() {
        return this.totalCoreCount;
    }

    /**
     * Get version of the agent running on the connected cluster resource.
     *
     * @return the agentVersion value
     */
    public String agentVersion() {
        return this.agentVersion;
    }

    /**
     * Get provisioning state of the connected cluster resource. Possible values include: 'Succeeded', 'Failed', 'Canceled', 'Provisioning', 'Updating', 'Deleting', 'Accepted'.
     *
     * @return the provisioningState value
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set provisioning state of the connected cluster resource. Possible values include: 'Succeeded', 'Failed', 'Canceled', 'Provisioning', 'Updating', 'Deleting', 'Accepted'.
     *
     * @param provisioningState the provisioningState value to set
     * @return the ConnectedClusterInner object itself.
     */
    public ConnectedClusterInner withProvisioningState(ProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the Kubernetes distribution running on this connected cluster.
     *
     * @return the distribution value
     */
    public String distribution() {
        return this.distribution;
    }

    /**
     * Set the Kubernetes distribution running on this connected cluster.
     *
     * @param distribution the distribution value to set
     * @return the ConnectedClusterInner object itself.
     */
    public ConnectedClusterInner withDistribution(String distribution) {
        this.distribution = distribution;
        return this;
    }

    /**
     * Get the infrastructure on which the Kubernetes cluster represented by this connected cluster is running on.
     *
     * @return the infrastructure value
     */
    public String infrastructure() {
        return this.infrastructure;
    }

    /**
     * Set the infrastructure on which the Kubernetes cluster represented by this connected cluster is running on.
     *
     * @param infrastructure the infrastructure value to set
     * @return the ConnectedClusterInner object itself.
     */
    public ConnectedClusterInner withInfrastructure(String infrastructure) {
        this.infrastructure = infrastructure;
        return this;
    }

    /**
     * Get connected cluster offering.
     *
     * @return the offering value
     */
    public String offering() {
        return this.offering;
    }

    /**
     * Get expiration time of the managed identity certificate.
     *
     * @return the managedIdentityCertificateExpirationTime value
     */
    public DateTime managedIdentityCertificateExpirationTime() {
        return this.managedIdentityCertificateExpirationTime;
    }

    /**
     * Get time representing the last instance when heart beat was received from the cluster.
     *
     * @return the lastConnectivityTime value
     */
    public DateTime lastConnectivityTime() {
        return this.lastConnectivityTime;
    }

    /**
     * Get represents the connectivity status of the connected cluster. Possible values include: 'Connecting', 'Connected', 'Offline', 'Expired'.
     *
     * @return the connectivityStatus value
     */
    public ConnectivityStatus connectivityStatus() {
        return this.connectivityStatus;
    }

    /**
     * Set represents the connectivity status of the connected cluster. Possible values include: 'Connecting', 'Connected', 'Offline', 'Expired'.
     *
     * @param connectivityStatus the connectivityStatus value to set
     * @return the ConnectedClusterInner object itself.
     */
    public ConnectedClusterInner withConnectivityStatus(ConnectivityStatus connectivityStatus) {
        this.connectivityStatus = connectivityStatus;
        return this;
    }

}
