/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.hybridkubernetes.v2019_11_01_preview.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.hybridkubernetes.v2019_11_01_preview.ConnectedCluster;
import rx.Observable;
import com.microsoft.azure.management.hybridkubernetes.v2019_11_01_preview.ConnectedClusterIdentity;
import com.microsoft.azure.management.hybridkubernetes.v2019_11_01_preview.ConnectedClusterAADProfile;

class ConnectedClusterImpl extends GroupableResourceCoreImpl<ConnectedCluster, ConnectedClusterInner, ConnectedClusterImpl, KubernetesManager> implements ConnectedCluster, ConnectedCluster.Definition, ConnectedCluster.Update {
    ConnectedClusterImpl(String name, ConnectedClusterInner inner, KubernetesManager manager) {
        super(name, inner, manager);
    }

    @Override
    public Observable<ConnectedCluster> createResourceAsync() {
        ConnectedClustersInner client = this.manager().inner().connectedClusters();
        return client.createAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<ConnectedCluster> updateResourceAsync() {
        ConnectedClustersInner client = this.manager().inner().connectedClusters();
        return client.createAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ConnectedClusterInner> getInnerAsync() {
        ConnectedClustersInner client = this.manager().inner().connectedClusters();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public ConnectedClusterAADProfile aadProfile() {
        return this.inner().aadProfile();
    }

    @Override
    public String agentPublicKeyCertificate() {
        return this.inner().agentPublicKeyCertificate();
    }

    @Override
    public String agentVersion() {
        return this.inner().agentVersion();
    }

    @Override
    public ConnectedClusterIdentity identity() {
        return this.inner().identity();
    }

    @Override
    public String kubernetesVersion() {
        return this.inner().kubernetesVersion();
    }

    @Override
    public Integer totalNodeCount() {
        return this.inner().totalNodeCount();
    }

    @Override
    public ConnectedClusterImpl withAadProfile(ConnectedClusterAADProfile aadProfile) {
        this.inner().withAadProfile(aadProfile);
        return this;
    }

    @Override
    public ConnectedClusterImpl withAgentPublicKeyCertificate(String agentPublicKeyCertificate) {
        this.inner().withAgentPublicKeyCertificate(agentPublicKeyCertificate);
        return this;
    }

    @Override
    public ConnectedClusterImpl withAgentVersion(String agentVersion) {
        this.inner().withAgentVersion(agentVersion);
        return this;
    }

    @Override
    public ConnectedClusterImpl withIdentity(ConnectedClusterIdentity identity) {
        this.inner().withIdentity(identity);
        return this;
    }

    @Override
    public ConnectedClusterImpl withKubernetesVersion(String kubernetesVersion) {
        this.inner().withKubernetesVersion(kubernetesVersion);
        return this;
    }

    @Override
    public ConnectedClusterImpl withTotalNodeCount(Integer totalNodeCount) {
        this.inner().withTotalNodeCount(totalNodeCount);
        return this;
    }

}
