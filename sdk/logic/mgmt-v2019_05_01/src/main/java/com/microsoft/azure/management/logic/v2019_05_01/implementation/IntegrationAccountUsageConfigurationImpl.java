/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.logic.v2019_05_01.implementation;

import com.microsoft.azure.management.logic.v2019_05_01.IntegrationAccountUsageConfiguration;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import java.util.Map;
import com.microsoft.azure.management.logic.v2019_05_01.UsageConfigurationThrottle;
import org.joda.time.DateTime;

class IntegrationAccountUsageConfigurationImpl extends CreatableUpdatableImpl<IntegrationAccountUsageConfiguration, IntegrationAccountUsageConfigurationInner, IntegrationAccountUsageConfigurationImpl> implements IntegrationAccountUsageConfiguration, IntegrationAccountUsageConfiguration.Definition, IntegrationAccountUsageConfiguration.Update {
    private final LogicManager manager;
    private String resourceGroupName;
    private String integrationAccountName;
    private String usageConfigurationName;

    IntegrationAccountUsageConfigurationImpl(String name, LogicManager manager) {
        super(name, new IntegrationAccountUsageConfigurationInner());
        this.manager = manager;
        // Set resource name
        this.usageConfigurationName = name;
        //
    }

    IntegrationAccountUsageConfigurationImpl(IntegrationAccountUsageConfigurationInner inner, LogicManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.usageConfigurationName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.integrationAccountName = IdParsingUtils.getValueFromIdByName(inner.id(), "integrationAccounts");
        this.usageConfigurationName = IdParsingUtils.getValueFromIdByName(inner.id(), "usageConfigurations");
        //
    }

    @Override
    public LogicManager manager() {
        return this.manager;
    }

    @Override
    public Observable<IntegrationAccountUsageConfiguration> createResourceAsync() {
        IntegrationAccountUsageConfigurationsInner client = this.manager().inner().integrationAccountUsageConfigurations();
        return client.createOrUpdateAsync(this.resourceGroupName, this.integrationAccountName, this.usageConfigurationName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<IntegrationAccountUsageConfiguration> updateResourceAsync() {
        IntegrationAccountUsageConfigurationsInner client = this.manager().inner().integrationAccountUsageConfigurations();
        return client.createOrUpdateAsync(this.resourceGroupName, this.integrationAccountName, this.usageConfigurationName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<IntegrationAccountUsageConfigurationInner> getInnerAsync() {
        IntegrationAccountUsageConfigurationsInner client = this.manager().inner().integrationAccountUsageConfigurations();
        return client.getAsync(this.resourceGroupName, this.integrationAccountName, this.usageConfigurationName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public DateTime changedTime() {
        return this.inner().changedTime();
    }

    @Override
    public DateTime createdTime() {
        return this.inner().createdTime();
    }

    @Override
    public Boolean disableOverride() {
        return this.inner().disableOverride();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public Object metadata() {
        return this.inner().metadata();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().getTags();
    }

    @Override
    public Map<String, UsageConfigurationThrottle> throttles() {
        return this.inner().throttles();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public IntegrationAccountUsageConfigurationImpl withExistingIntegrationAccount(String resourceGroupName, String integrationAccountName) {
        this.resourceGroupName = resourceGroupName;
        this.integrationAccountName = integrationAccountName;
        return this;
    }

    @Override
    public IntegrationAccountUsageConfigurationImpl withDisableOverride(Boolean disableOverride) {
        this.inner().withDisableOverride(disableOverride);
        return this;
    }

    @Override
    public IntegrationAccountUsageConfigurationImpl withLocation(String location) {
        this.inner().withLocation(location);
        return this;
    }

    @Override
    public IntegrationAccountUsageConfigurationImpl withMetadata(Object metadata) {
        this.inner().withMetadata(metadata);
        return this;
    }

    @Override
    public IntegrationAccountUsageConfigurationImpl withTags(Map<String, String> tags) {
        this.inner().withTags(tags);
        return this;
    }

    @Override
    public IntegrationAccountUsageConfigurationImpl withThrottles(Map<String, UsageConfigurationThrottle> throttles) {
        this.inner().withThrottles(throttles);
        return this;
    }

}
