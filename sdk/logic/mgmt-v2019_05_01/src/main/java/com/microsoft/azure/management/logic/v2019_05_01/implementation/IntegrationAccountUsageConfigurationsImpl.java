/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.logic.v2019_05_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.logic.v2019_05_01.IntegrationAccountUsageConfigurations;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.logic.v2019_05_01.WorkflowTriggerCallbackUrl;
import com.microsoft.azure.management.logic.v2019_05_01.GetCallbackUrlParameters;
import com.microsoft.azure.management.logic.v2019_05_01.IntegrationAccountUsageConfiguration;

class IntegrationAccountUsageConfigurationsImpl extends WrapperImpl<IntegrationAccountUsageConfigurationsInner> implements IntegrationAccountUsageConfigurations {
    private final LogicManager manager;

    IntegrationAccountUsageConfigurationsImpl(LogicManager manager) {
        super(manager.inner().integrationAccountUsageConfigurations());
        this.manager = manager;
    }

    public LogicManager manager() {
        return this.manager;
    }

    @Override
    public IntegrationAccountUsageConfigurationImpl define(String name) {
        return wrapModel(name);
    }

    private IntegrationAccountUsageConfigurationImpl wrapModel(IntegrationAccountUsageConfigurationInner inner) {
        return  new IntegrationAccountUsageConfigurationImpl(inner, manager());
    }

    private IntegrationAccountUsageConfigurationImpl wrapModel(String name) {
        return new IntegrationAccountUsageConfigurationImpl(name, this.manager());
    }

    @Override
    public Observable<WorkflowTriggerCallbackUrl> listCallbackUrlAsync(String resourceGroupName, String integrationAccountName, String usageConfigurationName, GetCallbackUrlParameters listCallbackUrl) {
        IntegrationAccountUsageConfigurationsInner client = this.inner();
        return client.listCallbackUrlAsync(resourceGroupName, integrationAccountName, usageConfigurationName, listCallbackUrl)
        .map(new Func1<WorkflowTriggerCallbackUrlInner, WorkflowTriggerCallbackUrl>() {
            @Override
            public WorkflowTriggerCallbackUrl call(WorkflowTriggerCallbackUrlInner inner) {
                return new WorkflowTriggerCallbackUrlImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<IntegrationAccountUsageConfiguration> listAsync(final String resourceGroupName, final String integrationAccountName) {
        IntegrationAccountUsageConfigurationsInner client = this.inner();
        return client.listAsync(resourceGroupName, integrationAccountName)
        .flatMapIterable(new Func1<Page<IntegrationAccountUsageConfigurationInner>, Iterable<IntegrationAccountUsageConfigurationInner>>() {
            @Override
            public Iterable<IntegrationAccountUsageConfigurationInner> call(Page<IntegrationAccountUsageConfigurationInner> page) {
                return page.items();
            }
        })
        .map(new Func1<IntegrationAccountUsageConfigurationInner, IntegrationAccountUsageConfiguration>() {
            @Override
            public IntegrationAccountUsageConfiguration call(IntegrationAccountUsageConfigurationInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<IntegrationAccountUsageConfiguration> getAsync(String resourceGroupName, String integrationAccountName, String usageConfigurationName) {
        IntegrationAccountUsageConfigurationsInner client = this.inner();
        return client.getAsync(resourceGroupName, integrationAccountName, usageConfigurationName)
        .flatMap(new Func1<IntegrationAccountUsageConfigurationInner, Observable<IntegrationAccountUsageConfiguration>>() {
            @Override
            public Observable<IntegrationAccountUsageConfiguration> call(IntegrationAccountUsageConfigurationInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((IntegrationAccountUsageConfiguration)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String integrationAccountName, String usageConfigurationName) {
        IntegrationAccountUsageConfigurationsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, integrationAccountName, usageConfigurationName).toCompletable();
    }

}
