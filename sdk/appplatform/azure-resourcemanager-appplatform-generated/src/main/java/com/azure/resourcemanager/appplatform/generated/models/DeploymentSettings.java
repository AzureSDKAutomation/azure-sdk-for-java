// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** Deployment settings payload. */
@Fluent
public final class DeploymentSettings {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DeploymentSettings.class);

    /*
     * Required CPU. This should be 1 for Basic tier, and in range [1, 4] for
     * Standard tier. This is deprecated starting from API version
     * 2021-06-01-preview. Please use the resourceRequests field to set the CPU
     * size.
     */
    @JsonProperty(value = "cpu")
    private Integer cpu;

    /*
     * Required Memory size in GB. This should be in range [1, 2] for Basic
     * tier, and in range [1, 8] for Standard tier. This is deprecated starting
     * from API version 2021-06-01-preview. Please use the resourceRequests
     * field to set the the memory size.
     */
    @JsonProperty(value = "memoryInGB")
    private Integer memoryInGB;

    /*
     * The requested resource quantity for required CPU and Memory. It is
     * recommended that using this field to represent the required CPU and
     * Memory, the old field cpu and memoryInGB will be deprecated later.
     */
    @JsonProperty(value = "resourceRequests")
    private ResourceRequests resourceRequests;

    /*
     * Collection of environment variables
     */
    @JsonProperty(value = "environmentVariables")
    private Map<String, String> environmentVariables;

    /*
     * Collection of addons
     */
    @JsonProperty(value = "addonConfig")
    private Map<String, AddonProfile> addonConfig;

    /**
     * Get the cpu property: Required CPU. This should be 1 for Basic tier, and in range [1, 4] for Standard tier. This
     * is deprecated starting from API version 2021-06-01-preview. Please use the resourceRequests field to set the CPU
     * size.
     *
     * @return the cpu value.
     */
    public Integer cpu() {
        return this.cpu;
    }

    /**
     * Set the cpu property: Required CPU. This should be 1 for Basic tier, and in range [1, 4] for Standard tier. This
     * is deprecated starting from API version 2021-06-01-preview. Please use the resourceRequests field to set the CPU
     * size.
     *
     * @param cpu the cpu value to set.
     * @return the DeploymentSettings object itself.
     */
    public DeploymentSettings withCpu(Integer cpu) {
        this.cpu = cpu;
        return this;
    }

    /**
     * Get the memoryInGB property: Required Memory size in GB. This should be in range [1, 2] for Basic tier, and in
     * range [1, 8] for Standard tier. This is deprecated starting from API version 2021-06-01-preview. Please use the
     * resourceRequests field to set the the memory size.
     *
     * @return the memoryInGB value.
     */
    public Integer memoryInGB() {
        return this.memoryInGB;
    }

    /**
     * Set the memoryInGB property: Required Memory size in GB. This should be in range [1, 2] for Basic tier, and in
     * range [1, 8] for Standard tier. This is deprecated starting from API version 2021-06-01-preview. Please use the
     * resourceRequests field to set the the memory size.
     *
     * @param memoryInGB the memoryInGB value to set.
     * @return the DeploymentSettings object itself.
     */
    public DeploymentSettings withMemoryInGB(Integer memoryInGB) {
        this.memoryInGB = memoryInGB;
        return this;
    }

    /**
     * Get the resourceRequests property: The requested resource quantity for required CPU and Memory. It is recommended
     * that using this field to represent the required CPU and Memory, the old field cpu and memoryInGB will be
     * deprecated later.
     *
     * @return the resourceRequests value.
     */
    public ResourceRequests resourceRequests() {
        return this.resourceRequests;
    }

    /**
     * Set the resourceRequests property: The requested resource quantity for required CPU and Memory. It is recommended
     * that using this field to represent the required CPU and Memory, the old field cpu and memoryInGB will be
     * deprecated later.
     *
     * @param resourceRequests the resourceRequests value to set.
     * @return the DeploymentSettings object itself.
     */
    public DeploymentSettings withResourceRequests(ResourceRequests resourceRequests) {
        this.resourceRequests = resourceRequests;
        return this;
    }

    /**
     * Get the environmentVariables property: Collection of environment variables.
     *
     * @return the environmentVariables value.
     */
    public Map<String, String> environmentVariables() {
        return this.environmentVariables;
    }

    /**
     * Set the environmentVariables property: Collection of environment variables.
     *
     * @param environmentVariables the environmentVariables value to set.
     * @return the DeploymentSettings object itself.
     */
    public DeploymentSettings withEnvironmentVariables(Map<String, String> environmentVariables) {
        this.environmentVariables = environmentVariables;
        return this;
    }

    /**
     * Get the addonConfig property: Collection of addons.
     *
     * @return the addonConfig value.
     */
    public Map<String, AddonProfile> addonConfig() {
        return this.addonConfig;
    }

    /**
     * Set the addonConfig property: Collection of addons.
     *
     * @param addonConfig the addonConfig value to set.
     * @return the DeploymentSettings object itself.
     */
    public DeploymentSettings withAddonConfig(Map<String, AddonProfile> addonConfig) {
        this.addonConfig = addonConfig;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resourceRequests() != null) {
            resourceRequests().validate();
        }
        if (addonConfig() != null) {
            addonConfig()
                .values()
                .forEach(
                    e -> {
                        if (e != null) {
                            e.validate();
                        }
                    });
        }
    }
}
