// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appplatform.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Check Vnet role assignment response payload. */
@Fluent
public final class VnetRoleAssignmentInner {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(VnetRoleAssignmentInner.class);

    /*
     * Indicates whether the owner role is assigned
     */
    @JsonProperty(value = "hasPermission")
    private Boolean hasPermission;

    /*
     * Reason why the assignment is not found
     */
    @JsonProperty(value = "reason")
    private String reason;

    /**
     * Get the hasPermission property: Indicates whether the owner role is assigned.
     *
     * @return the hasPermission value.
     */
    public Boolean hasPermission() {
        return this.hasPermission;
    }

    /**
     * Set the hasPermission property: Indicates whether the owner role is assigned.
     *
     * @param hasPermission the hasPermission value to set.
     * @return the VnetRoleAssignmentInner object itself.
     */
    public VnetRoleAssignmentInner withHasPermission(Boolean hasPermission) {
        this.hasPermission = hasPermission;
        return this;
    }

    /**
     * Get the reason property: Reason why the assignment is not found.
     *
     * @return the reason value.
     */
    public String reason() {
        return this.reason;
    }

    /**
     * Set the reason property: Reason why the assignment is not found.
     *
     * @param reason the reason value to set.
     * @return the VnetRoleAssignmentInner object itself.
     */
    public VnetRoleAssignmentInner withReason(String reason) {
        this.reason = reason;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
