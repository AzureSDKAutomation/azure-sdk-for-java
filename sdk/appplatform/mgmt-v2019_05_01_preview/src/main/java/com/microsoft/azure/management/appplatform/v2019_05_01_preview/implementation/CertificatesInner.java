/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.appplatform.v2019_05_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.management.appplatform.v2019_05_01_preview.CertificateProperties;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Certificates.
 */
public class CertificatesInner {
    /** The Retrofit service to perform REST calls. */
    private CertificatesService service;
    /** The service client containing this operation class. */
    private AppPlatformManagementClientImpl client;

    /**
     * Initializes an instance of CertificatesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public CertificatesInner(Retrofit retrofit, AppPlatformManagementClientImpl client) {
        this.service = retrofit.create(CertificatesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Certificates to be
     * used by Retrofit to perform actually REST calls.
     */
    interface CertificatesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appplatform.v2019_05_01_preview.Certificates getAsync" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/certificates/{certificateName}")
        Observable<Response<ResponseBody>> getAsync(@Path("CertificateName") String certificateName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appplatform.v2019_05_01_preview.Certificates createOrUpdateAsync" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/certificates/{certificateName}")
        Observable<Response<ResponseBody>> createOrUpdateAsync(@Path("CertificateName") String certificateName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body CertificateResourceInner certificateResource, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appplatform.v2019_05_01_preview.Certificates beginCreateOrUpdateAsync" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/certificates/{certificateName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdateAsync(@Path("CertificateName") String certificateName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body CertificateResourceInner certificateResource, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appplatform.v2019_05_01_preview.Certificates deleteAsync" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/certificates/{certificateName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteAsync(@Path("CertificateName") String certificateName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appplatform.v2019_05_01_preview.Certificates listAsync" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/certificates")
        Observable<Response<ResponseBody>> listAsync(@Path("CertificateName") String certificateName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get the certificate resource.
     *
     * @param certificateName the String value
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CertificateResourceInner object if successful.
     */
    public CertificateResourceInner getAsync(String certificateName, String resourceGroupName, String serviceName) {
        return getAsyncWithServiceResponseAsync(certificateName, resourceGroupName, serviceName).toBlocking().single().body();
    }

    /**
     * Get the certificate resource.
     *
     * @param certificateName the String value
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CertificateResourceInner> getAsyncAsync(String certificateName, String resourceGroupName, String serviceName, final ServiceCallback<CertificateResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getAsyncWithServiceResponseAsync(certificateName, resourceGroupName, serviceName), serviceCallback);
    }

    /**
     * Get the certificate resource.
     *
     * @param certificateName the String value
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateResourceInner object
     */
    public Observable<CertificateResourceInner> getAsyncAsync(String certificateName, String resourceGroupName, String serviceName) {
        return getAsyncWithServiceResponseAsync(certificateName, resourceGroupName, serviceName).map(new Func1<ServiceResponse<CertificateResourceInner>, CertificateResourceInner>() {
            @Override
            public CertificateResourceInner call(ServiceResponse<CertificateResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the certificate resource.
     *
     * @param certificateName the String value
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateResourceInner object
     */
    public Observable<ServiceResponse<CertificateResourceInner>> getAsyncWithServiceResponseAsync(String certificateName, String resourceGroupName, String serviceName) {
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        return service.getAsync(certificateName, this.client.subscriptionId(), resourceGroupName, serviceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CertificateResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<CertificateResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CertificateResourceInner> clientResponse = getAsyncDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CertificateResourceInner> getAsyncDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CertificateResourceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CertificateResourceInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create or update certificate resource.
     *
     * @param certificateName the String value
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CertificateResourceInner object if successful.
     */
    public CertificateResourceInner createOrUpdateAsync(String certificateName, String resourceGroupName, String serviceName) {
        return createOrUpdateAsyncWithServiceResponseAsync(certificateName, resourceGroupName, serviceName).toBlocking().last().body();
    }

    /**
     * Create or update certificate resource.
     *
     * @param certificateName the String value
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CertificateResourceInner> createOrUpdateAsyncAsync(String certificateName, String resourceGroupName, String serviceName, final ServiceCallback<CertificateResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateAsyncWithServiceResponseAsync(certificateName, resourceGroupName, serviceName), serviceCallback);
    }

    /**
     * Create or update certificate resource.
     *
     * @param certificateName the String value
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<CertificateResourceInner> createOrUpdateAsyncAsync(String certificateName, String resourceGroupName, String serviceName) {
        return createOrUpdateAsyncWithServiceResponseAsync(certificateName, resourceGroupName, serviceName).map(new Func1<ServiceResponse<CertificateResourceInner>, CertificateResourceInner>() {
            @Override
            public CertificateResourceInner call(ServiceResponse<CertificateResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update certificate resource.
     *
     * @param certificateName the String value
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<CertificateResourceInner>> createOrUpdateAsyncWithServiceResponseAsync(String certificateName, String resourceGroupName, String serviceName) {
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        final CertificateProperties properties = null;
        CertificateResourceInner certificateResource = new CertificateResourceInner();
        certificateResource.withProperties(null);
        Observable<Response<ResponseBody>> observable = service.createOrUpdateAsync(certificateName, this.client.subscriptionId(), resourceGroupName, serviceName, this.client.apiVersion(), this.client.acceptLanguage(), certificateResource, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<CertificateResourceInner>() { }.getType());
    }
    /**
     * Create or update certificate resource.
     *
     * @param certificateName the String value
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param properties Properties of the certificate resource payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CertificateResourceInner object if successful.
     */
    public CertificateResourceInner createOrUpdateAsync(String certificateName, String resourceGroupName, String serviceName, CertificateProperties properties) {
        return createOrUpdateAsyncWithServiceResponseAsync(certificateName, resourceGroupName, serviceName, properties).toBlocking().last().body();
    }

    /**
     * Create or update certificate resource.
     *
     * @param certificateName the String value
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param properties Properties of the certificate resource payload.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CertificateResourceInner> createOrUpdateAsyncAsync(String certificateName, String resourceGroupName, String serviceName, CertificateProperties properties, final ServiceCallback<CertificateResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateAsyncWithServiceResponseAsync(certificateName, resourceGroupName, serviceName, properties), serviceCallback);
    }

    /**
     * Create or update certificate resource.
     *
     * @param certificateName the String value
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param properties Properties of the certificate resource payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<CertificateResourceInner> createOrUpdateAsyncAsync(String certificateName, String resourceGroupName, String serviceName, CertificateProperties properties) {
        return createOrUpdateAsyncWithServiceResponseAsync(certificateName, resourceGroupName, serviceName, properties).map(new Func1<ServiceResponse<CertificateResourceInner>, CertificateResourceInner>() {
            @Override
            public CertificateResourceInner call(ServiceResponse<CertificateResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update certificate resource.
     *
     * @param certificateName the String value
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param properties Properties of the certificate resource payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<CertificateResourceInner>> createOrUpdateAsyncWithServiceResponseAsync(String certificateName, String resourceGroupName, String serviceName, CertificateProperties properties) {
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        Validator.validate(properties);
        CertificateResourceInner certificateResource = new CertificateResourceInner();
        certificateResource.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.createOrUpdateAsync(certificateName, this.client.subscriptionId(), resourceGroupName, serviceName, this.client.apiVersion(), this.client.acceptLanguage(), certificateResource, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<CertificateResourceInner>() { }.getType());
    }

    /**
     * Create or update certificate resource.
     *
     * @param certificateName the String value
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CertificateResourceInner object if successful.
     */
    public CertificateResourceInner beginCreateOrUpdateAsync(String certificateName, String resourceGroupName, String serviceName) {
        return beginCreateOrUpdateAsyncWithServiceResponseAsync(certificateName, resourceGroupName, serviceName).toBlocking().single().body();
    }

    /**
     * Create or update certificate resource.
     *
     * @param certificateName the String value
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CertificateResourceInner> beginCreateOrUpdateAsyncAsync(String certificateName, String resourceGroupName, String serviceName, final ServiceCallback<CertificateResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateAsyncWithServiceResponseAsync(certificateName, resourceGroupName, serviceName), serviceCallback);
    }

    /**
     * Create or update certificate resource.
     *
     * @param certificateName the String value
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateResourceInner object
     */
    public Observable<CertificateResourceInner> beginCreateOrUpdateAsyncAsync(String certificateName, String resourceGroupName, String serviceName) {
        return beginCreateOrUpdateAsyncWithServiceResponseAsync(certificateName, resourceGroupName, serviceName).map(new Func1<ServiceResponse<CertificateResourceInner>, CertificateResourceInner>() {
            @Override
            public CertificateResourceInner call(ServiceResponse<CertificateResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update certificate resource.
     *
     * @param certificateName the String value
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateResourceInner object
     */
    public Observable<ServiceResponse<CertificateResourceInner>> beginCreateOrUpdateAsyncWithServiceResponseAsync(String certificateName, String resourceGroupName, String serviceName) {
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        final CertificateProperties properties = null;
        CertificateResourceInner certificateResource = new CertificateResourceInner();
        certificateResource.withProperties(null);
        return service.beginCreateOrUpdateAsync(certificateName, this.client.subscriptionId(), resourceGroupName, serviceName, this.client.apiVersion(), this.client.acceptLanguage(), certificateResource, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CertificateResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<CertificateResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CertificateResourceInner> clientResponse = beginCreateOrUpdateAsyncDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Create or update certificate resource.
     *
     * @param certificateName the String value
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param properties Properties of the certificate resource payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CertificateResourceInner object if successful.
     */
    public CertificateResourceInner beginCreateOrUpdateAsync(String certificateName, String resourceGroupName, String serviceName, CertificateProperties properties) {
        return beginCreateOrUpdateAsyncWithServiceResponseAsync(certificateName, resourceGroupName, serviceName, properties).toBlocking().single().body();
    }

    /**
     * Create or update certificate resource.
     *
     * @param certificateName the String value
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param properties Properties of the certificate resource payload.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CertificateResourceInner> beginCreateOrUpdateAsyncAsync(String certificateName, String resourceGroupName, String serviceName, CertificateProperties properties, final ServiceCallback<CertificateResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateAsyncWithServiceResponseAsync(certificateName, resourceGroupName, serviceName, properties), serviceCallback);
    }

    /**
     * Create or update certificate resource.
     *
     * @param certificateName the String value
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param properties Properties of the certificate resource payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateResourceInner object
     */
    public Observable<CertificateResourceInner> beginCreateOrUpdateAsyncAsync(String certificateName, String resourceGroupName, String serviceName, CertificateProperties properties) {
        return beginCreateOrUpdateAsyncWithServiceResponseAsync(certificateName, resourceGroupName, serviceName, properties).map(new Func1<ServiceResponse<CertificateResourceInner>, CertificateResourceInner>() {
            @Override
            public CertificateResourceInner call(ServiceResponse<CertificateResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update certificate resource.
     *
     * @param certificateName the String value
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param properties Properties of the certificate resource payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateResourceInner object
     */
    public Observable<ServiceResponse<CertificateResourceInner>> beginCreateOrUpdateAsyncWithServiceResponseAsync(String certificateName, String resourceGroupName, String serviceName, CertificateProperties properties) {
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        Validator.validate(properties);
        CertificateResourceInner certificateResource = new CertificateResourceInner();
        certificateResource.withProperties(properties);
        return service.beginCreateOrUpdateAsync(certificateName, this.client.subscriptionId(), resourceGroupName, serviceName, this.client.apiVersion(), this.client.acceptLanguage(), certificateResource, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CertificateResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<CertificateResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CertificateResourceInner> clientResponse = beginCreateOrUpdateAsyncDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CertificateResourceInner> beginCreateOrUpdateAsyncDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CertificateResourceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CertificateResourceInner>() { }.getType())
                .register(201, new TypeToken<CertificateResourceInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Delete the certificate resource.
     *
     * @param certificateName the String value
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CertificateResourceInner object if successful.
     */
    public CertificateResourceInner deleteAsync(String certificateName, String resourceGroupName, String serviceName) {
        return deleteAsyncWithServiceResponseAsync(certificateName, resourceGroupName, serviceName).toBlocking().single().body();
    }

    /**
     * Delete the certificate resource.
     *
     * @param certificateName the String value
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CertificateResourceInner> deleteAsyncAsync(String certificateName, String resourceGroupName, String serviceName, final ServiceCallback<CertificateResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(deleteAsyncWithServiceResponseAsync(certificateName, resourceGroupName, serviceName), serviceCallback);
    }

    /**
     * Delete the certificate resource.
     *
     * @param certificateName the String value
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateResourceInner object
     */
    public Observable<CertificateResourceInner> deleteAsyncAsync(String certificateName, String resourceGroupName, String serviceName) {
        return deleteAsyncWithServiceResponseAsync(certificateName, resourceGroupName, serviceName).map(new Func1<ServiceResponse<CertificateResourceInner>, CertificateResourceInner>() {
            @Override
            public CertificateResourceInner call(ServiceResponse<CertificateResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete the certificate resource.
     *
     * @param certificateName the String value
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateResourceInner object
     */
    public Observable<ServiceResponse<CertificateResourceInner>> deleteAsyncWithServiceResponseAsync(String certificateName, String resourceGroupName, String serviceName) {
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        return service.deleteAsync(certificateName, this.client.subscriptionId(), resourceGroupName, serviceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CertificateResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<CertificateResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CertificateResourceInner> clientResponse = deleteAsyncDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CertificateResourceInner> deleteAsyncDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CertificateResourceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CertificateResourceInner>() { }.getType())
                .register(204, new TypeToken<CertificateResourceInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List all the certificates of one user.
     *
     * @param certificateName the String value
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CertificateResourceCollectionInner object if successful.
     */
    public CertificateResourceCollectionInner listAsync(String certificateName, String resourceGroupName, String serviceName) {
        return listAsyncWithServiceResponseAsync(certificateName, resourceGroupName, serviceName).toBlocking().single().body();
    }

    /**
     * List all the certificates of one user.
     *
     * @param certificateName the String value
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CertificateResourceCollectionInner> listAsyncAsync(String certificateName, String resourceGroupName, String serviceName, final ServiceCallback<CertificateResourceCollectionInner> serviceCallback) {
        return ServiceFuture.fromResponse(listAsyncWithServiceResponseAsync(certificateName, resourceGroupName, serviceName), serviceCallback);
    }

    /**
     * List all the certificates of one user.
     *
     * @param certificateName the String value
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateResourceCollectionInner object
     */
    public Observable<CertificateResourceCollectionInner> listAsyncAsync(String certificateName, String resourceGroupName, String serviceName) {
        return listAsyncWithServiceResponseAsync(certificateName, resourceGroupName, serviceName).map(new Func1<ServiceResponse<CertificateResourceCollectionInner>, CertificateResourceCollectionInner>() {
            @Override
            public CertificateResourceCollectionInner call(ServiceResponse<CertificateResourceCollectionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * List all the certificates of one user.
     *
     * @param certificateName the String value
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateResourceCollectionInner object
     */
    public Observable<ServiceResponse<CertificateResourceCollectionInner>> listAsyncWithServiceResponseAsync(String certificateName, String resourceGroupName, String serviceName) {
        if (certificateName == null) {
            throw new IllegalArgumentException("Parameter certificateName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        return service.listAsync(certificateName, this.client.subscriptionId(), resourceGroupName, serviceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CertificateResourceCollectionInner>>>() {
                @Override
                public Observable<ServiceResponse<CertificateResourceCollectionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CertificateResourceCollectionInner> clientResponse = listAsyncDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CertificateResourceCollectionInner> listAsyncDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CertificateResourceCollectionInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CertificateResourceCollectionInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
