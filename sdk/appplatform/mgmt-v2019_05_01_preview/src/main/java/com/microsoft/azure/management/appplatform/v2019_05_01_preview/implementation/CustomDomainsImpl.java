/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.appplatform.v2019_05_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.appplatform.v2019_05_01_preview.CustomDomains;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.appplatform.v2019_05_01_preview.CustomDomainResourceCollection;
import com.microsoft.azure.management.appplatform.v2019_05_01_preview.CustomDomainResource;

class CustomDomainsImpl extends WrapperImpl<CustomDomainsInner> implements CustomDomains {
    private final AppPlatformManager manager;

    CustomDomainsImpl(AppPlatformManager manager) {
        super(manager.inner().customDomains());
        this.manager = manager;
    }

    public AppPlatformManager manager() {
        return this.manager;
    }

    @Override
    public CustomDomainResourceImpl define(String name) {
        return wrapModel(name);
    }

    private CustomDomainResourceImpl wrapModel(CustomDomainResourceInner inner) {
        return  new CustomDomainResourceImpl(inner, manager());
    }

    private CustomDomainResourceImpl wrapModel(String name) {
        return new CustomDomainResourceImpl(name, this.manager());
    }

    @Override
    public Observable<CustomDomainResourceCollection> listAsyncAsync(String domainName, String resourceGroupName, String serviceName, String appName) {
        CustomDomainsInner client = this.inner();
        return client.listAsyncAsync(domainName, resourceGroupName, serviceName, appName)
        .map(new Func1<CustomDomainResourceCollectionInner, CustomDomainResourceCollection>() {
            @Override
            public CustomDomainResourceCollection call(CustomDomainResourceCollectionInner inner) {
                return new CustomDomainResourceCollectionImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<CustomDomainResource> getAsyncAsync(String domainName, String resourceGroupName, String serviceName, String appName) {
        CustomDomainsInner client = this.inner();
        return client.getAsyncAsync(domainName, resourceGroupName, serviceName, appName)
        .flatMap(new Func1<CustomDomainResourceInner, Observable<CustomDomainResource>>() {
            @Override
            public Observable<CustomDomainResource> call(CustomDomainResourceInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((CustomDomainResource)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsyncAsync(String domainName, String resourceGroupName, String serviceName, String appName) {
        CustomDomainsInner client = this.inner();
        return client.deleteAsyncAsync(domainName, resourceGroupName, serviceName, appName).toCompletable();
    }

}
