/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.policy.v2020_09_01.implementation;

import com.microsoft.azure.management.policy.v2020_09_01.DataPolicyManifest;
import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import java.util.List;
import com.microsoft.azure.management.policy.v2020_09_01.DataManifestCustomResourceFunctionDefinition;
import com.microsoft.azure.management.policy.v2020_09_01.DataEffect;
import com.microsoft.azure.management.policy.v2020_09_01.ResourceTypeAliases;

class DataPolicyManifestImpl extends WrapperImpl<DataPolicyManifestInner> implements DataPolicyManifest {
    private final PolicyManager manager;
    DataPolicyManifestImpl(DataPolicyManifestInner inner, PolicyManager manager) {
        super(inner);
        this.manager = manager;
    }

    @Override
    public PolicyManager manager() {
        return this.manager;
    }

    @Override
    public List<DataManifestCustomResourceFunctionDefinition> custom() {
        return this.inner().custom();
    }

    @Override
    public List<DataEffect> effects() {
        return this.inner().effects();
    }

    @Override
    public List<String> fieldValues() {
        return this.inner().fieldValues();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public Boolean isBuiltInOnly() {
        return this.inner().isBuiltInOnly();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public List<String> namespaces() {
        return this.inner().namespaces();
    }

    @Override
    public String policyMode() {
        return this.inner().policyMode();
    }

    @Override
    public List<ResourceTypeAliases> resourceTypeAliases() {
        return this.inner().resourceTypeAliases();
    }

    @Override
    public List<String> standard() {
        return this.inner().standard();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

}
