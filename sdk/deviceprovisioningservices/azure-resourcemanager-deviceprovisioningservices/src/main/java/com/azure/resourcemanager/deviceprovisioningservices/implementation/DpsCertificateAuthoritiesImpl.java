// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.deviceprovisioningservices.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.deviceprovisioningservices.IotDpsManager;
import com.azure.resourcemanager.deviceprovisioningservices.fluent.DpsCertificateAuthoritiesClient;
import com.azure.resourcemanager.deviceprovisioningservices.fluent.models.CertificateListDescriptionInner;
import com.azure.resourcemanager.deviceprovisioningservices.fluent.models.CertificateResponseInner;
import com.azure.resourcemanager.deviceprovisioningservices.models.CertificateBodyDescription;
import com.azure.resourcemanager.deviceprovisioningservices.models.CertificateListDescription;
import com.azure.resourcemanager.deviceprovisioningservices.models.CertificatePurpose;
import com.azure.resourcemanager.deviceprovisioningservices.models.CertificateResponse;
import com.azure.resourcemanager.deviceprovisioningservices.models.DpsCertificateAuthorities;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.time.OffsetDateTime;

public final class DpsCertificateAuthoritiesImpl implements DpsCertificateAuthorities {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DpsCertificateAuthoritiesImpl.class);

    private final DpsCertificateAuthoritiesClient innerClient;

    private final IotDpsManager serviceManager;

    public DpsCertificateAuthoritiesImpl(DpsCertificateAuthoritiesClient innerClient, IotDpsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public CertificateResponse get(String certificateName, String resourceGroupName, String provisioningServiceName) {
        CertificateResponseInner inner =
            this.serviceClient().get(certificateName, resourceGroupName, provisioningServiceName);
        if (inner != null) {
            return new CertificateResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CertificateResponse> getWithResponse(
        String certificateName,
        String resourceGroupName,
        String provisioningServiceName,
        String ifMatch,
        Context context) {
        Response<CertificateResponseInner> inner =
            this
                .serviceClient()
                .getWithResponse(certificateName, resourceGroupName, provisioningServiceName, ifMatch, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CertificateResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CertificateResponse createOrUpdate(
        String resourceGroupName,
        String provisioningServiceName,
        String certificateName,
        CertificateBodyDescription certificateDescription) {
        CertificateResponseInner inner =
            this
                .serviceClient()
                .createOrUpdate(resourceGroupName, provisioningServiceName, certificateName, certificateDescription);
        if (inner != null) {
            return new CertificateResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CertificateResponse> createOrUpdateWithResponse(
        String resourceGroupName,
        String provisioningServiceName,
        String certificateName,
        CertificateBodyDescription certificateDescription,
        String ifMatch,
        Context context) {
        Response<CertificateResponseInner> inner =
            this
                .serviceClient()
                .createOrUpdateWithResponse(
                    resourceGroupName,
                    provisioningServiceName,
                    certificateName,
                    certificateDescription,
                    ifMatch,
                    context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CertificateResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(
        String resourceGroupName, String ifMatch, String provisioningServiceName, String certificateName) {
        this.serviceClient().delete(resourceGroupName, ifMatch, provisioningServiceName, certificateName);
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName,
        String ifMatch,
        String provisioningServiceName,
        String certificateName,
        String certificateName1,
        byte[] certificateRawBytes,
        Boolean certificateIsVerified,
        CertificatePurpose certificatePurpose,
        OffsetDateTime certificateCreated,
        OffsetDateTime certificateLastUpdated,
        Boolean certificateHasPrivateKey,
        String certificateNonce,
        Context context) {
        return this
            .serviceClient()
            .deleteWithResponse(
                resourceGroupName,
                ifMatch,
                provisioningServiceName,
                certificateName,
                certificateName1,
                certificateRawBytes,
                certificateIsVerified,
                certificatePurpose,
                certificateCreated,
                certificateLastUpdated,
                certificateHasPrivateKey,
                certificateNonce,
                context);
    }

    public CertificateListDescription list(String resourceGroupName, String provisioningServiceName) {
        CertificateListDescriptionInner inner = this.serviceClient().list(resourceGroupName, provisioningServiceName);
        if (inner != null) {
            return new CertificateListDescriptionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CertificateListDescription> listWithResponse(
        String resourceGroupName, String provisioningServiceName, Context context) {
        Response<CertificateListDescriptionInner> inner =
            this.serviceClient().listWithResponse(resourceGroupName, provisioningServiceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CertificateListDescriptionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private DpsCertificateAuthoritiesClient serviceClient() {
        return this.innerClient;
    }

    private IotDpsManager manager() {
        return this.serviceManager;
    }
}
