/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.cosmosdb.v2020_06_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.management.cosmosdb.v2020_06_01_preview.DataCenterCreateUpdateParameters;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in CassandraDataCenters.
 */
public class CassandraDataCentersInner {
    /** The Retrofit service to perform REST calls. */
    private CassandraDataCentersService service;
    /** The service client containing this operation class. */
    private CosmosDBManagementClientImpl client;

    /**
     * Initializes an instance of CassandraDataCentersInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public CassandraDataCentersInner(Retrofit retrofit, CosmosDBManagementClientImpl client) {
        this.service = retrofit.create(CassandraDataCentersService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for CassandraDataCenters to be
     * used by Retrofit to perform actually REST calls.
     */
    interface CassandraDataCentersService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.cosmosdb.v2020_06_01_preview.CassandraDataCenters get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}/dataCenters/{dataCenterName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Path("dataCenterName") String dataCenterName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.cosmosdb.v2020_06_01_preview.CassandraDataCenters delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}/dataCenters/{dataCenterName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Path("dataCenterName") String dataCenterName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.cosmosdb.v2020_06_01_preview.CassandraDataCenters createUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}/dataCenters/{dataCenterName}")
        Observable<Response<ResponseBody>> createUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Path("dataCenterName") String dataCenterName, @Query("api-version") String apiVersion, @Body DataCenterCreateUpdateParameters createUpdateParameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.cosmosdb.v2020_06_01_preview.CassandraDataCenters beginCreateUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}/dataCenters/{dataCenterName}")
        Observable<Response<ResponseBody>> beginCreateUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterName") String clusterName, @Path("dataCenterName") String dataCenterName, @Query("api-version") String apiVersion, @Body DataCenterCreateUpdateParameters createUpdateParameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get properties of a managed Cassandra data center.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Managed Cassandra cluster name.
     * @param dataCenterName Data center name in a managed Cassandra cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DataCenterGetResultsInner object if successful.
     */
    public DataCenterGetResultsInner get(String resourceGroupName, String clusterName, String dataCenterName) {
        return getWithServiceResponseAsync(resourceGroupName, clusterName, dataCenterName).toBlocking().single().body();
    }

    /**
     * Get properties of a managed Cassandra data center.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Managed Cassandra cluster name.
     * @param dataCenterName Data center name in a managed Cassandra cluster.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DataCenterGetResultsInner> getAsync(String resourceGroupName, String clusterName, String dataCenterName, final ServiceCallback<DataCenterGetResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, clusterName, dataCenterName), serviceCallback);
    }

    /**
     * Get properties of a managed Cassandra data center.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Managed Cassandra cluster name.
     * @param dataCenterName Data center name in a managed Cassandra cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataCenterGetResultsInner object
     */
    public Observable<DataCenterGetResultsInner> getAsync(String resourceGroupName, String clusterName, String dataCenterName) {
        return getWithServiceResponseAsync(resourceGroupName, clusterName, dataCenterName).map(new Func1<ServiceResponse<DataCenterGetResultsInner>, DataCenterGetResultsInner>() {
            @Override
            public DataCenterGetResultsInner call(ServiceResponse<DataCenterGetResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get properties of a managed Cassandra data center.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Managed Cassandra cluster name.
     * @param dataCenterName Data center name in a managed Cassandra cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataCenterGetResultsInner object
     */
    public Observable<ServiceResponse<DataCenterGetResultsInner>> getWithServiceResponseAsync(String resourceGroupName, String clusterName, String dataCenterName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (dataCenterName == null) {
            throw new IllegalArgumentException("Parameter dataCenterName is required and cannot be null.");
        }
        final String apiVersion = "2020-06-01";
        return service.get(this.client.subscriptionId(), resourceGroupName, clusterName, dataCenterName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DataCenterGetResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<DataCenterGetResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DataCenterGetResultsInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DataCenterGetResultsInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DataCenterGetResultsInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DataCenterGetResultsInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Delete a managed Cassandra data center.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Managed Cassandra cluster name.
     * @param dataCenterName Data center name in a managed Cassandra cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String clusterName, String dataCenterName) {
        deleteWithServiceResponseAsync(resourceGroupName, clusterName, dataCenterName).toBlocking().single().body();
    }

    /**
     * Delete a managed Cassandra data center.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Managed Cassandra cluster name.
     * @param dataCenterName Data center name in a managed Cassandra cluster.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String clusterName, String dataCenterName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, clusterName, dataCenterName), serviceCallback);
    }

    /**
     * Delete a managed Cassandra data center.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Managed Cassandra cluster name.
     * @param dataCenterName Data center name in a managed Cassandra cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String clusterName, String dataCenterName) {
        return deleteWithServiceResponseAsync(resourceGroupName, clusterName, dataCenterName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a managed Cassandra data center.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Managed Cassandra cluster name.
     * @param dataCenterName Data center name in a managed Cassandra cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String clusterName, String dataCenterName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (dataCenterName == null) {
            throw new IllegalArgumentException("Parameter dataCenterName is required and cannot be null.");
        }
        final String apiVersion = "2020-06-01";
        return service.delete(this.client.subscriptionId(), resourceGroupName, clusterName, dataCenterName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create or update a managed Cassandra data center.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Managed Cassandra cluster name.
     * @param dataCenterName Data center name in a managed Cassandra cluster.
     * @param createUpdateParameters Parameters to provide for specifying the managed Cassandra data center.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DataCenterGetResultsInner object if successful.
     */
    public DataCenterGetResultsInner createUpdate(String resourceGroupName, String clusterName, String dataCenterName, DataCenterCreateUpdateParameters createUpdateParameters) {
        return createUpdateWithServiceResponseAsync(resourceGroupName, clusterName, dataCenterName, createUpdateParameters).toBlocking().last().body();
    }

    /**
     * Create or update a managed Cassandra data center.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Managed Cassandra cluster name.
     * @param dataCenterName Data center name in a managed Cassandra cluster.
     * @param createUpdateParameters Parameters to provide for specifying the managed Cassandra data center.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DataCenterGetResultsInner> createUpdateAsync(String resourceGroupName, String clusterName, String dataCenterName, DataCenterCreateUpdateParameters createUpdateParameters, final ServiceCallback<DataCenterGetResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(createUpdateWithServiceResponseAsync(resourceGroupName, clusterName, dataCenterName, createUpdateParameters), serviceCallback);
    }

    /**
     * Create or update a managed Cassandra data center.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Managed Cassandra cluster name.
     * @param dataCenterName Data center name in a managed Cassandra cluster.
     * @param createUpdateParameters Parameters to provide for specifying the managed Cassandra data center.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<DataCenterGetResultsInner> createUpdateAsync(String resourceGroupName, String clusterName, String dataCenterName, DataCenterCreateUpdateParameters createUpdateParameters) {
        return createUpdateWithServiceResponseAsync(resourceGroupName, clusterName, dataCenterName, createUpdateParameters).map(new Func1<ServiceResponse<DataCenterGetResultsInner>, DataCenterGetResultsInner>() {
            @Override
            public DataCenterGetResultsInner call(ServiceResponse<DataCenterGetResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update a managed Cassandra data center.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Managed Cassandra cluster name.
     * @param dataCenterName Data center name in a managed Cassandra cluster.
     * @param createUpdateParameters Parameters to provide for specifying the managed Cassandra data center.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<DataCenterGetResultsInner>> createUpdateWithServiceResponseAsync(String resourceGroupName, String clusterName, String dataCenterName, DataCenterCreateUpdateParameters createUpdateParameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (dataCenterName == null) {
            throw new IllegalArgumentException("Parameter dataCenterName is required and cannot be null.");
        }
        if (createUpdateParameters == null) {
            throw new IllegalArgumentException("Parameter createUpdateParameters is required and cannot be null.");
        }
        Validator.validate(createUpdateParameters);
        final String apiVersion = "2020-06-01";
        Observable<Response<ResponseBody>> observable = service.createUpdate(this.client.subscriptionId(), resourceGroupName, clusterName, dataCenterName, apiVersion, createUpdateParameters, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<DataCenterGetResultsInner>() { }.getType());
    }

    /**
     * Create or update a managed Cassandra data center.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Managed Cassandra cluster name.
     * @param dataCenterName Data center name in a managed Cassandra cluster.
     * @param createUpdateParameters Parameters to provide for specifying the managed Cassandra data center.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DataCenterGetResultsInner object if successful.
     */
    public DataCenterGetResultsInner beginCreateUpdate(String resourceGroupName, String clusterName, String dataCenterName, DataCenterCreateUpdateParameters createUpdateParameters) {
        return beginCreateUpdateWithServiceResponseAsync(resourceGroupName, clusterName, dataCenterName, createUpdateParameters).toBlocking().single().body();
    }

    /**
     * Create or update a managed Cassandra data center.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Managed Cassandra cluster name.
     * @param dataCenterName Data center name in a managed Cassandra cluster.
     * @param createUpdateParameters Parameters to provide for specifying the managed Cassandra data center.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DataCenterGetResultsInner> beginCreateUpdateAsync(String resourceGroupName, String clusterName, String dataCenterName, DataCenterCreateUpdateParameters createUpdateParameters, final ServiceCallback<DataCenterGetResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateUpdateWithServiceResponseAsync(resourceGroupName, clusterName, dataCenterName, createUpdateParameters), serviceCallback);
    }

    /**
     * Create or update a managed Cassandra data center.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Managed Cassandra cluster name.
     * @param dataCenterName Data center name in a managed Cassandra cluster.
     * @param createUpdateParameters Parameters to provide for specifying the managed Cassandra data center.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataCenterGetResultsInner object
     */
    public Observable<DataCenterGetResultsInner> beginCreateUpdateAsync(String resourceGroupName, String clusterName, String dataCenterName, DataCenterCreateUpdateParameters createUpdateParameters) {
        return beginCreateUpdateWithServiceResponseAsync(resourceGroupName, clusterName, dataCenterName, createUpdateParameters).map(new Func1<ServiceResponse<DataCenterGetResultsInner>, DataCenterGetResultsInner>() {
            @Override
            public DataCenterGetResultsInner call(ServiceResponse<DataCenterGetResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update a managed Cassandra data center.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Managed Cassandra cluster name.
     * @param dataCenterName Data center name in a managed Cassandra cluster.
     * @param createUpdateParameters Parameters to provide for specifying the managed Cassandra data center.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataCenterGetResultsInner object
     */
    public Observable<ServiceResponse<DataCenterGetResultsInner>> beginCreateUpdateWithServiceResponseAsync(String resourceGroupName, String clusterName, String dataCenterName, DataCenterCreateUpdateParameters createUpdateParameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (dataCenterName == null) {
            throw new IllegalArgumentException("Parameter dataCenterName is required and cannot be null.");
        }
        if (createUpdateParameters == null) {
            throw new IllegalArgumentException("Parameter createUpdateParameters is required and cannot be null.");
        }
        Validator.validate(createUpdateParameters);
        final String apiVersion = "2020-06-01";
        return service.beginCreateUpdate(this.client.subscriptionId(), resourceGroupName, clusterName, dataCenterName, apiVersion, createUpdateParameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DataCenterGetResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<DataCenterGetResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DataCenterGetResultsInner> clientResponse = beginCreateUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DataCenterGetResultsInner> beginCreateUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DataCenterGetResultsInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<DataCenterGetResultsInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
