/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.cosmosdb.v2020_06_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.cosmosdb.v2020_06_01_preview.CassandraDataCenters;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.cosmosdb.v2020_06_01_preview.DataCenterGetResults;

class CassandraDataCentersImpl extends WrapperImpl<CassandraDataCentersInner> implements CassandraDataCenters {
    private final CosmosDBManager manager;

    CassandraDataCentersImpl(CosmosDBManager manager) {
        super(manager.inner().cassandraDataCenters());
        this.manager = manager;
    }

    public CosmosDBManager manager() {
        return this.manager;
    }

    @Override
    public DataCenterGetResultsImpl define(String name) {
        return wrapModel(name);
    }

    private DataCenterGetResultsImpl wrapModel(DataCenterGetResultsInner inner) {
        return  new DataCenterGetResultsImpl(inner, manager());
    }

    private DataCenterGetResultsImpl wrapModel(String name) {
        return new DataCenterGetResultsImpl(name, this.manager());
    }

    @Override
    public Observable<DataCenterGetResults> getAsync(String resourceGroupName, String clusterName, String dataCenterName) {
        CassandraDataCentersInner client = this.inner();
        return client.getAsync(resourceGroupName, clusterName, dataCenterName)
        .flatMap(new Func1<DataCenterGetResultsInner, Observable<DataCenterGetResults>>() {
            @Override
            public Observable<DataCenterGetResults> call(DataCenterGetResultsInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((DataCenterGetResults)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String clusterName, String dataCenterName) {
        CassandraDataCentersInner client = this.inner();
        return client.deleteAsync(resourceGroupName, clusterName, dataCenterName).toCompletable();
    }

}
