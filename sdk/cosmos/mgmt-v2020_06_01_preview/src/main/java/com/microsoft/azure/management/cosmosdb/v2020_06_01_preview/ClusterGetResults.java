/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.cosmosdb.v2020_06_01_preview;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.arm.resources.models.Resource;
import com.microsoft.azure.arm.resources.models.GroupableResourceCore;
import com.microsoft.azure.arm.resources.models.HasResourceGroup;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.cosmosdb.v2020_06_01_preview.implementation.CosmosDBManager;
import java.util.List;
import com.microsoft.azure.management.cosmosdb.v2020_06_01_preview.implementation.ClusterGetResultsInner;

/**
 * Type representing ClusterGetResults.
 */
public interface ClusterGetResults extends HasInner<ClusterGetResultsInner>, Resource, GroupableResourceCore<CosmosDBManager, ClusterGetResultsInner>, HasResourceGroup, Refreshable<ClusterGetResults>, Updatable<ClusterGetResults.Update>, HasManager<CosmosDBManager> {
    /**
     * @return the identity value.
     */
    ManagedServiceIdentity identity();

    /**
     * @return the resource value.
     */
    ClusterGetResultsPropertiesResource resource();

    /**
     * The entirety of the ClusterGetResults definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithGroup, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of ClusterGetResults definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a ClusterGetResults definition.
         */
        interface Blank extends GroupableResourceCore.DefinitionWithRegion<WithGroup> {
        }

        /**
         * The stage of the ClusterGetResults definition allowing to specify the resource group.
         */
        interface WithGroup extends GroupableResourceCore.DefinitionStages.WithGroup<WithCreate> {
        }

        /**
         * The stage of the clustergetresults definition allowing to specify CassandraVersion.
         */
        interface WithCassandraVersion {
            /**
             * Specifies cassandraVersion.
             * @param cassandraVersion Which version of Cassandra should this cluster converge to running
             * @return the next definition stage
             */
            WithCreate withCassandraVersion(String cassandraVersion);
        }

        /**
         * The stage of the clustergetresults definition allowing to specify DelegatedManagementSubnetId.
         */
        interface WithDelegatedManagementSubnetId {
            /**
             * Specifies delegatedManagementSubnetId.
             * @param delegatedManagementSubnetId Resource ID of a subnet that this cluster's management service should run in
             * @return the next definition stage
             */
            WithCreate withDelegatedManagementSubnetId(String delegatedManagementSubnetId);
        }

        /**
         * The stage of the clustergetresults definition allowing to specify ExternalSeedNodes.
         */
        interface WithExternalSeedNodes {
            /**
             * Specifies externalSeedNodes.
             * @param externalSeedNodes List of IP addresses of seed nodes in un-managed data centers
             * @return the next definition stage
             */
            WithCreate withExternalSeedNodes(List<String> externalSeedNodes);
        }

        /**
         * The stage of the clustergetresults definition allowing to specify Identity.
         */
        interface WithIdentity {
            /**
             * Specifies identity.
             * @param identity the identity parameter value
             * @return the next definition stage
             */
            WithCreate withIdentity(ManagedServiceIdentity identity);
        }

        /**
         * The stage of the clustergetresults definition allowing to specify InitialCassandraAdminPassword.
         */
        interface WithInitialCassandraAdminPassword {
            /**
             * Specifies initialCassandraAdminPassword.
             * @param initialCassandraAdminPassword Password for clients connecting as admin to the cluster. May be changed after cluster creation
             * @return the next definition stage
             */
            WithCreate withInitialCassandraAdminPassword(String initialCassandraAdminPassword);
        }

        /**
         * The stage of the clustergetresults definition allowing to specify OverrideClusterName.
         */
        interface WithOverrideClusterName {
            /**
             * Specifies overrideClusterName.
             * @param overrideClusterName Optional value to use for clusterName in cassandra.yaml. If omitted, use the cluster's resource name
             * @return the next definition stage
             */
            WithCreate withOverrideClusterName(String overrideClusterName);
        }

        /**
         * The stage of the clustergetresults definition allowing to specify TrustedCertificates.
         */
        interface WithTrustedCertificates {
            /**
             * Specifies trustedCertificates.
             * @param trustedCertificates List of TLS certificates used to authorize clients connecting to the cluster
             * @return the next definition stage
             */
            WithCreate withTrustedCertificates(List<String> trustedCertificates);
        }

        /**
         * The stage of the clustergetresults definition allowing to specify TrustedNodeToNodeCertificates.
         */
        interface WithTrustedNodeToNodeCertificates {
            /**
             * Specifies trustedNodeToNodeCertificates.
             * @param trustedNodeToNodeCertificates List of TLS certificates used to authorize gossip from unmanaged data centers
             * @return the next definition stage
             */
            WithCreate withTrustedNodeToNodeCertificates(List<String> trustedNodeToNodeCertificates);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<ClusterGetResults>, Resource.DefinitionWithTags<WithCreate>, DefinitionStages.WithCassandraVersion, DefinitionStages.WithDelegatedManagementSubnetId, DefinitionStages.WithExternalSeedNodes, DefinitionStages.WithIdentity, DefinitionStages.WithInitialCassandraAdminPassword, DefinitionStages.WithOverrideClusterName, DefinitionStages.WithTrustedCertificates, DefinitionStages.WithTrustedNodeToNodeCertificates {
        }
    }
    /**
     * The template for a ClusterGetResults update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<ClusterGetResults>, Resource.UpdateWithTags<Update>, UpdateStages.WithCassandraVersion, UpdateStages.WithDelegatedManagementSubnetId, UpdateStages.WithExternalSeedNodes, UpdateStages.WithIdentity, UpdateStages.WithInitialCassandraAdminPassword, UpdateStages.WithOverrideClusterName, UpdateStages.WithTrustedCertificates, UpdateStages.WithTrustedNodeToNodeCertificates {
    }

    /**
     * Grouping of ClusterGetResults update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the clustergetresults update allowing to specify CassandraVersion.
         */
        interface WithCassandraVersion {
            /**
             * Specifies cassandraVersion.
             * @param cassandraVersion Which version of Cassandra should this cluster converge to running
             * @return the next update stage
             */
            Update withCassandraVersion(String cassandraVersion);
        }

        /**
         * The stage of the clustergetresults update allowing to specify DelegatedManagementSubnetId.
         */
        interface WithDelegatedManagementSubnetId {
            /**
             * Specifies delegatedManagementSubnetId.
             * @param delegatedManagementSubnetId Resource ID of a subnet that this cluster's management service should run in
             * @return the next update stage
             */
            Update withDelegatedManagementSubnetId(String delegatedManagementSubnetId);
        }

        /**
         * The stage of the clustergetresults update allowing to specify ExternalSeedNodes.
         */
        interface WithExternalSeedNodes {
            /**
             * Specifies externalSeedNodes.
             * @param externalSeedNodes List of IP addresses of seed nodes in un-managed data centers
             * @return the next update stage
             */
            Update withExternalSeedNodes(List<String> externalSeedNodes);
        }

        /**
         * The stage of the clustergetresults update allowing to specify Identity.
         */
        interface WithIdentity {
            /**
             * Specifies identity.
             * @param identity the identity parameter value
             * @return the next update stage
             */
            Update withIdentity(ManagedServiceIdentity identity);
        }

        /**
         * The stage of the clustergetresults update allowing to specify InitialCassandraAdminPassword.
         */
        interface WithInitialCassandraAdminPassword {
            /**
             * Specifies initialCassandraAdminPassword.
             * @param initialCassandraAdminPassword Password for clients connecting as admin to the cluster. May be changed after cluster creation
             * @return the next update stage
             */
            Update withInitialCassandraAdminPassword(String initialCassandraAdminPassword);
        }

        /**
         * The stage of the clustergetresults update allowing to specify OverrideClusterName.
         */
        interface WithOverrideClusterName {
            /**
             * Specifies overrideClusterName.
             * @param overrideClusterName Optional value to use for clusterName in cassandra.yaml. If omitted, use the cluster's resource name
             * @return the next update stage
             */
            Update withOverrideClusterName(String overrideClusterName);
        }

        /**
         * The stage of the clustergetresults update allowing to specify TrustedCertificates.
         */
        interface WithTrustedCertificates {
            /**
             * Specifies trustedCertificates.
             * @param trustedCertificates List of TLS certificates used to authorize clients connecting to the cluster
             * @return the next update stage
             */
            Update withTrustedCertificates(List<String> trustedCertificates);
        }

        /**
         * The stage of the clustergetresults update allowing to specify TrustedNodeToNodeCertificates.
         */
        interface WithTrustedNodeToNodeCertificates {
            /**
             * Specifies trustedNodeToNodeCertificates.
             * @param trustedNodeToNodeCertificates List of TLS certificates used to authorize gossip from unmanaged data centers
             * @return the next update stage
             */
            Update withTrustedNodeToNodeCertificates(List<String> trustedNodeToNodeCertificates);
        }

    }
}
