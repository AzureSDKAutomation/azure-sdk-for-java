// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quantum.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.quantum.AzureQuantumManager;
import com.azure.resourcemanager.quantum.fluent.models.QuantumWorkspaceInner;
import com.azure.resourcemanager.quantum.models.Provider;
import com.azure.resourcemanager.quantum.models.ProvisioningStatus;
import com.azure.resourcemanager.quantum.models.QuantumWorkspace;
import com.azure.resourcemanager.quantum.models.QuantumWorkspaceIdentity;
import com.azure.resourcemanager.quantum.models.UsableStatus;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class QuantumWorkspaceImpl
    implements QuantumWorkspace, QuantumWorkspace.Definition, QuantumWorkspace.Update {
    private QuantumWorkspaceInner innerObject;

    private final AzureQuantumManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public QuantumWorkspaceIdentity identity() {
        return this.innerModel().identity();
    }

    public List<Provider> providers() {
        List<Provider> inner = this.innerModel().providers();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public UsableStatus usable() {
        return this.innerModel().usable();
    }

    public ProvisioningStatus provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String resourceUsageId() {
        return this.innerModel().resourceUsageId();
    }

    public String storageAccount() {
        return this.innerModel().storageAccount();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public QuantumWorkspaceInner innerModel() {
        return this.innerObject;
    }

    private AzureQuantumManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String workspaceName;

    public QuantumWorkspaceImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public QuantumWorkspace create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getWorkspaces()
                .createOrUpdate(resourceGroupName, workspaceName, this.innerModel(), Context.NONE);
        return this;
    }

    public QuantumWorkspace create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getWorkspaces()
                .createOrUpdate(resourceGroupName, workspaceName, this.innerModel(), context);
        return this;
    }

    QuantumWorkspaceImpl(String name, AzureQuantumManager serviceManager) {
        this.innerObject = new QuantumWorkspaceInner();
        this.serviceManager = serviceManager;
        this.workspaceName = name;
    }

    public QuantumWorkspaceImpl update() {
        return this;
    }

    public QuantumWorkspace apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getWorkspaces()
                .updateWithResponse(resourceGroupName, workspaceName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public QuantumWorkspace apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getWorkspaces()
                .updateWithResponse(resourceGroupName, workspaceName, this.innerModel(), context)
                .getValue();
        return this;
    }

    QuantumWorkspaceImpl(QuantumWorkspaceInner innerObject, AzureQuantumManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.workspaceName = Utils.getValueFromIdByName(innerObject.id(), "workspaces");
    }

    public QuantumWorkspace refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getWorkspaces()
                .getByResourceGroupWithResponse(resourceGroupName, workspaceName, Context.NONE)
                .getValue();
        return this;
    }

    public QuantumWorkspace refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getWorkspaces()
                .getByResourceGroupWithResponse(resourceGroupName, workspaceName, context)
                .getValue();
        return this;
    }

    public QuantumWorkspaceImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public QuantumWorkspaceImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public QuantumWorkspaceImpl withTags(Map<String, String> tags) {
        this.innerModel().withTags(tags);
        return this;
    }

    public QuantumWorkspaceImpl withIdentity(QuantumWorkspaceIdentity identity) {
        this.innerModel().withIdentity(identity);
        return this;
    }

    public QuantumWorkspaceImpl withProviders(List<Provider> providers) {
        this.innerModel().withProviders(providers);
        return this;
    }

    public QuantumWorkspaceImpl withUsable(UsableStatus usable) {
        this.innerModel().withUsable(usable);
        return this;
    }

    public QuantumWorkspaceImpl withProvisioningState(ProvisioningStatus provisioningState) {
        this.innerModel().withProvisioningState(provisioningState);
        return this;
    }

    public QuantumWorkspaceImpl withResourceUsageId(String resourceUsageId) {
        this.innerModel().withResourceUsageId(resourceUsageId);
        return this;
    }

    public QuantumWorkspaceImpl withStorageAccount(String storageAccount) {
        this.innerModel().withStorageAccount(storageAccount);
        return this;
    }
}
