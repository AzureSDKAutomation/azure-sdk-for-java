// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quantum.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.Resource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.quantum.models.Provider;
import com.azure.resourcemanager.quantum.models.ProvisioningStatus;
import com.azure.resourcemanager.quantum.models.QuantumWorkspaceIdentity;
import com.azure.resourcemanager.quantum.models.UsableStatus;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** The resource proxy definition object for quantum workspace. */
@JsonFlatten
@Fluent
public class QuantumWorkspaceInner extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(QuantumWorkspaceInner.class);

    /*
     * Managed Identity information
     */
    @JsonProperty(value = "identity")
    private QuantumWorkspaceIdentity identity;

    /*
     * List of Providers selected for this Workspace
     */
    @JsonProperty(value = "properties.providers")
    private List<Provider> providers;

    /*
     * Whether the current workspace is ready to accept Jobs.
     */
    @JsonProperty(value = "properties.usable")
    private UsableStatus usable;

    /*
     * Provisioning status field
     */
    @JsonProperty(value = "properties.provisioningState")
    private ProvisioningStatus provisioningState;

    /*
     * Unique id to track resource usage.
     */
    @JsonProperty(value = "properties.resourceUsageId")
    private String resourceUsageId;

    /*
     * ARM Resource Id of the storage account associated with this workspace.
     */
    @JsonProperty(value = "properties.storageAccount")
    private String storageAccount;

    /**
     * Get the identity property: Managed Identity information.
     *
     * @return the identity value.
     */
    public QuantumWorkspaceIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: Managed Identity information.
     *
     * @param identity the identity value to set.
     * @return the QuantumWorkspaceInner object itself.
     */
    public QuantumWorkspaceInner withIdentity(QuantumWorkspaceIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the providers property: List of Providers selected for this Workspace.
     *
     * @return the providers value.
     */
    public List<Provider> providers() {
        return this.providers;
    }

    /**
     * Set the providers property: List of Providers selected for this Workspace.
     *
     * @param providers the providers value to set.
     * @return the QuantumWorkspaceInner object itself.
     */
    public QuantumWorkspaceInner withProviders(List<Provider> providers) {
        this.providers = providers;
        return this;
    }

    /**
     * Get the usable property: Whether the current workspace is ready to accept Jobs.
     *
     * @return the usable value.
     */
    public UsableStatus usable() {
        return this.usable;
    }

    /**
     * Set the usable property: Whether the current workspace is ready to accept Jobs.
     *
     * @param usable the usable value to set.
     * @return the QuantumWorkspaceInner object itself.
     */
    public QuantumWorkspaceInner withUsable(UsableStatus usable) {
        this.usable = usable;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning status field.
     *
     * @return the provisioningState value.
     */
    public ProvisioningStatus provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: Provisioning status field.
     *
     * @param provisioningState the provisioningState value to set.
     * @return the QuantumWorkspaceInner object itself.
     */
    public QuantumWorkspaceInner withProvisioningState(ProvisioningStatus provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the resourceUsageId property: Unique id to track resource usage.
     *
     * @return the resourceUsageId value.
     */
    public String resourceUsageId() {
        return this.resourceUsageId;
    }

    /**
     * Set the resourceUsageId property: Unique id to track resource usage.
     *
     * @param resourceUsageId the resourceUsageId value to set.
     * @return the QuantumWorkspaceInner object itself.
     */
    public QuantumWorkspaceInner withResourceUsageId(String resourceUsageId) {
        this.resourceUsageId = resourceUsageId;
        return this;
    }

    /**
     * Get the storageAccount property: ARM Resource Id of the storage account associated with this workspace.
     *
     * @return the storageAccount value.
     */
    public String storageAccount() {
        return this.storageAccount;
    }

    /**
     * Set the storageAccount property: ARM Resource Id of the storage account associated with this workspace.
     *
     * @param storageAccount the storageAccount value to set.
     * @return the QuantumWorkspaceInner object itself.
     */
    public QuantumWorkspaceInner withStorageAccount(String storageAccount) {
        this.storageAccount = storageAccount;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public QuantumWorkspaceInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public QuantumWorkspaceInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (identity() != null) {
            identity().validate();
        }
        if (providers() != null) {
            providers().forEach(e -> e.validate());
        }
    }
}
