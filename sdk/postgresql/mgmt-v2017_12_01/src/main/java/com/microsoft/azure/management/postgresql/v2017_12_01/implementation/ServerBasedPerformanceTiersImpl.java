/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.postgresql.v2017_12_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.postgresql.v2017_12_01.ServerBasedPerformanceTiers;
import rx.Observable;
import rx.functions.Func1;
import java.util.List;
import com.microsoft.azure.management.postgresql.v2017_12_01.ServerPerformanceTierProperties;

class ServerBasedPerformanceTiersImpl extends WrapperImpl<ServerBasedPerformanceTiersInner> implements ServerBasedPerformanceTiers {
    private final DBForPostgreSQLManager manager;

    ServerBasedPerformanceTiersImpl(DBForPostgreSQLManager manager) {
        super(manager.inner().serverBasedPerformanceTiers());
        this.manager = manager;
    }

    public DBForPostgreSQLManager manager() {
        return this.manager;
    }

    private ServerPerformanceTierPropertiesImpl wrapModel(PerformanceTierPropertiesInner inner) {
        return  new ServerPerformanceTierPropertiesImpl(inner, manager());
    }

    @Override
    public Observable<ServerPerformanceTierProperties> listAsync(String resourceGroupName, String serverName) {
        ServerBasedPerformanceTiersInner client = this.inner();
        return client.listAsync(resourceGroupName, serverName)
        .flatMap(new Func1<List<PerformanceTierPropertiesInner>, Observable<PerformanceTierPropertiesInner>>() {
            @Override
            public Observable<PerformanceTierPropertiesInner> call(List<PerformanceTierPropertiesInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<PerformanceTierPropertiesInner, ServerPerformanceTierProperties>() {
            @Override
            public ServerPerformanceTierProperties call(PerformanceTierPropertiesInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
