// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.SubResource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.network.generated.models.ProvisioningState;
import com.azure.resourcemanager.network.generated.models.RoutingPolicy;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The routing intent child resource of a Virtual hub. */
@JsonFlatten
@Fluent
public class RoutingIntentInner extends SubResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(RoutingIntentInner.class);

    /*
     * The name of the resource that is unique within a resource group. This
     * name can be used to access the resource.
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * A unique read-only string that changes whenever the resource is updated.
     */
    @JsonProperty(value = "etag", access = JsonProperty.Access.WRITE_ONLY)
    private String etag;

    /*
     * Resource type.
     */
    @JsonProperty(value = "type", access = JsonProperty.Access.WRITE_ONLY)
    private String type;

    /*
     * List of routing policies.
     */
    @JsonProperty(value = "properties.routingPolicies")
    private List<RoutingPolicy> routingPolicies;

    /*
     * The provisioning state of the RoutingIntent resource.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /**
     * Get the name property: The name of the resource that is unique within a resource group. This name can be used to
     * access the resource.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the resource that is unique within a resource group. This name can be used to
     * access the resource.
     *
     * @param name the name value to set.
     * @return the RoutingIntentInner object itself.
     */
    public RoutingIntentInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the etag property: A unique read-only string that changes whenever the resource is updated.
     *
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Get the type property: Resource type.
     *
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Get the routingPolicies property: List of routing policies.
     *
     * @return the routingPolicies value.
     */
    public List<RoutingPolicy> routingPolicies() {
        return this.routingPolicies;
    }

    /**
     * Set the routingPolicies property: List of routing policies.
     *
     * @param routingPolicies the routingPolicies value to set.
     * @return the RoutingIntentInner object itself.
     */
    public RoutingIntentInner withRoutingPolicies(List<RoutingPolicy> routingPolicies) {
        this.routingPolicies = routingPolicies;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the RoutingIntent resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /** {@inheritDoc} */
    @Override
    public RoutingIntentInner withId(String id) {
        super.withId(id);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (routingPolicies() != null) {
            routingPolicies().forEach(e -> e.validate());
        }
    }
}
