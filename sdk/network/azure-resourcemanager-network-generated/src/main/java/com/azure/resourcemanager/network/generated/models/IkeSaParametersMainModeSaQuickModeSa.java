// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** A list of quick mode security associations. */
@Fluent
public final class IkeSaParametersMainModeSaQuickModeSa {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(IkeSaParametersMainModeSaQuickModeSa.class);

    /*
     * The local endpoint.
     */
    @JsonProperty(value = "localEndpoint")
    private String localEndpoint;

    /*
     * The remote endpoint.
     */
    @JsonProperty(value = "remoteEndpoint")
    private String remoteEndpoint;

    /*
     * The IPSec encryption algorithm (IKE phase 2).
     */
    @JsonProperty(value = "encryption")
    private String encryption;

    /*
     * The IPSec integrity algorithm (IKE phase 2).
     */
    @JsonProperty(value = "integrity")
    private String integrity;

    /*
     * The PFS Group.
     */
    @JsonProperty(value = "pfsGroupId")
    private String pfsGroupId;

    /*
     * The Inbound SPI SA.
     */
    @JsonProperty(value = "inboundSPI")
    private Integer inboundSpi;

    /*
     * The Outbound SPI SA.
     */
    @JsonProperty(value = "outboundSPI")
    private Integer outboundSpi;

    /*
     * The local traffic selectors.
     */
    @JsonProperty(value = "localTrafficSelectors")
    private List<String> localTrafficSelectors;

    /*
     * The remote traffic selectors.
     */
    @JsonProperty(value = "remoteTrafficSelectors")
    private List<String> remoteTrafficSelectors;

    /*
     * The QM SA Lifetime KBytes.
     */
    @JsonProperty(value = "lifetimeKilobytes")
    private Long lifetimeKilobytes;

    /*
     * The QM SA Lifetime Seconds.
     */
    @JsonProperty(value = "lifeTimeSeconds")
    private Long lifeTimeSeconds;

    /*
     * Flag to check if SA Initiator or not.
     */
    @JsonProperty(value = "isSaInitiator")
    private Boolean isSaInitiator;

    /*
     * The time elapsed in seconds.
     */
    @JsonProperty(value = "elapsedTimeInseconds")
    private Integer elapsedTimeInseconds;

    /**
     * Get the localEndpoint property: The local endpoint.
     *
     * @return the localEndpoint value.
     */
    public String localEndpoint() {
        return this.localEndpoint;
    }

    /**
     * Set the localEndpoint property: The local endpoint.
     *
     * @param localEndpoint the localEndpoint value to set.
     * @return the IkeSaParametersMainModeSaQuickModeSa object itself.
     */
    public IkeSaParametersMainModeSaQuickModeSa withLocalEndpoint(String localEndpoint) {
        this.localEndpoint = localEndpoint;
        return this;
    }

    /**
     * Get the remoteEndpoint property: The remote endpoint.
     *
     * @return the remoteEndpoint value.
     */
    public String remoteEndpoint() {
        return this.remoteEndpoint;
    }

    /**
     * Set the remoteEndpoint property: The remote endpoint.
     *
     * @param remoteEndpoint the remoteEndpoint value to set.
     * @return the IkeSaParametersMainModeSaQuickModeSa object itself.
     */
    public IkeSaParametersMainModeSaQuickModeSa withRemoteEndpoint(String remoteEndpoint) {
        this.remoteEndpoint = remoteEndpoint;
        return this;
    }

    /**
     * Get the encryption property: The IPSec encryption algorithm (IKE phase 2).
     *
     * @return the encryption value.
     */
    public String encryption() {
        return this.encryption;
    }

    /**
     * Set the encryption property: The IPSec encryption algorithm (IKE phase 2).
     *
     * @param encryption the encryption value to set.
     * @return the IkeSaParametersMainModeSaQuickModeSa object itself.
     */
    public IkeSaParametersMainModeSaQuickModeSa withEncryption(String encryption) {
        this.encryption = encryption;
        return this;
    }

    /**
     * Get the integrity property: The IPSec integrity algorithm (IKE phase 2).
     *
     * @return the integrity value.
     */
    public String integrity() {
        return this.integrity;
    }

    /**
     * Set the integrity property: The IPSec integrity algorithm (IKE phase 2).
     *
     * @param integrity the integrity value to set.
     * @return the IkeSaParametersMainModeSaQuickModeSa object itself.
     */
    public IkeSaParametersMainModeSaQuickModeSa withIntegrity(String integrity) {
        this.integrity = integrity;
        return this;
    }

    /**
     * Get the pfsGroupId property: The PFS Group.
     *
     * @return the pfsGroupId value.
     */
    public String pfsGroupId() {
        return this.pfsGroupId;
    }

    /**
     * Set the pfsGroupId property: The PFS Group.
     *
     * @param pfsGroupId the pfsGroupId value to set.
     * @return the IkeSaParametersMainModeSaQuickModeSa object itself.
     */
    public IkeSaParametersMainModeSaQuickModeSa withPfsGroupId(String pfsGroupId) {
        this.pfsGroupId = pfsGroupId;
        return this;
    }

    /**
     * Get the inboundSpi property: The Inbound SPI SA.
     *
     * @return the inboundSpi value.
     */
    public Integer inboundSpi() {
        return this.inboundSpi;
    }

    /**
     * Set the inboundSpi property: The Inbound SPI SA.
     *
     * @param inboundSpi the inboundSpi value to set.
     * @return the IkeSaParametersMainModeSaQuickModeSa object itself.
     */
    public IkeSaParametersMainModeSaQuickModeSa withInboundSpi(Integer inboundSpi) {
        this.inboundSpi = inboundSpi;
        return this;
    }

    /**
     * Get the outboundSpi property: The Outbound SPI SA.
     *
     * @return the outboundSpi value.
     */
    public Integer outboundSpi() {
        return this.outboundSpi;
    }

    /**
     * Set the outboundSpi property: The Outbound SPI SA.
     *
     * @param outboundSpi the outboundSpi value to set.
     * @return the IkeSaParametersMainModeSaQuickModeSa object itself.
     */
    public IkeSaParametersMainModeSaQuickModeSa withOutboundSpi(Integer outboundSpi) {
        this.outboundSpi = outboundSpi;
        return this;
    }

    /**
     * Get the localTrafficSelectors property: The local traffic selectors.
     *
     * @return the localTrafficSelectors value.
     */
    public List<String> localTrafficSelectors() {
        return this.localTrafficSelectors;
    }

    /**
     * Set the localTrafficSelectors property: The local traffic selectors.
     *
     * @param localTrafficSelectors the localTrafficSelectors value to set.
     * @return the IkeSaParametersMainModeSaQuickModeSa object itself.
     */
    public IkeSaParametersMainModeSaQuickModeSa withLocalTrafficSelectors(List<String> localTrafficSelectors) {
        this.localTrafficSelectors = localTrafficSelectors;
        return this;
    }

    /**
     * Get the remoteTrafficSelectors property: The remote traffic selectors.
     *
     * @return the remoteTrafficSelectors value.
     */
    public List<String> remoteTrafficSelectors() {
        return this.remoteTrafficSelectors;
    }

    /**
     * Set the remoteTrafficSelectors property: The remote traffic selectors.
     *
     * @param remoteTrafficSelectors the remoteTrafficSelectors value to set.
     * @return the IkeSaParametersMainModeSaQuickModeSa object itself.
     */
    public IkeSaParametersMainModeSaQuickModeSa withRemoteTrafficSelectors(List<String> remoteTrafficSelectors) {
        this.remoteTrafficSelectors = remoteTrafficSelectors;
        return this;
    }

    /**
     * Get the lifetimeKilobytes property: The QM SA Lifetime KBytes.
     *
     * @return the lifetimeKilobytes value.
     */
    public Long lifetimeKilobytes() {
        return this.lifetimeKilobytes;
    }

    /**
     * Set the lifetimeKilobytes property: The QM SA Lifetime KBytes.
     *
     * @param lifetimeKilobytes the lifetimeKilobytes value to set.
     * @return the IkeSaParametersMainModeSaQuickModeSa object itself.
     */
    public IkeSaParametersMainModeSaQuickModeSa withLifetimeKilobytes(Long lifetimeKilobytes) {
        this.lifetimeKilobytes = lifetimeKilobytes;
        return this;
    }

    /**
     * Get the lifeTimeSeconds property: The QM SA Lifetime Seconds.
     *
     * @return the lifeTimeSeconds value.
     */
    public Long lifeTimeSeconds() {
        return this.lifeTimeSeconds;
    }

    /**
     * Set the lifeTimeSeconds property: The QM SA Lifetime Seconds.
     *
     * @param lifeTimeSeconds the lifeTimeSeconds value to set.
     * @return the IkeSaParametersMainModeSaQuickModeSa object itself.
     */
    public IkeSaParametersMainModeSaQuickModeSa withLifeTimeSeconds(Long lifeTimeSeconds) {
        this.lifeTimeSeconds = lifeTimeSeconds;
        return this;
    }

    /**
     * Get the isSaInitiator property: Flag to check if SA Initiator or not.
     *
     * @return the isSaInitiator value.
     */
    public Boolean isSaInitiator() {
        return this.isSaInitiator;
    }

    /**
     * Set the isSaInitiator property: Flag to check if SA Initiator or not.
     *
     * @param isSaInitiator the isSaInitiator value to set.
     * @return the IkeSaParametersMainModeSaQuickModeSa object itself.
     */
    public IkeSaParametersMainModeSaQuickModeSa withIsSaInitiator(Boolean isSaInitiator) {
        this.isSaInitiator = isSaInitiator;
        return this;
    }

    /**
     * Get the elapsedTimeInseconds property: The time elapsed in seconds.
     *
     * @return the elapsedTimeInseconds value.
     */
    public Integer elapsedTimeInseconds() {
        return this.elapsedTimeInseconds;
    }

    /**
     * Set the elapsedTimeInseconds property: The time elapsed in seconds.
     *
     * @param elapsedTimeInseconds the elapsedTimeInseconds value to set.
     * @return the IkeSaParametersMainModeSaQuickModeSa object itself.
     */
    public IkeSaParametersMainModeSaQuickModeSa withElapsedTimeInseconds(Integer elapsedTimeInseconds) {
        this.elapsedTimeInseconds = elapsedTimeInseconds;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
