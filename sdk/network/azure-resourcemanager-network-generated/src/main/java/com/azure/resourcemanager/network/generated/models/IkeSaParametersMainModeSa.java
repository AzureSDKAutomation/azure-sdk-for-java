// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** A list of main mode security associations. */
@Fluent
public final class IkeSaParametersMainModeSa {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(IkeSaParametersMainModeSa.class);

    /*
     * The local endpoint.
     */
    @JsonProperty(value = "localEndpoint")
    private String localEndpoint;

    /*
     * The remote endpoint.
     */
    @JsonProperty(value = "remoteEndpoint")
    private String remoteEndpoint;

    /*
     * The initiator cookie.
     */
    @JsonProperty(value = "initiatorCookie")
    private Long initiatorCookie;

    /*
     * The responder cookie.
     */
    @JsonProperty(value = "responderCookie")
    private Long responderCookie;

    /*
     * The local UDP encapsulation port.
     */
    @JsonProperty(value = "localUdpEncapsulationPort")
    private Integer localUdpEncapsulationPort;

    /*
     * The remote UDP encapsulation port.
     */
    @JsonProperty(value = "remoteUdpEncapsulationPort")
    private Integer remoteUdpEncapsulationPort;

    /*
     * The IKE encryption algorithm (IKE phase 1).
     */
    @JsonProperty(value = "encryption")
    private String encryption;

    /*
     * The IKE integrity algorithm (IKE phase 1).
     */
    @JsonProperty(value = "integrity")
    private String integrity;

    /*
     * The DH Group.
     */
    @JsonProperty(value = "dhGroup")
    private String dhGroup;

    /*
     * The MM SA Lifetime in seconds.
     */
    @JsonProperty(value = "lifeTimeSeconds")
    private Integer lifeTimeSeconds;

    /*
     * Flag to check if SA Initiator or not.
     */
    @JsonProperty(value = "isSaInitiator")
    private Boolean isSaInitiator;

    /*
     * The time elapsed in seconds.
     */
    @JsonProperty(value = "elapsedTimeInseconds")
    private Integer elapsedTimeInseconds;

    /*
     * A list of quick mode security associations.
     */
    @JsonProperty(value = "quickModeSa")
    private IkeSaParametersMainModeSaQuickModeSa quickModeSa;

    /**
     * Get the localEndpoint property: The local endpoint.
     *
     * @return the localEndpoint value.
     */
    public String localEndpoint() {
        return this.localEndpoint;
    }

    /**
     * Set the localEndpoint property: The local endpoint.
     *
     * @param localEndpoint the localEndpoint value to set.
     * @return the IkeSaParametersMainModeSa object itself.
     */
    public IkeSaParametersMainModeSa withLocalEndpoint(String localEndpoint) {
        this.localEndpoint = localEndpoint;
        return this;
    }

    /**
     * Get the remoteEndpoint property: The remote endpoint.
     *
     * @return the remoteEndpoint value.
     */
    public String remoteEndpoint() {
        return this.remoteEndpoint;
    }

    /**
     * Set the remoteEndpoint property: The remote endpoint.
     *
     * @param remoteEndpoint the remoteEndpoint value to set.
     * @return the IkeSaParametersMainModeSa object itself.
     */
    public IkeSaParametersMainModeSa withRemoteEndpoint(String remoteEndpoint) {
        this.remoteEndpoint = remoteEndpoint;
        return this;
    }

    /**
     * Get the initiatorCookie property: The initiator cookie.
     *
     * @return the initiatorCookie value.
     */
    public Long initiatorCookie() {
        return this.initiatorCookie;
    }

    /**
     * Set the initiatorCookie property: The initiator cookie.
     *
     * @param initiatorCookie the initiatorCookie value to set.
     * @return the IkeSaParametersMainModeSa object itself.
     */
    public IkeSaParametersMainModeSa withInitiatorCookie(Long initiatorCookie) {
        this.initiatorCookie = initiatorCookie;
        return this;
    }

    /**
     * Get the responderCookie property: The responder cookie.
     *
     * @return the responderCookie value.
     */
    public Long responderCookie() {
        return this.responderCookie;
    }

    /**
     * Set the responderCookie property: The responder cookie.
     *
     * @param responderCookie the responderCookie value to set.
     * @return the IkeSaParametersMainModeSa object itself.
     */
    public IkeSaParametersMainModeSa withResponderCookie(Long responderCookie) {
        this.responderCookie = responderCookie;
        return this;
    }

    /**
     * Get the localUdpEncapsulationPort property: The local UDP encapsulation port.
     *
     * @return the localUdpEncapsulationPort value.
     */
    public Integer localUdpEncapsulationPort() {
        return this.localUdpEncapsulationPort;
    }

    /**
     * Set the localUdpEncapsulationPort property: The local UDP encapsulation port.
     *
     * @param localUdpEncapsulationPort the localUdpEncapsulationPort value to set.
     * @return the IkeSaParametersMainModeSa object itself.
     */
    public IkeSaParametersMainModeSa withLocalUdpEncapsulationPort(Integer localUdpEncapsulationPort) {
        this.localUdpEncapsulationPort = localUdpEncapsulationPort;
        return this;
    }

    /**
     * Get the remoteUdpEncapsulationPort property: The remote UDP encapsulation port.
     *
     * @return the remoteUdpEncapsulationPort value.
     */
    public Integer remoteUdpEncapsulationPort() {
        return this.remoteUdpEncapsulationPort;
    }

    /**
     * Set the remoteUdpEncapsulationPort property: The remote UDP encapsulation port.
     *
     * @param remoteUdpEncapsulationPort the remoteUdpEncapsulationPort value to set.
     * @return the IkeSaParametersMainModeSa object itself.
     */
    public IkeSaParametersMainModeSa withRemoteUdpEncapsulationPort(Integer remoteUdpEncapsulationPort) {
        this.remoteUdpEncapsulationPort = remoteUdpEncapsulationPort;
        return this;
    }

    /**
     * Get the encryption property: The IKE encryption algorithm (IKE phase 1).
     *
     * @return the encryption value.
     */
    public String encryption() {
        return this.encryption;
    }

    /**
     * Set the encryption property: The IKE encryption algorithm (IKE phase 1).
     *
     * @param encryption the encryption value to set.
     * @return the IkeSaParametersMainModeSa object itself.
     */
    public IkeSaParametersMainModeSa withEncryption(String encryption) {
        this.encryption = encryption;
        return this;
    }

    /**
     * Get the integrity property: The IKE integrity algorithm (IKE phase 1).
     *
     * @return the integrity value.
     */
    public String integrity() {
        return this.integrity;
    }

    /**
     * Set the integrity property: The IKE integrity algorithm (IKE phase 1).
     *
     * @param integrity the integrity value to set.
     * @return the IkeSaParametersMainModeSa object itself.
     */
    public IkeSaParametersMainModeSa withIntegrity(String integrity) {
        this.integrity = integrity;
        return this;
    }

    /**
     * Get the dhGroup property: The DH Group.
     *
     * @return the dhGroup value.
     */
    public String dhGroup() {
        return this.dhGroup;
    }

    /**
     * Set the dhGroup property: The DH Group.
     *
     * @param dhGroup the dhGroup value to set.
     * @return the IkeSaParametersMainModeSa object itself.
     */
    public IkeSaParametersMainModeSa withDhGroup(String dhGroup) {
        this.dhGroup = dhGroup;
        return this;
    }

    /**
     * Get the lifeTimeSeconds property: The MM SA Lifetime in seconds.
     *
     * @return the lifeTimeSeconds value.
     */
    public Integer lifeTimeSeconds() {
        return this.lifeTimeSeconds;
    }

    /**
     * Set the lifeTimeSeconds property: The MM SA Lifetime in seconds.
     *
     * @param lifeTimeSeconds the lifeTimeSeconds value to set.
     * @return the IkeSaParametersMainModeSa object itself.
     */
    public IkeSaParametersMainModeSa withLifeTimeSeconds(Integer lifeTimeSeconds) {
        this.lifeTimeSeconds = lifeTimeSeconds;
        return this;
    }

    /**
     * Get the isSaInitiator property: Flag to check if SA Initiator or not.
     *
     * @return the isSaInitiator value.
     */
    public Boolean isSaInitiator() {
        return this.isSaInitiator;
    }

    /**
     * Set the isSaInitiator property: Flag to check if SA Initiator or not.
     *
     * @param isSaInitiator the isSaInitiator value to set.
     * @return the IkeSaParametersMainModeSa object itself.
     */
    public IkeSaParametersMainModeSa withIsSaInitiator(Boolean isSaInitiator) {
        this.isSaInitiator = isSaInitiator;
        return this;
    }

    /**
     * Get the elapsedTimeInseconds property: The time elapsed in seconds.
     *
     * @return the elapsedTimeInseconds value.
     */
    public Integer elapsedTimeInseconds() {
        return this.elapsedTimeInseconds;
    }

    /**
     * Set the elapsedTimeInseconds property: The time elapsed in seconds.
     *
     * @param elapsedTimeInseconds the elapsedTimeInseconds value to set.
     * @return the IkeSaParametersMainModeSa object itself.
     */
    public IkeSaParametersMainModeSa withElapsedTimeInseconds(Integer elapsedTimeInseconds) {
        this.elapsedTimeInseconds = elapsedTimeInseconds;
        return this;
    }

    /**
     * Get the quickModeSa property: A list of quick mode security associations.
     *
     * @return the quickModeSa value.
     */
    public IkeSaParametersMainModeSaQuickModeSa quickModeSa() {
        return this.quickModeSa;
    }

    /**
     * Set the quickModeSa property: A list of quick mode security associations.
     *
     * @param quickModeSa the quickModeSa value to set.
     * @return the IkeSaParametersMainModeSa object itself.
     */
    public IkeSaParametersMainModeSa withQuickModeSa(IkeSaParametersMainModeSaQuickModeSa quickModeSa) {
        this.quickModeSa = quickModeSa;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (quickModeSa() != null) {
            quickModeSa().validate();
        }
    }
}
