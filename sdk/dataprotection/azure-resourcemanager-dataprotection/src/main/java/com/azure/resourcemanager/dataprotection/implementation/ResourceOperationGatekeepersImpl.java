// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.dataprotection.DataProtectionManager;
import com.azure.resourcemanager.dataprotection.fluent.ResourceOperationGatekeepersClient;
import com.azure.resourcemanager.dataprotection.fluent.models.ResourceOperationGateKeeperResourceInner;
import com.azure.resourcemanager.dataprotection.models.ResourceOperationGateKeeperResource;
import com.azure.resourcemanager.dataprotection.models.ResourceOperationGatekeepers;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ResourceOperationGatekeepersImpl implements ResourceOperationGatekeepers {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ResourceOperationGatekeepersImpl.class);

    private final ResourceOperationGatekeepersClient innerClient;

    private final DataProtectionManager serviceManager;

    public ResourceOperationGatekeepersImpl(
        ResourceOperationGatekeepersClient innerClient, DataProtectionManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ResourceOperationGateKeeperResource> list() {
        PagedIterable<ResourceOperationGateKeeperResourceInner> inner = this.serviceClient().list();
        return inner.mapPage(inner1 -> new ResourceOperationGateKeeperResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<ResourceOperationGateKeeperResource> list(Context context) {
        PagedIterable<ResourceOperationGateKeeperResourceInner> inner = this.serviceClient().list(context);
        return inner.mapPage(inner1 -> new ResourceOperationGateKeeperResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<ResourceOperationGateKeeperResource> listByResourceGroup(String resourceGroupName) {
        PagedIterable<ResourceOperationGateKeeperResourceInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName);
        return inner.mapPage(inner1 -> new ResourceOperationGateKeeperResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<ResourceOperationGateKeeperResource> listByResourceGroup(
        String resourceGroupName, Context context) {
        PagedIterable<ResourceOperationGateKeeperResourceInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return inner.mapPage(inner1 -> new ResourceOperationGateKeeperResourceImpl(inner1, this.manager()));
    }

    public ResourceOperationGateKeeperResource getByResourceGroup(
        String resourceGroupName, String resourceOperationGateKeepersName) {
        ResourceOperationGateKeeperResourceInner inner =
            this.serviceClient().getByResourceGroup(resourceGroupName, resourceOperationGateKeepersName);
        if (inner != null) {
            return new ResourceOperationGateKeeperResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ResourceOperationGateKeeperResource> getByResourceGroupWithResponse(
        String resourceGroupName, String resourceOperationGateKeepersName, Context context) {
        Response<ResourceOperationGateKeeperResourceInner> inner =
            this
                .serviceClient()
                .getByResourceGroupWithResponse(resourceGroupName, resourceOperationGateKeepersName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ResourceOperationGateKeeperResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String resourceOperationGateKeepersName) {
        this.serviceClient().delete(resourceGroupName, resourceOperationGateKeepersName);
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName, String resourceOperationGateKeepersName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, resourceOperationGateKeepersName, context);
    }

    public ResourceOperationGateKeeperResource getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceOperationGateKeepersName = Utils.getValueFromIdByName(id, "resourceOperationGateKeepers");
        if (resourceOperationGateKeepersName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'resourceOperationGateKeepers'.",
                                id)));
        }
        return this
            .getByResourceGroupWithResponse(resourceGroupName, resourceOperationGateKeepersName, Context.NONE)
            .getValue();
    }

    public Response<ResourceOperationGateKeeperResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceOperationGateKeepersName = Utils.getValueFromIdByName(id, "resourceOperationGateKeepers");
        if (resourceOperationGateKeepersName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'resourceOperationGateKeepers'.",
                                id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, resourceOperationGateKeepersName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceOperationGateKeepersName = Utils.getValueFromIdByName(id, "resourceOperationGateKeepers");
        if (resourceOperationGateKeepersName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'resourceOperationGateKeepers'.",
                                id)));
        }
        this.deleteWithResponse(resourceGroupName, resourceOperationGateKeepersName, Context.NONE).getValue();
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceOperationGateKeepersName = Utils.getValueFromIdByName(id, "resourceOperationGateKeepers");
        if (resourceOperationGateKeepersName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'resourceOperationGateKeepers'.",
                                id)));
        }
        return this.deleteWithResponse(resourceGroupName, resourceOperationGateKeepersName, context);
    }

    private ResourceOperationGatekeepersClient serviceClient() {
        return this.innerClient;
    }

    private DataProtectionManager manager() {
        return this.serviceManager;
    }

    public ResourceOperationGateKeeperResourceImpl define(String name) {
        return new ResourceOperationGateKeeperResourceImpl(name, this.manager());
    }
}
