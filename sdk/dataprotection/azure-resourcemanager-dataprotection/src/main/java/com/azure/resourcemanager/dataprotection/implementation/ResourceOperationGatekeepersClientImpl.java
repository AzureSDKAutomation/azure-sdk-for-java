// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.dataprotection.fluent.ResourceOperationGatekeepersClient;
import com.azure.resourcemanager.dataprotection.fluent.models.ResourceOperationGateKeeperResourceInner;
import com.azure.resourcemanager.dataprotection.models.PatchResourceRequestInput;
import com.azure.resourcemanager.dataprotection.models.ResourceOperationGateKeeperResourceList;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in ResourceOperationGatekeepersClient. */
public final class ResourceOperationGatekeepersClientImpl implements ResourceOperationGatekeepersClient {
    private final ClientLogger logger = new ClientLogger(ResourceOperationGatekeepersClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final ResourceOperationGatekeepersService service;

    /** The service client containing this operation class. */
    private final DataProtectionClientImpl client;

    /**
     * Initializes an instance of ResourceOperationGatekeepersClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ResourceOperationGatekeepersClientImpl(DataProtectionClientImpl client) {
        this.service =
            RestProxy
                .create(
                    ResourceOperationGatekeepersService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for DataProtectionClientResourceOperationGatekeepers to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "DataProtectionClient")
    private interface ResourceOperationGatekeepersService {
        @Headers({"Content-Type: application/json"})
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.DataProtection/resourceOperationGateKeepers")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ResourceOperationGateKeeperResourceList>> list(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection"
                + "/resourceOperationGateKeepers")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ResourceOperationGateKeeperResourceList>> listByResourceGroup(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection"
                + "/resourceOperationGateKeepers/{resourceOperationGateKeepersName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ResourceOperationGateKeeperResourceInner>> getByResourceGroup(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceOperationGateKeepersName") String resourceOperationGateKeepersName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection"
                + "/resourceOperationGateKeepers/{resourceOperationGateKeepersName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ResourceOperationGateKeeperResourceInner>> put(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceOperationGateKeepersName") String resourceOperationGateKeepersName,
            @BodyParam("application/json") ResourceOperationGateKeeperResourceInner parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection"
                + "/resourceOperationGateKeepers/{resourceOperationGateKeepersName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceOperationGateKeepersName") String resourceOperationGateKeepersName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection"
                + "/resourceOperationGateKeepers/{resourceOperationGateKeepersName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ResourceOperationGateKeeperResourceInner>> patch(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceOperationGateKeepersName") String resourceOperationGateKeepersName,
            @BodyParam("application/json") PatchResourceRequestInput parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ResourceOperationGateKeeperResourceList>> getResourcesInSubscriptionNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ResourceOperationGateKeeperResourceList>> getResourcesInResourceGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Returns ResourceOperationGateKeepers collection belonging to a subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of ResourceOperationGateKeeper resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ResourceOperationGateKeeperResourceInner>> listSinglePageAsync() {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2020-01-01-beta";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(this.client.getEndpoint(), apiVersion, this.client.getSubscriptionId(), accept, context))
            .<PagedResponse<ResourceOperationGateKeeperResourceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Returns ResourceOperationGateKeepers collection belonging to a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of ResourceOperationGateKeeper resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ResourceOperationGateKeeperResourceInner>> listSinglePageAsync(Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2020-01-01-beta";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), apiVersion, this.client.getSubscriptionId(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Returns ResourceOperationGateKeepers collection belonging to a subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of ResourceOperationGateKeeper resources.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ResourceOperationGateKeeperResourceInner> listAsync() {
        return new PagedFlux<>(
            () -> listSinglePageAsync(), nextLink -> getResourcesInSubscriptionNextSinglePageAsync(nextLink));
    }

    /**
     * Returns ResourceOperationGateKeepers collection belonging to a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of ResourceOperationGateKeeper resources.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ResourceOperationGateKeeperResourceInner> listAsync(Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(context),
            nextLink -> getResourcesInSubscriptionNextSinglePageAsync(nextLink, context));
    }

    /**
     * Returns ResourceOperationGateKeepers collection belonging to a subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of ResourceOperationGateKeeper resources.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ResourceOperationGateKeeperResourceInner> list() {
        return new PagedIterable<>(listAsync());
    }

    /**
     * Returns ResourceOperationGateKeepers collection belonging to a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of ResourceOperationGateKeeper resources.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ResourceOperationGateKeeperResourceInner> list(Context context) {
        return new PagedIterable<>(listAsync(context));
    }

    /**
     * Returns ResourceOperationGateKeepers collection belonging to a ResourceGroup.
     *
     * @param resourceGroupName The name of the resource group where the backup vault is present.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of ResourceOperationGateKeeper resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ResourceOperationGateKeeperResourceInner>> listByResourceGroupSinglePageAsync(
        String resourceGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2020-01-01-beta";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByResourceGroup(
                            this.client.getEndpoint(),
                            apiVersion,
                            resourceGroupName,
                            this.client.getSubscriptionId(),
                            accept,
                            context))
            .<PagedResponse<ResourceOperationGateKeeperResourceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Returns ResourceOperationGateKeepers collection belonging to a ResourceGroup.
     *
     * @param resourceGroupName The name of the resource group where the backup vault is present.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of ResourceOperationGateKeeper resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ResourceOperationGateKeeperResourceInner>> listByResourceGroupSinglePageAsync(
        String resourceGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2020-01-01-beta";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByResourceGroup(
                this.client.getEndpoint(),
                apiVersion,
                resourceGroupName,
                this.client.getSubscriptionId(),
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Returns ResourceOperationGateKeepers collection belonging to a ResourceGroup.
     *
     * @param resourceGroupName The name of the resource group where the backup vault is present.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of ResourceOperationGateKeeper resources.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ResourceOperationGateKeeperResourceInner> listByResourceGroupAsync(String resourceGroupName) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName),
            nextLink -> getResourcesInResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * Returns ResourceOperationGateKeepers collection belonging to a ResourceGroup.
     *
     * @param resourceGroupName The name of the resource group where the backup vault is present.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of ResourceOperationGateKeeper resources.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ResourceOperationGateKeeperResourceInner> listByResourceGroupAsync(
        String resourceGroupName, Context context) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName, context),
            nextLink -> getResourcesInResourceGroupNextSinglePageAsync(nextLink, context));
    }

    /**
     * Returns ResourceOperationGateKeepers collection belonging to a ResourceGroup.
     *
     * @param resourceGroupName The name of the resource group where the backup vault is present.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of ResourceOperationGateKeeper resources.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ResourceOperationGateKeeperResourceInner> listByResourceGroup(String resourceGroupName) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName));
    }

    /**
     * Returns ResourceOperationGateKeepers collection belonging to a ResourceGroup.
     *
     * @param resourceGroupName The name of the resource group where the backup vault is present.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of ResourceOperationGateKeeper resources.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ResourceOperationGateKeeperResourceInner> listByResourceGroup(
        String resourceGroupName, Context context) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName, context));
    }

    /**
     * Returns a ResourceOperationGateKeeper belonging to a resource group.
     *
     * @param resourceGroupName The name of the resource group where the backup vault is present.
     * @param resourceOperationGateKeepersName The name of the ResourceOperationGateKeeper.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resourceOperationGateKeeper Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ResourceOperationGateKeeperResourceInner>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String resourceOperationGateKeepersName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceOperationGateKeepersName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter resourceOperationGateKeepersName is required and cannot be null."));
        }
        final String apiVersion = "2020-01-01-beta";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getByResourceGroup(
                            this.client.getEndpoint(),
                            apiVersion,
                            resourceGroupName,
                            this.client.getSubscriptionId(),
                            resourceOperationGateKeepersName,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Returns a ResourceOperationGateKeeper belonging to a resource group.
     *
     * @param resourceGroupName The name of the resource group where the backup vault is present.
     * @param resourceOperationGateKeepersName The name of the ResourceOperationGateKeeper.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resourceOperationGateKeeper Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ResourceOperationGateKeeperResourceInner>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String resourceOperationGateKeepersName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceOperationGateKeepersName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter resourceOperationGateKeepersName is required and cannot be null."));
        }
        final String apiVersion = "2020-01-01-beta";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getByResourceGroup(
                this.client.getEndpoint(),
                apiVersion,
                resourceGroupName,
                this.client.getSubscriptionId(),
                resourceOperationGateKeepersName,
                accept,
                context);
    }

    /**
     * Returns a ResourceOperationGateKeeper belonging to a resource group.
     *
     * @param resourceGroupName The name of the resource group where the backup vault is present.
     * @param resourceOperationGateKeepersName The name of the ResourceOperationGateKeeper.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resourceOperationGateKeeper Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ResourceOperationGateKeeperResourceInner> getByResourceGroupAsync(
        String resourceGroupName, String resourceOperationGateKeepersName) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, resourceOperationGateKeepersName)
            .flatMap(
                (Response<ResourceOperationGateKeeperResourceInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Returns a ResourceOperationGateKeeper belonging to a resource group.
     *
     * @param resourceGroupName The name of the resource group where the backup vault is present.
     * @param resourceOperationGateKeepersName The name of the ResourceOperationGateKeeper.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resourceOperationGateKeeper Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResourceOperationGateKeeperResourceInner getByResourceGroup(
        String resourceGroupName, String resourceOperationGateKeepersName) {
        return getByResourceGroupAsync(resourceGroupName, resourceOperationGateKeepersName).block();
    }

    /**
     * Returns a ResourceOperationGateKeeper belonging to a resource group.
     *
     * @param resourceGroupName The name of the resource group where the backup vault is present.
     * @param resourceOperationGateKeepersName The name of the ResourceOperationGateKeeper.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resourceOperationGateKeeper Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ResourceOperationGateKeeperResourceInner> getByResourceGroupWithResponse(
        String resourceGroupName, String resourceOperationGateKeepersName, Context context) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, resourceOperationGateKeepersName, context)
            .block();
    }

    /**
     * Creates or updates a ResourceOperationGatekeeper resource belonging to a resource group.
     *
     * @param resourceGroupName The name of the resource group where the backup vault is present.
     * @param resourceOperationGateKeepersName The name of ResourceOperationGatekeeper.
     * @param parameters Request body for operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resourceOperationGateKeeper Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ResourceOperationGateKeeperResourceInner>> putWithResponseAsync(
        String resourceGroupName,
        String resourceOperationGateKeepersName,
        ResourceOperationGateKeeperResourceInner parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceOperationGateKeepersName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter resourceOperationGateKeepersName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String apiVersion = "2020-01-01-beta";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .put(
                            this.client.getEndpoint(),
                            apiVersion,
                            resourceGroupName,
                            this.client.getSubscriptionId(),
                            resourceOperationGateKeepersName,
                            parameters,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Creates or updates a ResourceOperationGatekeeper resource belonging to a resource group.
     *
     * @param resourceGroupName The name of the resource group where the backup vault is present.
     * @param resourceOperationGateKeepersName The name of ResourceOperationGatekeeper.
     * @param parameters Request body for operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resourceOperationGateKeeper Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ResourceOperationGateKeeperResourceInner>> putWithResponseAsync(
        String resourceGroupName,
        String resourceOperationGateKeepersName,
        ResourceOperationGateKeeperResourceInner parameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceOperationGateKeepersName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter resourceOperationGateKeepersName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String apiVersion = "2020-01-01-beta";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .put(
                this.client.getEndpoint(),
                apiVersion,
                resourceGroupName,
                this.client.getSubscriptionId(),
                resourceOperationGateKeepersName,
                parameters,
                accept,
                context);
    }

    /**
     * Creates or updates a ResourceOperationGatekeeper resource belonging to a resource group.
     *
     * @param resourceGroupName The name of the resource group where the backup vault is present.
     * @param resourceOperationGateKeepersName The name of ResourceOperationGatekeeper.
     * @param parameters Request body for operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resourceOperationGateKeeper Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ResourceOperationGateKeeperResourceInner> putAsync(
        String resourceGroupName,
        String resourceOperationGateKeepersName,
        ResourceOperationGateKeeperResourceInner parameters) {
        return putWithResponseAsync(resourceGroupName, resourceOperationGateKeepersName, parameters)
            .flatMap(
                (Response<ResourceOperationGateKeeperResourceInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Creates or updates a ResourceOperationGatekeeper resource belonging to a resource group.
     *
     * @param resourceGroupName The name of the resource group where the backup vault is present.
     * @param resourceOperationGateKeepersName The name of ResourceOperationGatekeeper.
     * @param parameters Request body for operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resourceOperationGateKeeper Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResourceOperationGateKeeperResourceInner put(
        String resourceGroupName,
        String resourceOperationGateKeepersName,
        ResourceOperationGateKeeperResourceInner parameters) {
        return putAsync(resourceGroupName, resourceOperationGateKeepersName, parameters).block();
    }

    /**
     * Creates or updates a ResourceOperationGatekeeper resource belonging to a resource group.
     *
     * @param resourceGroupName The name of the resource group where the backup vault is present.
     * @param resourceOperationGateKeepersName The name of ResourceOperationGatekeeper.
     * @param parameters Request body for operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resourceOperationGateKeeper Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ResourceOperationGateKeeperResourceInner> putWithResponse(
        String resourceGroupName,
        String resourceOperationGateKeepersName,
        ResourceOperationGateKeeperResourceInner parameters,
        Context context) {
        return putWithResponseAsync(resourceGroupName, resourceOperationGateKeepersName, parameters, context).block();
    }

    /**
     * Deletes a ResourceOperationGateKeeper resource from the resource group.
     *
     * @param resourceGroupName The name of the resource group where the backup vault is present.
     * @param resourceOperationGateKeepersName The name of ResourceOperationGatekeeper.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String resourceGroupName, String resourceOperationGateKeepersName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceOperationGateKeepersName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter resourceOperationGateKeepersName is required and cannot be null."));
        }
        final String apiVersion = "2020-01-01-beta";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            apiVersion,
                            resourceGroupName,
                            this.client.getSubscriptionId(),
                            resourceOperationGateKeepersName,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Deletes a ResourceOperationGateKeeper resource from the resource group.
     *
     * @param resourceGroupName The name of the resource group where the backup vault is present.
     * @param resourceOperationGateKeepersName The name of ResourceOperationGatekeeper.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String resourceGroupName, String resourceOperationGateKeepersName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceOperationGateKeepersName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter resourceOperationGateKeepersName is required and cannot be null."));
        }
        final String apiVersion = "2020-01-01-beta";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                apiVersion,
                resourceGroupName,
                this.client.getSubscriptionId(),
                resourceOperationGateKeepersName,
                accept,
                context);
    }

    /**
     * Deletes a ResourceOperationGateKeeper resource from the resource group.
     *
     * @param resourceGroupName The name of the resource group where the backup vault is present.
     * @param resourceOperationGateKeepersName The name of ResourceOperationGatekeeper.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String resourceOperationGateKeepersName) {
        return deleteWithResponseAsync(resourceGroupName, resourceOperationGateKeepersName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Deletes a ResourceOperationGateKeeper resource from the resource group.
     *
     * @param resourceGroupName The name of the resource group where the backup vault is present.
     * @param resourceOperationGateKeepersName The name of ResourceOperationGatekeeper.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String resourceOperationGateKeepersName) {
        deleteAsync(resourceGroupName, resourceOperationGateKeepersName).block();
    }

    /**
     * Deletes a ResourceOperationGateKeeper resource from the resource group.
     *
     * @param resourceGroupName The name of the resource group where the backup vault is present.
     * @param resourceOperationGateKeepersName The name of ResourceOperationGatekeeper.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(
        String resourceGroupName, String resourceOperationGateKeepersName, Context context) {
        return deleteWithResponseAsync(resourceGroupName, resourceOperationGateKeepersName, context).block();
    }

    /**
     * Updates a ResourceOperationGatekeeper resource belonging to a resource group. For example, updating tags for a
     * resource.
     *
     * @param resourceGroupName The name of the resource group where the backup vault is present.
     * @param resourceOperationGateKeepersName The name of ResourceOperationGatekeeper.
     * @param parameters Request body for operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resourceOperationGateKeeper Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ResourceOperationGateKeeperResourceInner>> patchWithResponseAsync(
        String resourceGroupName, String resourceOperationGateKeepersName, PatchResourceRequestInput parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceOperationGateKeepersName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter resourceOperationGateKeepersName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String apiVersion = "2020-01-01-beta";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .patch(
                            this.client.getEndpoint(),
                            apiVersion,
                            resourceGroupName,
                            this.client.getSubscriptionId(),
                            resourceOperationGateKeepersName,
                            parameters,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Updates a ResourceOperationGatekeeper resource belonging to a resource group. For example, updating tags for a
     * resource.
     *
     * @param resourceGroupName The name of the resource group where the backup vault is present.
     * @param resourceOperationGateKeepersName The name of ResourceOperationGatekeeper.
     * @param parameters Request body for operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resourceOperationGateKeeper Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ResourceOperationGateKeeperResourceInner>> patchWithResponseAsync(
        String resourceGroupName,
        String resourceOperationGateKeepersName,
        PatchResourceRequestInput parameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceOperationGateKeepersName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter resourceOperationGateKeepersName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String apiVersion = "2020-01-01-beta";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .patch(
                this.client.getEndpoint(),
                apiVersion,
                resourceGroupName,
                this.client.getSubscriptionId(),
                resourceOperationGateKeepersName,
                parameters,
                accept,
                context);
    }

    /**
     * Updates a ResourceOperationGatekeeper resource belonging to a resource group. For example, updating tags for a
     * resource.
     *
     * @param resourceGroupName The name of the resource group where the backup vault is present.
     * @param resourceOperationGateKeepersName The name of ResourceOperationGatekeeper.
     * @param parameters Request body for operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resourceOperationGateKeeper Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ResourceOperationGateKeeperResourceInner> patchAsync(
        String resourceGroupName, String resourceOperationGateKeepersName, PatchResourceRequestInput parameters) {
        return patchWithResponseAsync(resourceGroupName, resourceOperationGateKeepersName, parameters)
            .flatMap(
                (Response<ResourceOperationGateKeeperResourceInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Updates a ResourceOperationGatekeeper resource belonging to a resource group. For example, updating tags for a
     * resource.
     *
     * @param resourceGroupName The name of the resource group where the backup vault is present.
     * @param resourceOperationGateKeepersName The name of ResourceOperationGatekeeper.
     * @param parameters Request body for operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resourceOperationGateKeeper Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResourceOperationGateKeeperResourceInner patch(
        String resourceGroupName, String resourceOperationGateKeepersName, PatchResourceRequestInput parameters) {
        return patchAsync(resourceGroupName, resourceOperationGateKeepersName, parameters).block();
    }

    /**
     * Updates a ResourceOperationGatekeeper resource belonging to a resource group. For example, updating tags for a
     * resource.
     *
     * @param resourceGroupName The name of the resource group where the backup vault is present.
     * @param resourceOperationGateKeepersName The name of ResourceOperationGatekeeper.
     * @param parameters Request body for operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return resourceOperationGateKeeper Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ResourceOperationGateKeeperResourceInner> patchWithResponse(
        String resourceGroupName,
        String resourceOperationGateKeepersName,
        PatchResourceRequestInput parameters,
        Context context) {
        return patchWithResponseAsync(resourceGroupName, resourceOperationGateKeepersName, parameters, context).block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of ResourceOperationGateKeeper resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ResourceOperationGateKeeperResourceInner>> getResourcesInSubscriptionNextSinglePageAsync(
        String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.getResourcesInSubscriptionNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ResourceOperationGateKeeperResourceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of ResourceOperationGateKeeper resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ResourceOperationGateKeeperResourceInner>> getResourcesInSubscriptionNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getResourcesInSubscriptionNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of ResourceOperationGateKeeper resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ResourceOperationGateKeeperResourceInner>>
        getResourcesInResourceGroupNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service.getResourcesInResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ResourceOperationGateKeeperResourceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of ResourceOperationGateKeeper resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ResourceOperationGateKeeperResourceInner>>
        getResourcesInResourceGroupNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getResourcesInResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
