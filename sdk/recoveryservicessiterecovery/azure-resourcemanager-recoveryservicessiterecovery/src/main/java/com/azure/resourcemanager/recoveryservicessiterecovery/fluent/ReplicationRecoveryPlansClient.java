// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.models.RecoveryPlanInner;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.CreateRecoveryPlanInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RecoveryPlanPlannedFailoverInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RecoveryPlanTestFailoverCleanupInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RecoveryPlanTestFailoverInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RecoveryPlanUnplannedFailoverInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.UpdateRecoveryPlanInput;

/** An instance of this class provides access to all the operations defined in ReplicationRecoveryPlansClient. */
public interface ReplicationRecoveryPlansClient {
    /**
     * Lists the recovery plans in the vault.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan collection details.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<RecoveryPlanInner> list();

    /**
     * Lists the recovery plans in the vault.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan collection details.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<RecoveryPlanInner> list(Context context);

    /**
     * Gets the details of the recovery plan.
     *
     * @param recoveryPlanName Name of the recovery plan.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the recovery plan.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    RecoveryPlanInner get(String recoveryPlanName);

    /**
     * Gets the details of the recovery plan.
     *
     * @param recoveryPlanName Name of the recovery plan.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the recovery plan.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<RecoveryPlanInner> getWithResponse(String recoveryPlanName, Context context);

    /**
     * The operation to create a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param input Create recovery plan input class.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginCreate(
        String recoveryPlanName, CreateRecoveryPlanInput input);

    /**
     * The operation to create a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param input Create recovery plan input class.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginCreate(
        String recoveryPlanName, CreateRecoveryPlanInput input, Context context);

    /**
     * The operation to create a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param input Create recovery plan input class.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    RecoveryPlanInner create(String recoveryPlanName, CreateRecoveryPlanInput input);

    /**
     * The operation to create a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param input Create recovery plan input class.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    RecoveryPlanInner create(String recoveryPlanName, CreateRecoveryPlanInput input, Context context);

    /**
     * Delete a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<Void>, Void> beginDelete(String recoveryPlanName);

    /**
     * Delete a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<Void>, Void> beginDelete(String recoveryPlanName, Context context);

    /**
     * Delete a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String recoveryPlanName);

    /**
     * Delete a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String recoveryPlanName, Context context);

    /**
     * The operation to update a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param input Update recovery plan input class.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginUpdate(
        String recoveryPlanName, UpdateRecoveryPlanInput input);

    /**
     * The operation to update a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param input Update recovery plan input class.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginUpdate(
        String recoveryPlanName, UpdateRecoveryPlanInput input, Context context);

    /**
     * The operation to update a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param input Update recovery plan input class.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    RecoveryPlanInner update(String recoveryPlanName, UpdateRecoveryPlanInput input);

    /**
     * The operation to update a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param input Update recovery plan input class.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    RecoveryPlanInner update(String recoveryPlanName, UpdateRecoveryPlanInput input, Context context);

    /**
     * The operation to cancel the failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginFailoverCancel(String recoveryPlanName);

    /**
     * The operation to cancel the failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginFailoverCancel(
        String recoveryPlanName, Context context);

    /**
     * The operation to cancel the failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    RecoveryPlanInner failoverCancel(String recoveryPlanName);

    /**
     * The operation to cancel the failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    RecoveryPlanInner failoverCancel(String recoveryPlanName, Context context);

    /**
     * The operation to commit the failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginFailoverCommit(String recoveryPlanName);

    /**
     * The operation to commit the failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginFailoverCommit(
        String recoveryPlanName, Context context);

    /**
     * The operation to commit the failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    RecoveryPlanInner failoverCommit(String recoveryPlanName);

    /**
     * The operation to commit the failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    RecoveryPlanInner failoverCommit(String recoveryPlanName, Context context);

    /**
     * The operation to start the planned failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param input Recovery plan planned failover input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginPlannedFailover(
        String recoveryPlanName, RecoveryPlanPlannedFailoverInput input);

    /**
     * The operation to start the planned failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param input Recovery plan planned failover input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginPlannedFailover(
        String recoveryPlanName, RecoveryPlanPlannedFailoverInput input, Context context);

    /**
     * The operation to start the planned failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param input Recovery plan planned failover input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    RecoveryPlanInner plannedFailover(String recoveryPlanName, RecoveryPlanPlannedFailoverInput input);

    /**
     * The operation to start the planned failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param input Recovery plan planned failover input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    RecoveryPlanInner plannedFailover(String recoveryPlanName, RecoveryPlanPlannedFailoverInput input, Context context);

    /**
     * The operation to reprotect(reverse replicate) a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginReprotect(String recoveryPlanName);

    /**
     * The operation to reprotect(reverse replicate) a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginReprotect(
        String recoveryPlanName, Context context);

    /**
     * The operation to reprotect(reverse replicate) a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    RecoveryPlanInner reprotect(String recoveryPlanName);

    /**
     * The operation to reprotect(reverse replicate) a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    RecoveryPlanInner reprotect(String recoveryPlanName, Context context);

    /**
     * The operation to start the test failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param input Recovery plan test failover input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginTestFailover(
        String recoveryPlanName, RecoveryPlanTestFailoverInput input);

    /**
     * The operation to start the test failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param input Recovery plan test failover input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginTestFailover(
        String recoveryPlanName, RecoveryPlanTestFailoverInput input, Context context);

    /**
     * The operation to start the test failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param input Recovery plan test failover input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    RecoveryPlanInner testFailover(String recoveryPlanName, RecoveryPlanTestFailoverInput input);

    /**
     * The operation to start the test failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param input Recovery plan test failover input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    RecoveryPlanInner testFailover(String recoveryPlanName, RecoveryPlanTestFailoverInput input, Context context);

    /**
     * The operation to cleanup test failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param input Recovery plan test failover cleanup input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginTestFailoverCleanup(
        String recoveryPlanName, RecoveryPlanTestFailoverCleanupInput input);

    /**
     * The operation to cleanup test failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param input Recovery plan test failover cleanup input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginTestFailoverCleanup(
        String recoveryPlanName, RecoveryPlanTestFailoverCleanupInput input, Context context);

    /**
     * The operation to cleanup test failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param input Recovery plan test failover cleanup input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    RecoveryPlanInner testFailoverCleanup(String recoveryPlanName, RecoveryPlanTestFailoverCleanupInput input);

    /**
     * The operation to cleanup test failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param input Recovery plan test failover cleanup input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    RecoveryPlanInner testFailoverCleanup(
        String recoveryPlanName, RecoveryPlanTestFailoverCleanupInput input, Context context);

    /**
     * The operation to start the failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param input Recovery plan unplanned failover input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginUnplannedFailover(
        String recoveryPlanName, RecoveryPlanUnplannedFailoverInput input);

    /**
     * The operation to start the failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param input Recovery plan unplanned failover input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<RecoveryPlanInner>, RecoveryPlanInner> beginUnplannedFailover(
        String recoveryPlanName, RecoveryPlanUnplannedFailoverInput input, Context context);

    /**
     * The operation to start the failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param input Recovery plan unplanned failover input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    RecoveryPlanInner unplannedFailover(String recoveryPlanName, RecoveryPlanUnplannedFailoverInput input);

    /**
     * The operation to start the failover of a recovery plan.
     *
     * @param recoveryPlanName Recovery plan name.
     * @param input Recovery plan unplanned failover input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return recovery plan details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    RecoveryPlanInner unplannedFailover(
        String recoveryPlanName, RecoveryPlanUnplannedFailoverInput input, Context context);
}
