// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.ReplicationFabricsClient;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.models.FabricInner;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.Fabric;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.FailoverProcessServerRequest;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RenewCertificateInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ReplicationFabrics;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ReplicationFabricsImpl implements ReplicationFabrics {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ReplicationFabricsImpl.class);

    private final ReplicationFabricsClient innerClient;

    private final SiteRecoveryManager serviceManager;

    public ReplicationFabricsImpl(ReplicationFabricsClient innerClient, SiteRecoveryManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Fabric> list() {
        PagedIterable<FabricInner> inner = this.serviceClient().list();
        return inner.mapPage(inner1 -> new FabricImpl(inner1, this.manager()));
    }

    public PagedIterable<Fabric> list(Context context) {
        PagedIterable<FabricInner> inner = this.serviceClient().list(context);
        return inner.mapPage(inner1 -> new FabricImpl(inner1, this.manager()));
    }

    public Fabric get(String fabricName) {
        FabricInner inner = this.serviceClient().get(fabricName);
        if (inner != null) {
            return new FabricImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Fabric> getWithResponse(String fabricName, Context context) {
        Response<FabricInner> inner = this.serviceClient().getWithResponse(fabricName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new FabricImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void purge(String fabricName) {
        this.serviceClient().purge(fabricName);
    }

    public void purge(String fabricName, Context context) {
        this.serviceClient().purge(fabricName, context);
    }

    public Fabric checkConsistency(String fabricName) {
        FabricInner inner = this.serviceClient().checkConsistency(fabricName);
        if (inner != null) {
            return new FabricImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Fabric checkConsistency(String fabricName, Context context) {
        FabricInner inner = this.serviceClient().checkConsistency(fabricName, context);
        if (inner != null) {
            return new FabricImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void migrateToAad(String fabricName) {
        this.serviceClient().migrateToAad(fabricName);
    }

    public void migrateToAad(String fabricName, Context context) {
        this.serviceClient().migrateToAad(fabricName, context);
    }

    public Fabric reassociateGateway(String fabricName, FailoverProcessServerRequest failoverProcessServerRequest) {
        FabricInner inner = this.serviceClient().reassociateGateway(fabricName, failoverProcessServerRequest);
        if (inner != null) {
            return new FabricImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Fabric reassociateGateway(
        String fabricName, FailoverProcessServerRequest failoverProcessServerRequest, Context context) {
        FabricInner inner = this.serviceClient().reassociateGateway(fabricName, failoverProcessServerRequest, context);
        if (inner != null) {
            return new FabricImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String fabricName) {
        this.serviceClient().delete(fabricName);
    }

    public void delete(String fabricName, Context context) {
        this.serviceClient().delete(fabricName, context);
    }

    public Fabric renewCertificate(String fabricName, RenewCertificateInput renewCertificate) {
        FabricInner inner = this.serviceClient().renewCertificate(fabricName, renewCertificate);
        if (inner != null) {
            return new FabricImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Fabric renewCertificate(String fabricName, RenewCertificateInput renewCertificate, Context context) {
        FabricInner inner = this.serviceClient().renewCertificate(fabricName, renewCertificate, context);
        if (inner != null) {
            return new FabricImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Fabric getById(String id) {
        String fabricName = Utils.getValueFromIdByName(id, "replicationFabrics");
        if (fabricName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationFabrics'.", id)));
        }
        return this.getWithResponse(fabricName, Context.NONE).getValue();
    }

    public Response<Fabric> getByIdWithResponse(String id, Context context) {
        String fabricName = Utils.getValueFromIdByName(id, "replicationFabrics");
        if (fabricName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationFabrics'.", id)));
        }
        return this.getWithResponse(fabricName, context);
    }

    private ReplicationFabricsClient serviceClient() {
        return this.innerClient;
    }

    private SiteRecoveryManager manager() {
        return this.serviceManager;
    }

    public FabricImpl define(String name) {
        return new FabricImpl(name, this.manager());
    }
}
