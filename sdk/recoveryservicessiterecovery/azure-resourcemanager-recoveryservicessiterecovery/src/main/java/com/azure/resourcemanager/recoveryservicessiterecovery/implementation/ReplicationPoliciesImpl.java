// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.ReplicationPoliciesClient;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.models.PolicyInner;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.Policy;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ReplicationPolicies;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ReplicationPoliciesImpl implements ReplicationPolicies {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ReplicationPoliciesImpl.class);

    private final ReplicationPoliciesClient innerClient;

    private final SiteRecoveryManager serviceManager;

    public ReplicationPoliciesImpl(ReplicationPoliciesClient innerClient, SiteRecoveryManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Policy> list() {
        PagedIterable<PolicyInner> inner = this.serviceClient().list();
        return inner.mapPage(inner1 -> new PolicyImpl(inner1, this.manager()));
    }

    public PagedIterable<Policy> list(Context context) {
        PagedIterable<PolicyInner> inner = this.serviceClient().list(context);
        return inner.mapPage(inner1 -> new PolicyImpl(inner1, this.manager()));
    }

    public Policy get(String policyName) {
        PolicyInner inner = this.serviceClient().get(policyName);
        if (inner != null) {
            return new PolicyImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Policy> getWithResponse(String policyName, Context context) {
        Response<PolicyInner> inner = this.serviceClient().getWithResponse(policyName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PolicyImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String policyName) {
        this.serviceClient().delete(policyName);
    }

    public void delete(String policyName, Context context) {
        this.serviceClient().delete(policyName, context);
    }

    public Policy getById(String id) {
        String policyName = Utils.getValueFromIdByName(id, "replicationPolicies");
        if (policyName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationPolicies'.", id)));
        }
        return this.getWithResponse(policyName, Context.NONE).getValue();
    }

    public Response<Policy> getByIdWithResponse(String id, Context context) {
        String policyName = Utils.getValueFromIdByName(id, "replicationPolicies");
        if (policyName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationPolicies'.", id)));
        }
        return this.getWithResponse(policyName, context);
    }

    public void deleteById(String id) {
        String policyName = Utils.getValueFromIdByName(id, "replicationPolicies");
        if (policyName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationPolicies'.", id)));
        }
        this.delete(policyName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String policyName = Utils.getValueFromIdByName(id, "replicationPolicies");
        if (policyName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationPolicies'.", id)));
        }
        this.delete(policyName, context);
    }

    private ReplicationPoliciesClient serviceClient() {
        return this.innerClient;
    }

    private SiteRecoveryManager manager() {
        return this.serviceManager;
    }

    public PolicyImpl define(String name) {
        return new PolicyImpl(name, this.manager());
    }
}
