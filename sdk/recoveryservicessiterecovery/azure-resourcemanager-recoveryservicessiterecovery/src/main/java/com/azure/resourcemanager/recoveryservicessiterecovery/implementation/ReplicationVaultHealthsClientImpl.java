// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.ReplicationVaultHealthsClient;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.models.VaultHealthDetailsInner;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in ReplicationVaultHealthsClient. */
public final class ReplicationVaultHealthsClientImpl implements ReplicationVaultHealthsClient {
    private final ClientLogger logger = new ClientLogger(ReplicationVaultHealthsClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final ReplicationVaultHealthsService service;

    /** The service client containing this operation class. */
    private final SiteRecoveryManagementClientImpl client;

    /**
     * Initializes an instance of ReplicationVaultHealthsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ReplicationVaultHealthsClientImpl(SiteRecoveryManagementClientImpl client) {
        this.service =
            RestProxy
                .create(ReplicationVaultHealthsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for SiteRecoveryManagementClientReplicationVaultHealths to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "SiteRecoveryManageme")
    private interface ReplicationVaultHealthsService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices"
                + "/vaults/{resourceName}/replicationVaultHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<VaultHealthDetailsInner>> get(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("resourceName") String resourceName,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices"
                + "/vaults/{resourceName}/replicationVaultHealth/default/refresh")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> refresh(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("resourceName") String resourceName,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets the health details of the vault.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the health details of the vault.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<VaultHealthDetailsInner>> getWithResponseAsync() {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getResourceName() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getResourceName() is required and cannot be null."));
        }
        if (this.client.getResourceGroupName() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getResourceGroupName() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getResourceName(),
                            this.client.getResourceGroupName(),
                            this.client.getSubscriptionId(),
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets the health details of the vault.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the health details of the vault.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<VaultHealthDetailsInner>> getWithResponseAsync(Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getResourceName() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getResourceName() is required and cannot be null."));
        }
        if (this.client.getResourceGroupName() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getResourceGroupName() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getResourceName(),
                this.client.getResourceGroupName(),
                this.client.getSubscriptionId(),
                accept,
                context);
    }

    /**
     * Gets the health details of the vault.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the health details of the vault.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<VaultHealthDetailsInner> getAsync() {
        return getWithResponseAsync()
            .flatMap(
                (Response<VaultHealthDetailsInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the health details of the vault.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the health details of the vault.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VaultHealthDetailsInner get() {
        return getAsync().block();
    }

    /**
     * Gets the health details of the vault.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the health details of the vault.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<VaultHealthDetailsInner> getWithResponse(Context context) {
        return getWithResponseAsync(context).block();
    }

    /**
     * Refreshes health summary of the vault.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vault health details definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> refreshWithResponseAsync() {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getResourceName() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getResourceName() is required and cannot be null."));
        }
        if (this.client.getResourceGroupName() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getResourceGroupName() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .refresh(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getResourceName(),
                            this.client.getResourceGroupName(),
                            this.client.getSubscriptionId(),
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Refreshes health summary of the vault.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vault health details definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> refreshWithResponseAsync(Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getResourceName() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getResourceName() is required and cannot be null."));
        }
        if (this.client.getResourceGroupName() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getResourceGroupName() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .refresh(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getResourceName(),
                this.client.getResourceGroupName(),
                this.client.getSubscriptionId(),
                accept,
                context);
    }

    /**
     * Refreshes health summary of the vault.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vault health details definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<VaultHealthDetailsInner>, VaultHealthDetailsInner> beginRefreshAsync() {
        Mono<Response<Flux<ByteBuffer>>> mono = refreshWithResponseAsync();
        return this
            .client
            .<VaultHealthDetailsInner, VaultHealthDetailsInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                VaultHealthDetailsInner.class,
                VaultHealthDetailsInner.class,
                Context.NONE);
    }

    /**
     * Refreshes health summary of the vault.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vault health details definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<VaultHealthDetailsInner>, VaultHealthDetailsInner> beginRefreshAsync(
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = refreshWithResponseAsync(context);
        return this
            .client
            .<VaultHealthDetailsInner, VaultHealthDetailsInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                VaultHealthDetailsInner.class,
                VaultHealthDetailsInner.class,
                context);
    }

    /**
     * Refreshes health summary of the vault.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vault health details definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<VaultHealthDetailsInner>, VaultHealthDetailsInner> beginRefresh() {
        return beginRefreshAsync().getSyncPoller();
    }

    /**
     * Refreshes health summary of the vault.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vault health details definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<VaultHealthDetailsInner>, VaultHealthDetailsInner> beginRefresh(Context context) {
        return beginRefreshAsync(context).getSyncPoller();
    }

    /**
     * Refreshes health summary of the vault.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vault health details definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<VaultHealthDetailsInner> refreshAsync() {
        return beginRefreshAsync().last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Refreshes health summary of the vault.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vault health details definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<VaultHealthDetailsInner> refreshAsync(Context context) {
        return beginRefreshAsync(context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Refreshes health summary of the vault.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vault health details definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VaultHealthDetailsInner refresh() {
        return refreshAsync().block();
    }

    /**
     * Refreshes health summary of the vault.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return vault health details definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VaultHealthDetailsInner refresh(Context context) {
        return refreshAsync(context).block();
    }
}
