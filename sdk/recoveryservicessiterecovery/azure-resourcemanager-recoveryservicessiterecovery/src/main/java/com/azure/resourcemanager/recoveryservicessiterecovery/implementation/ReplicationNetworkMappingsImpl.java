// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.ReplicationNetworkMappingsClient;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.models.NetworkMappingInner;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.NetworkMapping;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ReplicationNetworkMappings;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ReplicationNetworkMappingsImpl implements ReplicationNetworkMappings {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ReplicationNetworkMappingsImpl.class);

    private final ReplicationNetworkMappingsClient innerClient;

    private final SiteRecoveryManager serviceManager;

    public ReplicationNetworkMappingsImpl(
        ReplicationNetworkMappingsClient innerClient, SiteRecoveryManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<NetworkMapping> listByReplicationNetworks(String fabricName, String networkName) {
        PagedIterable<NetworkMappingInner> inner =
            this.serviceClient().listByReplicationNetworks(fabricName, networkName);
        return inner.mapPage(inner1 -> new NetworkMappingImpl(inner1, this.manager()));
    }

    public PagedIterable<NetworkMapping> listByReplicationNetworks(
        String fabricName, String networkName, Context context) {
        PagedIterable<NetworkMappingInner> inner =
            this.serviceClient().listByReplicationNetworks(fabricName, networkName, context);
        return inner.mapPage(inner1 -> new NetworkMappingImpl(inner1, this.manager()));
    }

    public NetworkMapping get(String fabricName, String networkName, String networkMappingName) {
        NetworkMappingInner inner = this.serviceClient().get(fabricName, networkName, networkMappingName);
        if (inner != null) {
            return new NetworkMappingImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<NetworkMapping> getWithResponse(
        String fabricName, String networkName, String networkMappingName, Context context) {
        Response<NetworkMappingInner> inner =
            this.serviceClient().getWithResponse(fabricName, networkName, networkMappingName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new NetworkMappingImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String fabricName, String networkName, String networkMappingName) {
        this.serviceClient().delete(fabricName, networkName, networkMappingName);
    }

    public void delete(String fabricName, String networkName, String networkMappingName, Context context) {
        this.serviceClient().delete(fabricName, networkName, networkMappingName, context);
    }

    public PagedIterable<NetworkMapping> list() {
        PagedIterable<NetworkMappingInner> inner = this.serviceClient().list();
        return inner.mapPage(inner1 -> new NetworkMappingImpl(inner1, this.manager()));
    }

    public PagedIterable<NetworkMapping> list(Context context) {
        PagedIterable<NetworkMappingInner> inner = this.serviceClient().list(context);
        return inner.mapPage(inner1 -> new NetworkMappingImpl(inner1, this.manager()));
    }

    public NetworkMapping getById(String id) {
        String fabricName = Utils.getValueFromIdByName(id, "replicationFabrics");
        if (fabricName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationFabrics'.", id)));
        }
        String networkName = Utils.getValueFromIdByName(id, "replicationNetworks");
        if (networkName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationNetworks'.", id)));
        }
        String networkMappingName = Utils.getValueFromIdByName(id, "replicationNetworkMappings");
        if (networkMappingName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationNetworkMappings'.",
                                id)));
        }
        return this.getWithResponse(fabricName, networkName, networkMappingName, Context.NONE).getValue();
    }

    public Response<NetworkMapping> getByIdWithResponse(String id, Context context) {
        String fabricName = Utils.getValueFromIdByName(id, "replicationFabrics");
        if (fabricName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationFabrics'.", id)));
        }
        String networkName = Utils.getValueFromIdByName(id, "replicationNetworks");
        if (networkName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationNetworks'.", id)));
        }
        String networkMappingName = Utils.getValueFromIdByName(id, "replicationNetworkMappings");
        if (networkMappingName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationNetworkMappings'.",
                                id)));
        }
        return this.getWithResponse(fabricName, networkName, networkMappingName, context);
    }

    public void deleteById(String id) {
        String fabricName = Utils.getValueFromIdByName(id, "replicationFabrics");
        if (fabricName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationFabrics'.", id)));
        }
        String networkName = Utils.getValueFromIdByName(id, "replicationNetworks");
        if (networkName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationNetworks'.", id)));
        }
        String networkMappingName = Utils.getValueFromIdByName(id, "replicationNetworkMappings");
        if (networkMappingName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationNetworkMappings'.",
                                id)));
        }
        this.delete(fabricName, networkName, networkMappingName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String fabricName = Utils.getValueFromIdByName(id, "replicationFabrics");
        if (fabricName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationFabrics'.", id)));
        }
        String networkName = Utils.getValueFromIdByName(id, "replicationNetworks");
        if (networkName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationNetworks'.", id)));
        }
        String networkMappingName = Utils.getValueFromIdByName(id, "replicationNetworkMappings");
        if (networkMappingName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationNetworkMappings'.",
                                id)));
        }
        this.delete(fabricName, networkName, networkMappingName, context);
    }

    private ReplicationNetworkMappingsClient serviceClient() {
        return this.innerClient;
    }

    private SiteRecoveryManager manager() {
        return this.serviceManager;
    }

    public NetworkMappingImpl define(String name) {
        return new NetworkMappingImpl(name, this.manager());
    }
}
