// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicessiterecovery.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.recoveryservicessiterecovery.SiteRecoveryManager;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.ReplicationRecoveryPlansClient;
import com.azure.resourcemanager.recoveryservicessiterecovery.fluent.models.RecoveryPlanInner;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RecoveryPlan;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RecoveryPlanPlannedFailoverInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RecoveryPlanTestFailoverCleanupInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RecoveryPlanTestFailoverInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.RecoveryPlanUnplannedFailoverInput;
import com.azure.resourcemanager.recoveryservicessiterecovery.models.ReplicationRecoveryPlans;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ReplicationRecoveryPlansImpl implements ReplicationRecoveryPlans {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ReplicationRecoveryPlansImpl.class);

    private final ReplicationRecoveryPlansClient innerClient;

    private final SiteRecoveryManager serviceManager;

    public ReplicationRecoveryPlansImpl(
        ReplicationRecoveryPlansClient innerClient, SiteRecoveryManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<RecoveryPlan> list() {
        PagedIterable<RecoveryPlanInner> inner = this.serviceClient().list();
        return inner.mapPage(inner1 -> new RecoveryPlanImpl(inner1, this.manager()));
    }

    public PagedIterable<RecoveryPlan> list(Context context) {
        PagedIterable<RecoveryPlanInner> inner = this.serviceClient().list(context);
        return inner.mapPage(inner1 -> new RecoveryPlanImpl(inner1, this.manager()));
    }

    public RecoveryPlan get(String recoveryPlanName) {
        RecoveryPlanInner inner = this.serviceClient().get(recoveryPlanName);
        if (inner != null) {
            return new RecoveryPlanImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<RecoveryPlan> getWithResponse(String recoveryPlanName, Context context) {
        Response<RecoveryPlanInner> inner = this.serviceClient().getWithResponse(recoveryPlanName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RecoveryPlanImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String recoveryPlanName) {
        this.serviceClient().delete(recoveryPlanName);
    }

    public void delete(String recoveryPlanName, Context context) {
        this.serviceClient().delete(recoveryPlanName, context);
    }

    public RecoveryPlan failoverCancel(String recoveryPlanName) {
        RecoveryPlanInner inner = this.serviceClient().failoverCancel(recoveryPlanName);
        if (inner != null) {
            return new RecoveryPlanImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public RecoveryPlan failoverCancel(String recoveryPlanName, Context context) {
        RecoveryPlanInner inner = this.serviceClient().failoverCancel(recoveryPlanName, context);
        if (inner != null) {
            return new RecoveryPlanImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public RecoveryPlan failoverCommit(String recoveryPlanName) {
        RecoveryPlanInner inner = this.serviceClient().failoverCommit(recoveryPlanName);
        if (inner != null) {
            return new RecoveryPlanImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public RecoveryPlan failoverCommit(String recoveryPlanName, Context context) {
        RecoveryPlanInner inner = this.serviceClient().failoverCommit(recoveryPlanName, context);
        if (inner != null) {
            return new RecoveryPlanImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public RecoveryPlan plannedFailover(String recoveryPlanName, RecoveryPlanPlannedFailoverInput input) {
        RecoveryPlanInner inner = this.serviceClient().plannedFailover(recoveryPlanName, input);
        if (inner != null) {
            return new RecoveryPlanImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public RecoveryPlan plannedFailover(
        String recoveryPlanName, RecoveryPlanPlannedFailoverInput input, Context context) {
        RecoveryPlanInner inner = this.serviceClient().plannedFailover(recoveryPlanName, input, context);
        if (inner != null) {
            return new RecoveryPlanImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public RecoveryPlan reprotect(String recoveryPlanName) {
        RecoveryPlanInner inner = this.serviceClient().reprotect(recoveryPlanName);
        if (inner != null) {
            return new RecoveryPlanImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public RecoveryPlan reprotect(String recoveryPlanName, Context context) {
        RecoveryPlanInner inner = this.serviceClient().reprotect(recoveryPlanName, context);
        if (inner != null) {
            return new RecoveryPlanImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public RecoveryPlan testFailover(String recoveryPlanName, RecoveryPlanTestFailoverInput input) {
        RecoveryPlanInner inner = this.serviceClient().testFailover(recoveryPlanName, input);
        if (inner != null) {
            return new RecoveryPlanImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public RecoveryPlan testFailover(String recoveryPlanName, RecoveryPlanTestFailoverInput input, Context context) {
        RecoveryPlanInner inner = this.serviceClient().testFailover(recoveryPlanName, input, context);
        if (inner != null) {
            return new RecoveryPlanImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public RecoveryPlan testFailoverCleanup(String recoveryPlanName, RecoveryPlanTestFailoverCleanupInput input) {
        RecoveryPlanInner inner = this.serviceClient().testFailoverCleanup(recoveryPlanName, input);
        if (inner != null) {
            return new RecoveryPlanImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public RecoveryPlan testFailoverCleanup(
        String recoveryPlanName, RecoveryPlanTestFailoverCleanupInput input, Context context) {
        RecoveryPlanInner inner = this.serviceClient().testFailoverCleanup(recoveryPlanName, input, context);
        if (inner != null) {
            return new RecoveryPlanImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public RecoveryPlan unplannedFailover(String recoveryPlanName, RecoveryPlanUnplannedFailoverInput input) {
        RecoveryPlanInner inner = this.serviceClient().unplannedFailover(recoveryPlanName, input);
        if (inner != null) {
            return new RecoveryPlanImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public RecoveryPlan unplannedFailover(
        String recoveryPlanName, RecoveryPlanUnplannedFailoverInput input, Context context) {
        RecoveryPlanInner inner = this.serviceClient().unplannedFailover(recoveryPlanName, input, context);
        if (inner != null) {
            return new RecoveryPlanImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public RecoveryPlan getById(String id) {
        String recoveryPlanName = Utils.getValueFromIdByName(id, "replicationRecoveryPlans");
        if (recoveryPlanName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationRecoveryPlans'.",
                                id)));
        }
        return this.getWithResponse(recoveryPlanName, Context.NONE).getValue();
    }

    public Response<RecoveryPlan> getByIdWithResponse(String id, Context context) {
        String recoveryPlanName = Utils.getValueFromIdByName(id, "replicationRecoveryPlans");
        if (recoveryPlanName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationRecoveryPlans'.",
                                id)));
        }
        return this.getWithResponse(recoveryPlanName, context);
    }

    public void deleteById(String id) {
        String recoveryPlanName = Utils.getValueFromIdByName(id, "replicationRecoveryPlans");
        if (recoveryPlanName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationRecoveryPlans'.",
                                id)));
        }
        this.delete(recoveryPlanName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String recoveryPlanName = Utils.getValueFromIdByName(id, "replicationRecoveryPlans");
        if (recoveryPlanName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationRecoveryPlans'.",
                                id)));
        }
        this.delete(recoveryPlanName, context);
    }

    private ReplicationRecoveryPlansClient serviceClient() {
        return this.innerClient;
    }

    private SiteRecoveryManager manager() {
        return this.serviceManager;
    }

    public RecoveryPlanImpl define(String name) {
        return new RecoveryPlanImpl(name, this.manager());
    }
}
