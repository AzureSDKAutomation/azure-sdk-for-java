/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2019_10_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.billing.v2019_10_01_preview.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import org.joda.time.DateTime;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in BillingActivityLists.
 */
public class BillingActivityListsInner {
    /** The Retrofit service to perform REST calls. */
    private BillingActivityListsService service;
    /** The service client containing this operation class. */
    private BillingManagementClientImpl client;

    /**
     * Initializes an instance of BillingActivityListsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public BillingActivityListsInner(Retrofit retrofit, BillingManagementClientImpl client) {
        this.service = retrofit.create(BillingActivityListsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for BillingActivityLists to be
     * used by Retrofit to perform actually REST calls.
     */
    interface BillingActivityListsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.BillingActivityLists get" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingActivityList")
        Observable<Response<ResponseBody>> get(@Path("billingAccountName") String billingAccountName, @Query("api-version") String apiVersion, @Query("$startDate") DateTime startDate, @Query("$endDate") DateTime endDate, @Query("activityLogEventCategory") String activityLogEventCategory, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.BillingActivityLists getNext" })
        @GET
        Observable<Response<ResponseBody>> getNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets billing activity logs for a billing account.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;BillingActivityInner&gt; object if successful.
     */
    public PagedList<BillingActivityInner> get(final String billingAccountName) {
        ServiceResponse<Page<BillingActivityInner>> response = getSinglePageAsync(billingAccountName).toBlocking().single();
        return new PagedList<BillingActivityInner>(response.body()) {
            @Override
            public Page<BillingActivityInner> nextPage(String nextPageLink) {
                return getNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets billing activity logs for a billing account.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BillingActivityInner>> getAsync(final String billingAccountName, final ListOperationCallback<BillingActivityInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            getSinglePageAsync(billingAccountName),
            new Func1<String, Observable<ServiceResponse<Page<BillingActivityInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingActivityInner>>> call(String nextPageLink) {
                    return getNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets billing activity logs for a billing account.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingActivityInner&gt; object
     */
    public Observable<Page<BillingActivityInner>> getAsync(final String billingAccountName) {
        return getWithServiceResponseAsync(billingAccountName)
            .map(new Func1<ServiceResponse<Page<BillingActivityInner>>, Page<BillingActivityInner>>() {
                @Override
                public Page<BillingActivityInner> call(ServiceResponse<Page<BillingActivityInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets billing activity logs for a billing account.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingActivityInner&gt; object
     */
    public Observable<ServiceResponse<Page<BillingActivityInner>>> getWithServiceResponseAsync(final String billingAccountName) {
        return getSinglePageAsync(billingAccountName)
            .concatMap(new Func1<ServiceResponse<Page<BillingActivityInner>>, Observable<ServiceResponse<Page<BillingActivityInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingActivityInner>>> call(ServiceResponse<Page<BillingActivityInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets billing activity logs for a billing account.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;BillingActivityInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<BillingActivityInner>>> getSinglePageAsync(final String billingAccountName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final DateTime startDate = null;
        final DateTime endDate = null;
        final String activityLogEventCategory = null;
        return service.get(billingAccountName, this.client.apiVersion(), startDate, endDate, activityLogEventCategory, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<BillingActivityInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingActivityInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<BillingActivityInner>> result = getDelegate(response);
                        return Observable.just(new ServiceResponse<Page<BillingActivityInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets billing activity logs for a billing account.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param startDate Start datetime from which activity logs are requested. The date should be specified in MM-DD-YYYY format.
     * @param endDate Start datetime till which activity logs are requested. The date should be specified in MM-DD-YYYY format.
     * @param activityLogEventCategory Operation type based on which activity logs will be filtered.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;BillingActivityInner&gt; object if successful.
     */
    public PagedList<BillingActivityInner> get(final String billingAccountName, final DateTime startDate, final DateTime endDate, final String activityLogEventCategory) {
        ServiceResponse<Page<BillingActivityInner>> response = getSinglePageAsync(billingAccountName, startDate, endDate, activityLogEventCategory).toBlocking().single();
        return new PagedList<BillingActivityInner>(response.body()) {
            @Override
            public Page<BillingActivityInner> nextPage(String nextPageLink) {
                return getNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets billing activity logs for a billing account.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param startDate Start datetime from which activity logs are requested. The date should be specified in MM-DD-YYYY format.
     * @param endDate Start datetime till which activity logs are requested. The date should be specified in MM-DD-YYYY format.
     * @param activityLogEventCategory Operation type based on which activity logs will be filtered.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BillingActivityInner>> getAsync(final String billingAccountName, final DateTime startDate, final DateTime endDate, final String activityLogEventCategory, final ListOperationCallback<BillingActivityInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            getSinglePageAsync(billingAccountName, startDate, endDate, activityLogEventCategory),
            new Func1<String, Observable<ServiceResponse<Page<BillingActivityInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingActivityInner>>> call(String nextPageLink) {
                    return getNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets billing activity logs for a billing account.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param startDate Start datetime from which activity logs are requested. The date should be specified in MM-DD-YYYY format.
     * @param endDate Start datetime till which activity logs are requested. The date should be specified in MM-DD-YYYY format.
     * @param activityLogEventCategory Operation type based on which activity logs will be filtered.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingActivityInner&gt; object
     */
    public Observable<Page<BillingActivityInner>> getAsync(final String billingAccountName, final DateTime startDate, final DateTime endDate, final String activityLogEventCategory) {
        return getWithServiceResponseAsync(billingAccountName, startDate, endDate, activityLogEventCategory)
            .map(new Func1<ServiceResponse<Page<BillingActivityInner>>, Page<BillingActivityInner>>() {
                @Override
                public Page<BillingActivityInner> call(ServiceResponse<Page<BillingActivityInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets billing activity logs for a billing account.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param startDate Start datetime from which activity logs are requested. The date should be specified in MM-DD-YYYY format.
     * @param endDate Start datetime till which activity logs are requested. The date should be specified in MM-DD-YYYY format.
     * @param activityLogEventCategory Operation type based on which activity logs will be filtered.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingActivityInner&gt; object
     */
    public Observable<ServiceResponse<Page<BillingActivityInner>>> getWithServiceResponseAsync(final String billingAccountName, final DateTime startDate, final DateTime endDate, final String activityLogEventCategory) {
        return getSinglePageAsync(billingAccountName, startDate, endDate, activityLogEventCategory)
            .concatMap(new Func1<ServiceResponse<Page<BillingActivityInner>>, Observable<ServiceResponse<Page<BillingActivityInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingActivityInner>>> call(ServiceResponse<Page<BillingActivityInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets billing activity logs for a billing account.
     *
    ServiceResponse<PageImpl<BillingActivityInner>> * @param billingAccountName The ID that uniquely identifies a billing account.
    ServiceResponse<PageImpl<BillingActivityInner>> * @param startDate Start datetime from which activity logs are requested. The date should be specified in MM-DD-YYYY format.
    ServiceResponse<PageImpl<BillingActivityInner>> * @param endDate Start datetime till which activity logs are requested. The date should be specified in MM-DD-YYYY format.
    ServiceResponse<PageImpl<BillingActivityInner>> * @param activityLogEventCategory Operation type based on which activity logs will be filtered.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;BillingActivityInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<BillingActivityInner>>> getSinglePageAsync(final String billingAccountName, final DateTime startDate, final DateTime endDate, final String activityLogEventCategory) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(billingAccountName, this.client.apiVersion(), startDate, endDate, activityLogEventCategory, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<BillingActivityInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingActivityInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<BillingActivityInner>> result = getDelegate(response);
                        return Observable.just(new ServiceResponse<Page<BillingActivityInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<BillingActivityInner>> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<BillingActivityInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<BillingActivityInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets billing activity logs for a billing account.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;BillingActivityInner&gt; object if successful.
     */
    public PagedList<BillingActivityInner> getNext(final String nextPageLink) {
        ServiceResponse<Page<BillingActivityInner>> response = getNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<BillingActivityInner>(response.body()) {
            @Override
            public Page<BillingActivityInner> nextPage(String nextPageLink) {
                return getNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets billing activity logs for a billing account.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BillingActivityInner>> getNextAsync(final String nextPageLink, final ServiceFuture<List<BillingActivityInner>> serviceFuture, final ListOperationCallback<BillingActivityInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            getNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<BillingActivityInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingActivityInner>>> call(String nextPageLink) {
                    return getNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets billing activity logs for a billing account.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingActivityInner&gt; object
     */
    public Observable<Page<BillingActivityInner>> getNextAsync(final String nextPageLink) {
        return getNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<BillingActivityInner>>, Page<BillingActivityInner>>() {
                @Override
                public Page<BillingActivityInner> call(ServiceResponse<Page<BillingActivityInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets billing activity logs for a billing account.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingActivityInner&gt; object
     */
    public Observable<ServiceResponse<Page<BillingActivityInner>>> getNextWithServiceResponseAsync(final String nextPageLink) {
        return getNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<BillingActivityInner>>, Observable<ServiceResponse<Page<BillingActivityInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingActivityInner>>> call(ServiceResponse<Page<BillingActivityInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets billing activity logs for a billing account.
     *
    ServiceResponse<PageImpl<BillingActivityInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;BillingActivityInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<BillingActivityInner>>> getNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.getNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<BillingActivityInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingActivityInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<BillingActivityInner>> result = getNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<BillingActivityInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<BillingActivityInner>> getNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<BillingActivityInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<BillingActivityInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
