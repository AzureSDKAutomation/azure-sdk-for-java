/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.billing.v2019_10_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.billing.v2019_10_01_preview.BillingAccountInvoices;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.billing.v2019_10_01_preview.BillingAccountInvoice;

class BillingAccountInvoicesImpl extends WrapperImpl<BillingAccountInvoicesInner> implements BillingAccountInvoices {
    private final BillingManager manager;

    BillingAccountInvoicesImpl(BillingManager manager) {
        super(manager.inner().billingAccountInvoices());
        this.manager = manager;
    }

    public BillingManager manager() {
        return this.manager;
    }

    private BillingAccountInvoiceImpl wrapModel(InvoiceInner inner) {
        return  new BillingAccountInvoiceImpl(inner, manager());
    }

    @Override
    public Observable<BillingAccountInvoice> getAsync(String billingAccountName, String invoiceName) {
        BillingAccountInvoicesInner client = this.inner();
        return client.getAsync(billingAccountName, invoiceName)
        .flatMap(new Func1<InvoiceInner, Observable<BillingAccountInvoice>>() {
            @Override
            public Observable<BillingAccountInvoice> call(InvoiceInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((BillingAccountInvoice)wrapModel(inner));
                }
            }
       });
    }

}
