/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2019_10_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.billing.v2019_10_01_preview.EaInvoicesDownloadHeaders;
import com.microsoft.azure.management.billing.v2019_10_01_preview.ErrorResponseException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponseWithHeaders;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.LongRunningFinalState;
import com.microsoft.azure.LongRunningOperationOptions;

/**
 * An instance of this class provides access to all the operations defined
 * in EaInvoices.
 */
public class EaInvoicesInner {
    /** The Retrofit service to perform REST calls. */
    private EaInvoicesService service;
    /** The service client containing this operation class. */
    private BillingManagementClientImpl client;

    /**
     * Initializes an instance of EaInvoicesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public EaInvoicesInner(Retrofit retrofit, BillingManagementClientImpl client) {
        this.service = retrofit.create(EaInvoicesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for EaInvoices to be
     * used by Retrofit to perform actually REST calls.
     */
    interface EaInvoicesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.EaInvoices download" })
        @POST("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/{invoiceName}/download")
        Observable<Response<ResponseBody>> download(@Path("billingAccountName") String billingAccountName, @Path("invoiceName") String invoiceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.EaInvoices beginDownload" })
        @POST("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/{invoiceName}/download")
        Observable<Response<ResponseBody>> beginDownload(@Path("billingAccountName") String billingAccountName, @Path("invoiceName") String invoiceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets a URL to download an invoice. The operation is supported for Enterprise Agreement enrollment billing accounts.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DownloadUrlInner object if successful.
     */
    public DownloadUrlInner download(String billingAccountName, String invoiceName) {
        return downloadWithServiceResponseAsync(billingAccountName, invoiceName).toBlocking().last().body();
    }

    /**
     * Gets a URL to download an invoice. The operation is supported for Enterprise Agreement enrollment billing accounts.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DownloadUrlInner> downloadAsync(String billingAccountName, String invoiceName, final ServiceCallback<DownloadUrlInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(downloadWithServiceResponseAsync(billingAccountName, invoiceName), serviceCallback);
    }

    /**
     * Gets a URL to download an invoice. The operation is supported for Enterprise Agreement enrollment billing accounts.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<DownloadUrlInner> downloadAsync(String billingAccountName, String invoiceName) {
        return downloadWithServiceResponseAsync(billingAccountName, invoiceName).map(new Func1<ServiceResponseWithHeaders<DownloadUrlInner, EaInvoicesDownloadHeaders>, DownloadUrlInner>() {
            @Override
            public DownloadUrlInner call(ServiceResponseWithHeaders<DownloadUrlInner, EaInvoicesDownloadHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a URL to download an invoice. The operation is supported for Enterprise Agreement enrollment billing accounts.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponseWithHeaders<DownloadUrlInner, EaInvoicesDownloadHeaders>> downloadWithServiceResponseAsync(String billingAccountName, String invoiceName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (invoiceName == null) {
            throw new IllegalArgumentException("Parameter invoiceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.download(billingAccountName, invoiceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultWithHeadersAsync(observable, new LongRunningOperationOptions().withFinalStateVia(LongRunningFinalState.LOCATION), new TypeToken<DownloadUrlInner>() { }.getType(), EaInvoicesDownloadHeaders.class);
    }

    /**
     * Gets a URL to download an invoice. The operation is supported for Enterprise Agreement enrollment billing accounts.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DownloadUrlInner object if successful.
     */
    public DownloadUrlInner beginDownload(String billingAccountName, String invoiceName) {
        return beginDownloadWithServiceResponseAsync(billingAccountName, invoiceName).toBlocking().single().body();
    }

    /**
     * Gets a URL to download an invoice. The operation is supported for Enterprise Agreement enrollment billing accounts.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DownloadUrlInner> beginDownloadAsync(String billingAccountName, String invoiceName, final ServiceCallback<DownloadUrlInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(beginDownloadWithServiceResponseAsync(billingAccountName, invoiceName), serviceCallback);
    }

    /**
     * Gets a URL to download an invoice. The operation is supported for Enterprise Agreement enrollment billing accounts.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DownloadUrlInner object
     */
    public Observable<DownloadUrlInner> beginDownloadAsync(String billingAccountName, String invoiceName) {
        return beginDownloadWithServiceResponseAsync(billingAccountName, invoiceName).map(new Func1<ServiceResponseWithHeaders<DownloadUrlInner, EaInvoicesDownloadHeaders>, DownloadUrlInner>() {
            @Override
            public DownloadUrlInner call(ServiceResponseWithHeaders<DownloadUrlInner, EaInvoicesDownloadHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a URL to download an invoice. The operation is supported for Enterprise Agreement enrollment billing accounts.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DownloadUrlInner object
     */
    public Observable<ServiceResponseWithHeaders<DownloadUrlInner, EaInvoicesDownloadHeaders>> beginDownloadWithServiceResponseAsync(String billingAccountName, String invoiceName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (invoiceName == null) {
            throw new IllegalArgumentException("Parameter invoiceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDownload(billingAccountName, invoiceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<DownloadUrlInner, EaInvoicesDownloadHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<DownloadUrlInner, EaInvoicesDownloadHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<DownloadUrlInner, EaInvoicesDownloadHeaders> clientResponse = beginDownloadDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<DownloadUrlInner, EaInvoicesDownloadHeaders> beginDownloadDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DownloadUrlInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DownloadUrlInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildWithHeaders(response, EaInvoicesDownloadHeaders.class);
    }

}
