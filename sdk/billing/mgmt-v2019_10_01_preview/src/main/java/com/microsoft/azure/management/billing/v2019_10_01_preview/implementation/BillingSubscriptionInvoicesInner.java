/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2019_10_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.billing.v2019_10_01_preview.BillingSubscriptionInvoicesDownloadHeaders;
import com.microsoft.azure.management.billing.v2019_10_01_preview.ErrorResponseException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseWithHeaders;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.LongRunningFinalState;
import com.microsoft.azure.LongRunningOperationOptions;

/**
 * An instance of this class provides access to all the operations defined
 * in BillingSubscriptionInvoices.
 */
public class BillingSubscriptionInvoicesInner {
    /** The Retrofit service to perform REST calls. */
    private BillingSubscriptionInvoicesService service;
    /** The service client containing this operation class. */
    private BillingManagementClientImpl client;

    /**
     * Initializes an instance of BillingSubscriptionInvoicesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public BillingSubscriptionInvoicesInner(Retrofit retrofit, BillingManagementClientImpl client) {
        this.service = retrofit.create(BillingSubscriptionInvoicesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for BillingSubscriptionInvoices to be
     * used by Retrofit to perform actually REST calls.
     */
    interface BillingSubscriptionInvoicesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.BillingSubscriptionInvoices getById" })
        @GET("providers/Microsoft.Billing/billingAccounts/default/billingSubscriptions/{billingSubscriptionName}/invoices/{invoiceName}")
        Observable<Response<ResponseBody>> getById(@Path("billingSubscriptionName") String billingSubscriptionName, @Path("invoiceName") String invoiceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.BillingSubscriptionInvoices download" })
        @POST("providers/Microsoft.Billing/billingAccounts/default/billingSubscriptions/{billingSubscriptionName}/invoices/{invoiceName}/download")
        Observable<Response<ResponseBody>> download(@Path("billingSubscriptionName") String billingSubscriptionName, @Path("invoiceName") String invoiceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.BillingSubscriptionInvoices beginDownload" })
        @POST("providers/Microsoft.Billing/billingAccounts/default/billingSubscriptions/{billingSubscriptionName}/invoices/{invoiceName}/download")
        Observable<Response<ResponseBody>> beginDownload(@Path("billingSubscriptionName") String billingSubscriptionName, @Path("invoiceName") String invoiceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets an invoice by ID.
     *
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the InvoiceInner object if successful.
     */
    public InvoiceInner getById(String billingSubscriptionName, String invoiceName) {
        return getByIdWithServiceResponseAsync(billingSubscriptionName, invoiceName).toBlocking().single().body();
    }

    /**
     * Gets an invoice by ID.
     *
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<InvoiceInner> getByIdAsync(String billingSubscriptionName, String invoiceName, final ServiceCallback<InvoiceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByIdWithServiceResponseAsync(billingSubscriptionName, invoiceName), serviceCallback);
    }

    /**
     * Gets an invoice by ID.
     *
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InvoiceInner object
     */
    public Observable<InvoiceInner> getByIdAsync(String billingSubscriptionName, String invoiceName) {
        return getByIdWithServiceResponseAsync(billingSubscriptionName, invoiceName).map(new Func1<ServiceResponse<InvoiceInner>, InvoiceInner>() {
            @Override
            public InvoiceInner call(ServiceResponse<InvoiceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets an invoice by ID.
     *
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InvoiceInner object
     */
    public Observable<ServiceResponse<InvoiceInner>> getByIdWithServiceResponseAsync(String billingSubscriptionName, String invoiceName) {
        if (billingSubscriptionName == null) {
            throw new IllegalArgumentException("Parameter billingSubscriptionName is required and cannot be null.");
        }
        if (invoiceName == null) {
            throw new IllegalArgumentException("Parameter invoiceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getById(billingSubscriptionName, invoiceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<InvoiceInner>>>() {
                @Override
                public Observable<ServiceResponse<InvoiceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<InvoiceInner> clientResponse = getByIdDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<InvoiceInner> getByIdDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<InvoiceInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<InvoiceInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets a URL to download an invoice.
     *
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DownloadUrlInner object if successful.
     */
    public DownloadUrlInner download(String billingSubscriptionName, String invoiceName) {
        return downloadWithServiceResponseAsync(billingSubscriptionName, invoiceName).toBlocking().last().body();
    }

    /**
     * Gets a URL to download an invoice.
     *
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DownloadUrlInner> downloadAsync(String billingSubscriptionName, String invoiceName, final ServiceCallback<DownloadUrlInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(downloadWithServiceResponseAsync(billingSubscriptionName, invoiceName), serviceCallback);
    }

    /**
     * Gets a URL to download an invoice.
     *
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<DownloadUrlInner> downloadAsync(String billingSubscriptionName, String invoiceName) {
        return downloadWithServiceResponseAsync(billingSubscriptionName, invoiceName).map(new Func1<ServiceResponseWithHeaders<DownloadUrlInner, BillingSubscriptionInvoicesDownloadHeaders>, DownloadUrlInner>() {
            @Override
            public DownloadUrlInner call(ServiceResponseWithHeaders<DownloadUrlInner, BillingSubscriptionInvoicesDownloadHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a URL to download an invoice.
     *
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponseWithHeaders<DownloadUrlInner, BillingSubscriptionInvoicesDownloadHeaders>> downloadWithServiceResponseAsync(String billingSubscriptionName, String invoiceName) {
        if (billingSubscriptionName == null) {
            throw new IllegalArgumentException("Parameter billingSubscriptionName is required and cannot be null.");
        }
        if (invoiceName == null) {
            throw new IllegalArgumentException("Parameter invoiceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.download(billingSubscriptionName, invoiceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultWithHeadersAsync(observable, new LongRunningOperationOptions().withFinalStateVia(LongRunningFinalState.LOCATION), new TypeToken<DownloadUrlInner>() { }.getType(), BillingSubscriptionInvoicesDownloadHeaders.class);
    }

    /**
     * Gets a URL to download an invoice.
     *
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DownloadUrlInner object if successful.
     */
    public DownloadUrlInner beginDownload(String billingSubscriptionName, String invoiceName) {
        return beginDownloadWithServiceResponseAsync(billingSubscriptionName, invoiceName).toBlocking().single().body();
    }

    /**
     * Gets a URL to download an invoice.
     *
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DownloadUrlInner> beginDownloadAsync(String billingSubscriptionName, String invoiceName, final ServiceCallback<DownloadUrlInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(beginDownloadWithServiceResponseAsync(billingSubscriptionName, invoiceName), serviceCallback);
    }

    /**
     * Gets a URL to download an invoice.
     *
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DownloadUrlInner object
     */
    public Observable<DownloadUrlInner> beginDownloadAsync(String billingSubscriptionName, String invoiceName) {
        return beginDownloadWithServiceResponseAsync(billingSubscriptionName, invoiceName).map(new Func1<ServiceResponseWithHeaders<DownloadUrlInner, BillingSubscriptionInvoicesDownloadHeaders>, DownloadUrlInner>() {
            @Override
            public DownloadUrlInner call(ServiceResponseWithHeaders<DownloadUrlInner, BillingSubscriptionInvoicesDownloadHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a URL to download an invoice.
     *
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DownloadUrlInner object
     */
    public Observable<ServiceResponseWithHeaders<DownloadUrlInner, BillingSubscriptionInvoicesDownloadHeaders>> beginDownloadWithServiceResponseAsync(String billingSubscriptionName, String invoiceName) {
        if (billingSubscriptionName == null) {
            throw new IllegalArgumentException("Parameter billingSubscriptionName is required and cannot be null.");
        }
        if (invoiceName == null) {
            throw new IllegalArgumentException("Parameter invoiceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDownload(billingSubscriptionName, invoiceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<DownloadUrlInner, BillingSubscriptionInvoicesDownloadHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<DownloadUrlInner, BillingSubscriptionInvoicesDownloadHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<DownloadUrlInner, BillingSubscriptionInvoicesDownloadHeaders> clientResponse = beginDownloadDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<DownloadUrlInner, BillingSubscriptionInvoicesDownloadHeaders> beginDownloadDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DownloadUrlInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DownloadUrlInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildWithHeaders(response, BillingSubscriptionInvoicesDownloadHeaders.class);
    }

}
