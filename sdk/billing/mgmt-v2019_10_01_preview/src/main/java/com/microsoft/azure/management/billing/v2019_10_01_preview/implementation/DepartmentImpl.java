/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2019_10_01_preview.implementation;

import com.microsoft.azure.management.billing.v2019_10_01_preview.Department;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import java.util.List;
import java.util.ArrayList;
import com.microsoft.azure.management.billing.v2019_10_01_preview.EnrollmentAccount;

class DepartmentImpl extends CreatableUpdatableImpl<Department, DepartmentInner, DepartmentImpl> implements Department, Department.Definition, Department.Update {
    private final BillingManager manager;
    private String billingAccountName;
    private String departmentName;

    DepartmentImpl(String name, BillingManager manager) {
        super(name, new DepartmentInner());
        this.manager = manager;
        // Set resource name
        this.departmentName = name;
        //
    }

    DepartmentImpl(DepartmentInner inner, BillingManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.departmentName = inner.name();
        // set resource ancestor and positional variables
        this.billingAccountName = IdParsingUtils.getValueFromIdByName(inner.id(), "billingAccounts");
        this.departmentName = IdParsingUtils.getValueFromIdByName(inner.id(), "departments");
        //
    }

    @Override
    public BillingManager manager() {
        return this.manager;
    }

    @Override
    public Observable<Department> createResourceAsync() {
        DepartmentsInner client = this.manager().inner().departments();
        return client.putAsync(this.billingAccountName, this.departmentName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<Department> updateResourceAsync() {
        DepartmentsInner client = this.manager().inner().departments();
        return client.putAsync(this.billingAccountName, this.departmentName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<DepartmentInner> getInnerAsync() {
        DepartmentsInner client = this.manager().inner().departments();
        return client.getAsync(this.billingAccountName, this.departmentName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String costCenter() {
        return this.inner().costCenter();
    }

    @Override
    public String departmentName() {
        return this.inner().departmentName();
    }

    @Override
    public List<EnrollmentAccount> enrollmentAccounts() {
        List<EnrollmentAccount> lst = new ArrayList<EnrollmentAccount>();
        if (this.inner().enrollmentAccounts() != null) {
            for (EnrollmentAccountInner inner : this.inner().enrollmentAccounts()) {
                lst.add( new EnrollmentAccountImpl(inner, manager()));
            }
        }
        return lst;
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String status() {
        return this.inner().status();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public DepartmentImpl withExistingBillingAccount(String billingAccountName) {
        this.billingAccountName = billingAccountName;
        return this;
    }

    @Override
    public DepartmentImpl withCostCenter(String costCenter) {
        this.inner().withCostCenter(costCenter);
        return this;
    }

    @Override
    public DepartmentImpl withDepartmentName(String departmentName) {
        this.inner().withDepartmentName(departmentName);
        return this;
    }

    @Override
    public DepartmentImpl withEnrollmentAccounts(List<EnrollmentAccountInner> enrollmentAccounts) {
        this.inner().withEnrollmentAccounts(enrollmentAccounts);
        return this;
    }

    @Override
    public DepartmentImpl withStatus(String status) {
        this.inner().withStatus(status);
        return this;
    }

}
