/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2019_10_01_preview.implementation;

import com.microsoft.azure.management.billing.v2019_10_01_preview.EnrollmentAccount;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.billing.v2019_10_01_preview.UpdateEnrollmentAccount;
import com.microsoft.azure.management.billing.v2019_10_01_preview.Department;
import org.joda.time.DateTime;
import rx.functions.Func1;

class EnrollmentAccountImpl extends CreatableUpdatableImpl<EnrollmentAccount, EnrollmentAccountInner, EnrollmentAccountImpl> implements EnrollmentAccount, EnrollmentAccount.Update {
    private final BillingManager manager;
    private String billingAccountName;
    private String enrollmentAccountName;
    private UpdateEnrollmentAccount updateParameter;

    EnrollmentAccountImpl(String name, BillingManager manager) {
        super(name, new EnrollmentAccountInner());
        this.manager = manager;
        // Set resource name
        this.enrollmentAccountName = name;
        //
        this.updateParameter = new UpdateEnrollmentAccount();
    }

    EnrollmentAccountImpl(EnrollmentAccountInner inner, BillingManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.enrollmentAccountName = inner.name();
        // set resource ancestor and positional variables
        this.billingAccountName = IdParsingUtils.getValueFromIdByName(inner.id(), "billingAccounts");
        this.enrollmentAccountName = IdParsingUtils.getValueFromIdByName(inner.id(), "enrollmentAccounts");
        //
        this.updateParameter = new UpdateEnrollmentAccount();
    }

    @Override
    public BillingManager manager() {
        return this.manager;
    }

    @Override
    public Observable<EnrollmentAccount> createResourceAsync() {
        EnrollmentAccountsInner client = this.manager().inner().enrollmentAccounts();
        return null; // NOP createResourceAsync implementation as create is not supported
    }

    @Override
    public Observable<EnrollmentAccount> updateResourceAsync() {
        EnrollmentAccountsInner client = this.manager().inner().enrollmentAccounts();
        return client.updateAsync(this.billingAccountName, this.enrollmentAccountName, this.updateParameter)
            .map(new Func1<EnrollmentAccountInner, EnrollmentAccountInner>() {
               @Override
               public EnrollmentAccountInner call(EnrollmentAccountInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<EnrollmentAccountInner> getInnerAsync() {
        EnrollmentAccountsInner client = this.manager().inner().enrollmentAccounts();
        return client.getByEnrollmentAccountIdAsync(this.billingAccountName, this.enrollmentAccountName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.updateParameter = new UpdateEnrollmentAccount();
    }

    @Override
    public String accountName() {
        return this.inner().accountName();
    }

    @Override
    public String accountOwner() {
        return this.inner().accountOwner();
    }

    @Override
    public String costCenter() {
        return this.inner().costCenter();
    }

    @Override
    public Department department() {
        DepartmentInner inner = this.inner().department();
        if (inner != null) {
            return  new DepartmentImpl(inner, manager());
        } else {
            return null;
        }
    }

    @Override
    public Boolean devTest() {
        return this.inner().devTest();
    }

    @Override
    public DateTime endDate() {
        return this.inner().endDate();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public DateTime startDate() {
        return this.inner().startDate();
    }

    @Override
    public String status() {
        return this.inner().status();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public EnrollmentAccountImpl withAccountName(String accountName) {
        this.updateParameter.withAccountName(accountName);
        return this;
    }

    @Override
    public EnrollmentAccountImpl withCostCenter(String costCenter) {
        this.updateParameter.withCostCenter(costCenter);
        return this;
    }

    @Override
    public EnrollmentAccountImpl withDepartmentName(String departmentName) {
        this.updateParameter.withDepartmentName(departmentName);
        return this;
    }

    @Override
    public EnrollmentAccountImpl withDevTest(Boolean devTest) {
        this.updateParameter.withDevTest(devTest);
        return this;
    }

}
