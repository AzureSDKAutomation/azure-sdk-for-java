/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.billing.v2020_05_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.billing.v2020_05_01.PartnerTransfers;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.billing.v2020_05_01.PartnerTransferDetails;
import com.microsoft.azure.management.billing.v2020_05_01.InitiateTransferRequest;

class PartnerTransfersImpl extends WrapperImpl<PartnerTransfersInner> implements PartnerTransfers {
    private final BillingManager manager;

    PartnerTransfersImpl(BillingManager manager) {
        super(manager.inner().partnerTransfers());
        this.manager = manager;
    }

    public BillingManager manager() {
        return this.manager;
    }

    private PartnerTransferDetailsImpl wrapModel(PartnerTransferDetailsInner inner) {
        return  new PartnerTransferDetailsImpl(inner, manager());
    }

    @Override
    public Observable<PartnerTransferDetails> cancelAsync(String billingAccountName, String customerName, String transferName) {
        PartnerTransfersInner client = this.inner();
        return client.cancelAsync(billingAccountName, customerName, transferName)
        .map(new Func1<PartnerTransferDetailsInner, PartnerTransferDetails>() {
            @Override
            public PartnerTransferDetails call(PartnerTransferDetailsInner inner) {
                return new PartnerTransferDetailsImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<PartnerTransferDetails> listAsync(final String billingAccountName, final String customerName) {
        PartnerTransfersInner client = this.inner();
        return client.listAsync(billingAccountName, customerName)
        .flatMapIterable(new Func1<Page<PartnerTransferDetailsInner>, Iterable<PartnerTransferDetailsInner>>() {
            @Override
            public Iterable<PartnerTransferDetailsInner> call(Page<PartnerTransferDetailsInner> page) {
                return page.items();
            }
        })
        .map(new Func1<PartnerTransferDetailsInner, PartnerTransferDetails>() {
            @Override
            public PartnerTransferDetails call(PartnerTransferDetailsInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<PartnerTransferDetails> getAsync(String billingAccountName, String customerName, String transferName) {
        PartnerTransfersInner client = this.inner();
        return client.getAsync(billingAccountName, customerName, transferName)
        .flatMap(new Func1<PartnerTransferDetailsInner, Observable<PartnerTransferDetails>>() {
            @Override
            public Observable<PartnerTransferDetails> call(PartnerTransferDetailsInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((PartnerTransferDetails)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Observable<PartnerTransferDetails> initiateAsync(String billingAccountName, String customerName, InitiateTransferRequest parameters) {
        PartnerTransfersInner client = this.inner();
        return client.initiateAsync(billingAccountName, customerName, parameters)
        .map(new Func1<PartnerTransferDetailsInner, PartnerTransferDetails>() {
            @Override
            public PartnerTransferDetails call(PartnerTransferDetailsInner inner) {
                return new PartnerTransferDetailsImpl(inner, manager());
            }
        });
    }

}
