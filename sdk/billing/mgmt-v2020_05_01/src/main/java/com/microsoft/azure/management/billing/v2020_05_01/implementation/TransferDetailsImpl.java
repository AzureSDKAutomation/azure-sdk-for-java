/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2020_05_01.implementation;

import com.microsoft.azure.management.billing.v2020_05_01.TransferDetails;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.billing.v2020_05_01.InitiateTransferRequest;
import org.joda.time.DateTime;
import java.util.List;
import com.microsoft.azure.management.billing.v2020_05_01.DetailedTransferStatus;
import com.microsoft.azure.management.billing.v2020_05_01.TransferStatus;
import rx.functions.Func1;

class TransferDetailsImpl extends CreatableUpdatableImpl<TransferDetails, TransferDetailsInner, TransferDetailsImpl> implements TransferDetails, TransferDetails.Definition, TransferDetails.Update {
    private final BillingManager manager;
    private String billingAccountName;
    private String billingProfileName;
    private String invoiceSectionName;
    private String transferName;
    private InitiateTransferRequest createOrUpdateParameter;

    TransferDetailsImpl(String name, BillingManager manager) {
        super(name, new TransferDetailsInner());
        this.manager = manager;
        // Set resource name
        this.transferName = name;
        //
        this.createOrUpdateParameter = new InitiateTransferRequest();
    }

    TransferDetailsImpl(TransferDetailsInner inner, BillingManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.transferName = inner.name();
        // set resource ancestor and positional variables
        this.billingAccountName = IdParsingUtils.getValueFromIdByName(inner.id(), "billingAccounts");
        this.billingProfileName = IdParsingUtils.getValueFromIdByName(inner.id(), "billingProfiles");
        this.invoiceSectionName = IdParsingUtils.getValueFromIdByName(inner.id(), "invoiceSections");
        this.transferName = IdParsingUtils.getValueFromIdByName(inner.id(), "transfers");
        //
        this.createOrUpdateParameter = new InitiateTransferRequest();
    }

    @Override
    public BillingManager manager() {
        return this.manager;
    }

    @Override
    public Observable<TransferDetails> createResourceAsync() {
        TransfersInner client = this.manager().inner().transfers();
        return client.initiateAsync(this.billingAccountName, this.billingProfileName, this.invoiceSectionName, this.transferName, this.createOrUpdateParameter)
            .map(new Func1<TransferDetailsInner, TransferDetailsInner>() {
               @Override
               public TransferDetailsInner call(TransferDetailsInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<TransferDetails> updateResourceAsync() {
        TransfersInner client = this.manager().inner().transfers();
        return client.initiateAsync(this.billingAccountName, this.billingProfileName, this.invoiceSectionName, this.transferName, this.createOrUpdateParameter)
            .map(new Func1<TransferDetailsInner, TransferDetailsInner>() {
               @Override
               public TransferDetailsInner call(TransferDetailsInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<TransferDetailsInner> getInnerAsync() {
        TransfersInner client = this.manager().inner().transfers();
        return client.getAsync(this.billingAccountName, this.billingProfileName, this.invoiceSectionName, this.transferName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.createOrUpdateParameter = new InitiateTransferRequest();
    }

    @Override
    public String billingAccountId() {
        return this.inner().billingAccountId();
    }

    @Override
    public String billingProfileId() {
        return this.inner().billingProfileId();
    }

    @Override
    public String canceledBy() {
        return this.inner().canceledBy();
    }

    @Override
    public DateTime creationTime() {
        return this.inner().creationTime();
    }

    @Override
    public List<DetailedTransferStatus> detailedTransferStatus() {
        return this.inner().detailedTransferStatus();
    }

    @Override
    public DateTime expirationTime() {
        return this.inner().expirationTime();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String initiatorCustomerType() {
        return this.inner().initiatorCustomerType();
    }

    @Override
    public String initiatorEmailId() {
        return this.inner().initiatorEmailId();
    }

    @Override
    public String invoiceSectionId() {
        return this.inner().invoiceSectionId();
    }

    @Override
    public DateTime lastModifiedTime() {
        return this.inner().lastModifiedTime();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String recipientEmailId() {
        return this.inner().recipientEmailId();
    }

    @Override
    public String resellerId() {
        return this.inner().resellerId();
    }

    @Override
    public String resellerName() {
        return this.inner().resellerName();
    }

    @Override
    public TransferStatus transferStatus() {
        return this.inner().transferStatus();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public TransferDetailsImpl withExistingInvoiceSection(String billingAccountName, String billingProfileName, String invoiceSectionName) {
        this.billingAccountName = billingAccountName;
        this.billingProfileName = billingProfileName;
        this.invoiceSectionName = invoiceSectionName;
        return this;
    }

    @Override
    public TransferDetailsImpl withRecipientEmailId(String recipientEmailId) {
        this.createOrUpdateParameter.withRecipientEmailId(recipientEmailId);
        return this;
    }

    @Override
    public TransferDetailsImpl withResellerId(String resellerId) {
        this.createOrUpdateParameter.withResellerId(resellerId);
        return this;
    }

}
