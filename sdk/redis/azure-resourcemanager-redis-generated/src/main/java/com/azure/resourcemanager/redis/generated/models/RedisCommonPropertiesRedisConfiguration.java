// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redis.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.HashMap;
import java.util.Map;

/**
 * All Redis Settings. Few possible keys:
 * rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
 * etc.
 */
@Fluent
public final class RedisCommonPropertiesRedisConfiguration {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(RedisCommonPropertiesRedisConfiguration.class);

    /*
     * Specifies whether the resource has RDB export enabled. Premium tier
     * only.
     */
    @JsonProperty(value = "rdb-backup-enabled")
    private Boolean rdbBackupEnabled;

    /*
     * Specifies the connection string to the Storage account for Redis data
     * persistence. Premium tier only.
     */
    @JsonProperty(value = "rdb-storage-connection-string")
    private String rdbStorageConnectionString;

    /*
     * Specifies the backup frequency for Redis data persistence. Premium tier
     * only.
     */
    @JsonProperty(value = "rdb-backup-frequency")
    private Integer rdbBackupFrequency;

    /*
     * Configures the eviction policy for the cache. All pricing tiers.
     */
    @JsonProperty(value = "maxmemory-policy")
    private String maxmemoryPolicy;

    /*
     * Configures keyspace notifications. Standard and premium tiers.
     */
    @JsonProperty(value = "notify-keyspace-events")
    private String notifyKeyspaceEvents;

    /*
     * Configures memory optimization for small aggregate data types. Standard
     * and Premium tiers.
     */
    @JsonProperty(value = "hash-max-ziplist-entries")
    private Integer hashMaxZiplistEntries;

    /*
     * Configures memory optimization for small aggregate data types. Standard
     * and Premium tiers.
     */
    @JsonProperty(value = "hash-max-ziplist-value")
    private Integer hashMaxZiplistValue;

    /*
     * Configures memory optimization for small aggregate data types. Standard
     * and Premium tiers.
     */
    @JsonProperty(value = "set-max-intset-entries")
    private Integer setMaxIntsetEntries;

    /*
     * Configures memory optimization for small aggregate data types. Standard
     * and Premium tiers.
     */
    @JsonProperty(value = "zset-max-ziplist-entries")
    private Integer zsetMaxZiplistEntries;

    /*
     * Configures memory optimization for small aggregate data types. Standard
     * and Premium tiers.
     */
    @JsonProperty(value = "zset-max-ziplist-value")
    private Integer zsetMaxZiplistValue;

    /*
     * Configures the number of databases. This property can be configured only
     * at cache creation. Standard and Premium tiers.
     */
    @JsonProperty(value = "databases")
    private Integer databases;

    /*
     * All Redis Settings. Few possible keys:
     * rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
     * etc.
     */
    @JsonIgnore private Map<String, String> additionalProperties;

    /**
     * Get the rdbBackupEnabled property: Specifies whether the resource has RDB export enabled. Premium tier only.
     *
     * @return the rdbBackupEnabled value.
     */
    public Boolean rdbBackupEnabled() {
        return this.rdbBackupEnabled;
    }

    /**
     * Set the rdbBackupEnabled property: Specifies whether the resource has RDB export enabled. Premium tier only.
     *
     * @param rdbBackupEnabled the rdbBackupEnabled value to set.
     * @return the RedisCommonPropertiesRedisConfiguration object itself.
     */
    public RedisCommonPropertiesRedisConfiguration withRdbBackupEnabled(Boolean rdbBackupEnabled) {
        this.rdbBackupEnabled = rdbBackupEnabled;
        return this;
    }

    /**
     * Get the rdbStorageConnectionString property: Specifies the connection string to the Storage account for Redis
     * data persistence. Premium tier only.
     *
     * @return the rdbStorageConnectionString value.
     */
    public String rdbStorageConnectionString() {
        return this.rdbStorageConnectionString;
    }

    /**
     * Set the rdbStorageConnectionString property: Specifies the connection string to the Storage account for Redis
     * data persistence. Premium tier only.
     *
     * @param rdbStorageConnectionString the rdbStorageConnectionString value to set.
     * @return the RedisCommonPropertiesRedisConfiguration object itself.
     */
    public RedisCommonPropertiesRedisConfiguration withRdbStorageConnectionString(String rdbStorageConnectionString) {
        this.rdbStorageConnectionString = rdbStorageConnectionString;
        return this;
    }

    /**
     * Get the rdbBackupFrequency property: Specifies the backup frequency for Redis data persistence. Premium tier
     * only.
     *
     * @return the rdbBackupFrequency value.
     */
    public Integer rdbBackupFrequency() {
        return this.rdbBackupFrequency;
    }

    /**
     * Set the rdbBackupFrequency property: Specifies the backup frequency for Redis data persistence. Premium tier
     * only.
     *
     * @param rdbBackupFrequency the rdbBackupFrequency value to set.
     * @return the RedisCommonPropertiesRedisConfiguration object itself.
     */
    public RedisCommonPropertiesRedisConfiguration withRdbBackupFrequency(Integer rdbBackupFrequency) {
        this.rdbBackupFrequency = rdbBackupFrequency;
        return this;
    }

    /**
     * Get the maxmemoryPolicy property: Configures the eviction policy for the cache. All pricing tiers.
     *
     * @return the maxmemoryPolicy value.
     */
    public String maxmemoryPolicy() {
        return this.maxmemoryPolicy;
    }

    /**
     * Set the maxmemoryPolicy property: Configures the eviction policy for the cache. All pricing tiers.
     *
     * @param maxmemoryPolicy the maxmemoryPolicy value to set.
     * @return the RedisCommonPropertiesRedisConfiguration object itself.
     */
    public RedisCommonPropertiesRedisConfiguration withMaxmemoryPolicy(String maxmemoryPolicy) {
        this.maxmemoryPolicy = maxmemoryPolicy;
        return this;
    }

    /**
     * Get the notifyKeyspaceEvents property: Configures keyspace notifications. Standard and premium tiers.
     *
     * @return the notifyKeyspaceEvents value.
     */
    public String notifyKeyspaceEvents() {
        return this.notifyKeyspaceEvents;
    }

    /**
     * Set the notifyKeyspaceEvents property: Configures keyspace notifications. Standard and premium tiers.
     *
     * @param notifyKeyspaceEvents the notifyKeyspaceEvents value to set.
     * @return the RedisCommonPropertiesRedisConfiguration object itself.
     */
    public RedisCommonPropertiesRedisConfiguration withNotifyKeyspaceEvents(String notifyKeyspaceEvents) {
        this.notifyKeyspaceEvents = notifyKeyspaceEvents;
        return this;
    }

    /**
     * Get the hashMaxZiplistEntries property: Configures memory optimization for small aggregate data types. Standard
     * and Premium tiers.
     *
     * @return the hashMaxZiplistEntries value.
     */
    public Integer hashMaxZiplistEntries() {
        return this.hashMaxZiplistEntries;
    }

    /**
     * Set the hashMaxZiplistEntries property: Configures memory optimization for small aggregate data types. Standard
     * and Premium tiers.
     *
     * @param hashMaxZiplistEntries the hashMaxZiplistEntries value to set.
     * @return the RedisCommonPropertiesRedisConfiguration object itself.
     */
    public RedisCommonPropertiesRedisConfiguration withHashMaxZiplistEntries(Integer hashMaxZiplistEntries) {
        this.hashMaxZiplistEntries = hashMaxZiplistEntries;
        return this;
    }

    /**
     * Get the hashMaxZiplistValue property: Configures memory optimization for small aggregate data types. Standard and
     * Premium tiers.
     *
     * @return the hashMaxZiplistValue value.
     */
    public Integer hashMaxZiplistValue() {
        return this.hashMaxZiplistValue;
    }

    /**
     * Set the hashMaxZiplistValue property: Configures memory optimization for small aggregate data types. Standard and
     * Premium tiers.
     *
     * @param hashMaxZiplistValue the hashMaxZiplistValue value to set.
     * @return the RedisCommonPropertiesRedisConfiguration object itself.
     */
    public RedisCommonPropertiesRedisConfiguration withHashMaxZiplistValue(Integer hashMaxZiplistValue) {
        this.hashMaxZiplistValue = hashMaxZiplistValue;
        return this;
    }

    /**
     * Get the setMaxIntsetEntries property: Configures memory optimization for small aggregate data types. Standard and
     * Premium tiers.
     *
     * @return the setMaxIntsetEntries value.
     */
    public Integer setMaxIntsetEntries() {
        return this.setMaxIntsetEntries;
    }

    /**
     * Set the setMaxIntsetEntries property: Configures memory optimization for small aggregate data types. Standard and
     * Premium tiers.
     *
     * @param setMaxIntsetEntries the setMaxIntsetEntries value to set.
     * @return the RedisCommonPropertiesRedisConfiguration object itself.
     */
    public RedisCommonPropertiesRedisConfiguration withSetMaxIntsetEntries(Integer setMaxIntsetEntries) {
        this.setMaxIntsetEntries = setMaxIntsetEntries;
        return this;
    }

    /**
     * Get the zsetMaxZiplistEntries property: Configures memory optimization for small aggregate data types. Standard
     * and Premium tiers.
     *
     * @return the zsetMaxZiplistEntries value.
     */
    public Integer zsetMaxZiplistEntries() {
        return this.zsetMaxZiplistEntries;
    }

    /**
     * Set the zsetMaxZiplistEntries property: Configures memory optimization for small aggregate data types. Standard
     * and Premium tiers.
     *
     * @param zsetMaxZiplistEntries the zsetMaxZiplistEntries value to set.
     * @return the RedisCommonPropertiesRedisConfiguration object itself.
     */
    public RedisCommonPropertiesRedisConfiguration withZsetMaxZiplistEntries(Integer zsetMaxZiplistEntries) {
        this.zsetMaxZiplistEntries = zsetMaxZiplistEntries;
        return this;
    }

    /**
     * Get the zsetMaxZiplistValue property: Configures memory optimization for small aggregate data types. Standard and
     * Premium tiers.
     *
     * @return the zsetMaxZiplistValue value.
     */
    public Integer zsetMaxZiplistValue() {
        return this.zsetMaxZiplistValue;
    }

    /**
     * Set the zsetMaxZiplistValue property: Configures memory optimization for small aggregate data types. Standard and
     * Premium tiers.
     *
     * @param zsetMaxZiplistValue the zsetMaxZiplistValue value to set.
     * @return the RedisCommonPropertiesRedisConfiguration object itself.
     */
    public RedisCommonPropertiesRedisConfiguration withZsetMaxZiplistValue(Integer zsetMaxZiplistValue) {
        this.zsetMaxZiplistValue = zsetMaxZiplistValue;
        return this;
    }

    /**
     * Get the databases property: Configures the number of databases. This property can be configured only at cache
     * creation. Standard and Premium tiers.
     *
     * @return the databases value.
     */
    public Integer databases() {
        return this.databases;
    }

    /**
     * Set the databases property: Configures the number of databases. This property can be configured only at cache
     * creation. Standard and Premium tiers.
     *
     * @param databases the databases value to set.
     * @return the RedisCommonPropertiesRedisConfiguration object itself.
     */
    public RedisCommonPropertiesRedisConfiguration withDatabases(Integer databases) {
        this.databases = databases;
        return this;
    }

    /**
     * Get the additionalProperties property: All Redis Settings. Few possible keys:
     * rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
     * etc.
     *
     * @return the additionalProperties value.
     */
    @JsonAnyGetter
    public Map<String, String> additionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: All Redis Settings. Few possible keys:
     * rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
     * etc.
     *
     * @param additionalProperties the additionalProperties value to set.
     * @return the RedisCommonPropertiesRedisConfiguration object itself.
     */
    public RedisCommonPropertiesRedisConfiguration withAdditionalProperties(Map<String, String> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    @JsonAnySetter
    void withAdditionalProperties(String key, String value) {
        if (additionalProperties == null) {
            additionalProperties = new HashMap<>();
        }
        additionalProperties.put(key, value);
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
