/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.appconfiguration.v2020_07_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.appconfiguration.v2020_07_01_preview.EventGridFilters;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.appconfiguration.v2020_07_01_preview.EventGridFilter;

class EventGridFiltersImpl extends WrapperImpl<EventGridFiltersInner> implements EventGridFilters {
    private final AppConfigurationManager manager;

    EventGridFiltersImpl(AppConfigurationManager manager) {
        super(manager.inner().eventGridFilters());
        this.manager = manager;
    }

    public AppConfigurationManager manager() {
        return this.manager;
    }

    private EventGridFilterImpl wrapModel(EventGridFilterInner inner) {
        return  new EventGridFilterImpl(inner, manager());
    }

    @Override
    public Observable<EventGridFilter> listByConfigurationStoreAsync(final String resourceGroupName, final String configStoreName) {
        EventGridFiltersInner client = this.inner();
        return client.listByConfigurationStoreAsync(resourceGroupName, configStoreName)
        .flatMapIterable(new Func1<Page<EventGridFilterInner>, Iterable<EventGridFilterInner>>() {
            @Override
            public Iterable<EventGridFilterInner> call(Page<EventGridFilterInner> page) {
                return page.items();
            }
        })
        .map(new Func1<EventGridFilterInner, EventGridFilter>() {
            @Override
            public EventGridFilter call(EventGridFilterInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<EventGridFilter> getAsync(String resourceGroupName, String configStoreName, String eventGridFilterName) {
        EventGridFiltersInner client = this.inner();
        return client.getAsync(resourceGroupName, configStoreName, eventGridFilterName)
        .flatMap(new Func1<EventGridFilterInner, Observable<EventGridFilter>>() {
            @Override
            public Observable<EventGridFilter> call(EventGridFilterInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((EventGridFilter)wrapModel(inner));
                }
            }
       });
    }

}
