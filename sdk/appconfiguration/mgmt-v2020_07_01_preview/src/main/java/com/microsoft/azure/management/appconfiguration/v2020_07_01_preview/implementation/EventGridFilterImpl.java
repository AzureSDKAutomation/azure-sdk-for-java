/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.appconfiguration.v2020_07_01_preview.implementation;

import com.microsoft.azure.management.appconfiguration.v2020_07_01_preview.EventGridFilter;
import com.microsoft.azure.arm.model.implementation.IndexableRefreshableWrapperImpl;
import rx.Observable;
import com.microsoft.azure.management.appconfiguration.v2020_07_01_preview.EventFilter;
import com.microsoft.azure.management.appconfiguration.v2020_07_01_preview.ProvisioningState;
import com.microsoft.azure.management.appconfiguration.v2020_07_01_preview.SubscriberIdentityInfo;

class EventGridFilterImpl extends IndexableRefreshableWrapperImpl<EventGridFilter, EventGridFilterInner> implements EventGridFilter {
    private final AppConfigurationManager manager;
    private String resourceGroupName;
    private String configStoreName;
    private String eventGridFilterName;

    EventGridFilterImpl(EventGridFilterInner inner,  AppConfigurationManager manager) {
        super(null, inner);
        this.manager = manager;
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.configStoreName = IdParsingUtils.getValueFromIdByName(inner.id(), "configurationStores");
        this.eventGridFilterName = IdParsingUtils.getValueFromIdByName(inner.id(), "eventGridFilters");
    }

    @Override
    public AppConfigurationManager manager() {
        return this.manager;
    }

    @Override
    protected Observable<EventGridFilterInner> getInnerAsync() {
        EventGridFiltersInner client = this.manager().inner().eventGridFilters();
        return client.getAsync(this.resourceGroupName, this.configStoreName, this.eventGridFilterName);
    }



    @Override
    public EventFilter filter() {
        return this.inner().filter();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public ProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public SubscriberIdentityInfo subscriberIdentityInfo() {
        return this.inner().subscriberIdentityInfo();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

}
