// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.powerplatform.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** Definition of the EnterprisePolicy. */
@JsonFlatten
@Fluent
public class PatchEnterprisePolicy extends PatchTrackedResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(PatchEnterprisePolicy.class);

    /*
     * The identity of the EnterprisePolicy.
     */
    @JsonProperty(value = "identity")
    private EnterprisePolicyIdentity identity;

    /*
     * Metadata pertaining to creation and last modification of the resource.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /*
     * Settings concerning lockbox.
     */
    @JsonProperty(value = "properties.lockbox")
    private PropertiesLockbox lockbox;

    /*
     * The encryption settings for a configuration store.
     */
    @JsonProperty(value = "properties.encryption")
    private PropertiesEncryption encryption;

    /*
     * Settings concerning network injection.
     */
    @JsonProperty(value = "properties.networkInjection")
    private PropertiesNetworkInjection networkInjection;

    /**
     * Get the identity property: The identity of the EnterprisePolicy.
     *
     * @return the identity value.
     */
    public EnterprisePolicyIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: The identity of the EnterprisePolicy.
     *
     * @param identity the identity value to set.
     * @return the PatchEnterprisePolicy object itself.
     */
    public PatchEnterprisePolicy withIdentity(EnterprisePolicyIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the systemData property: Metadata pertaining to creation and last modification of the resource.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the lockbox property: Settings concerning lockbox.
     *
     * @return the lockbox value.
     */
    public PropertiesLockbox lockbox() {
        return this.lockbox;
    }

    /**
     * Set the lockbox property: Settings concerning lockbox.
     *
     * @param lockbox the lockbox value to set.
     * @return the PatchEnterprisePolicy object itself.
     */
    public PatchEnterprisePolicy withLockbox(PropertiesLockbox lockbox) {
        this.lockbox = lockbox;
        return this;
    }

    /**
     * Get the encryption property: The encryption settings for a configuration store.
     *
     * @return the encryption value.
     */
    public PropertiesEncryption encryption() {
        return this.encryption;
    }

    /**
     * Set the encryption property: The encryption settings for a configuration store.
     *
     * @param encryption the encryption value to set.
     * @return the PatchEnterprisePolicy object itself.
     */
    public PatchEnterprisePolicy withEncryption(PropertiesEncryption encryption) {
        this.encryption = encryption;
        return this;
    }

    /**
     * Get the networkInjection property: Settings concerning network injection.
     *
     * @return the networkInjection value.
     */
    public PropertiesNetworkInjection networkInjection() {
        return this.networkInjection;
    }

    /**
     * Set the networkInjection property: Settings concerning network injection.
     *
     * @param networkInjection the networkInjection value to set.
     * @return the PatchEnterprisePolicy object itself.
     */
    public PatchEnterprisePolicy withNetworkInjection(PropertiesNetworkInjection networkInjection) {
        this.networkInjection = networkInjection;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public PatchEnterprisePolicy withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public PatchEnterprisePolicy withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (identity() != null) {
            identity().validate();
        }
        if (lockbox() != null) {
            lockbox().validate();
        }
        if (encryption() != null) {
            encryption().validate();
        }
        if (networkInjection() != null) {
            networkInjection().validate();
        }
    }
}
