// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.util.Context;
import com.azure.resourcemanager.sql.generated.SqlManager;
import com.azure.resourcemanager.sql.generated.fluent.models.HybridLinkInner;
import com.azure.resourcemanager.sql.generated.models.HybridLink;
import com.azure.resourcemanager.sql.generated.models.ReplicationMode;
import java.util.UUID;

public final class HybridLinkImpl implements HybridLink, HybridLink.Definition, HybridLink.Update {
    private HybridLinkInner innerObject;

    private final SqlManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String targetDatabase() {
        return this.innerModel().targetDatabase();
    }

    public String sourceEndpoint() {
        return this.innerModel().sourceEndpoint();
    }

    public String primaryAvailabilityGroupName() {
        return this.innerModel().primaryAvailabilityGroupName();
    }

    public String secondaryAvailabilityGroupName() {
        return this.innerModel().secondaryAvailabilityGroupName();
    }

    public ReplicationMode replicationMode() {
        return this.innerModel().replicationMode();
    }

    public UUID distributedAvailabilityGroupId() {
        return this.innerModel().distributedAvailabilityGroupId();
    }

    public UUID sourceReplicaId() {
        return this.innerModel().sourceReplicaId();
    }

    public UUID targetReplicaId() {
        return this.innerModel().targetReplicaId();
    }

    public HybridLinkInner innerModel() {
        return this.innerObject;
    }

    private SqlManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String managedInstanceName;

    private String distributedAvailabilityGroupName;

    public HybridLinkImpl withExistingManagedInstance(String resourceGroupName, String managedInstanceName) {
        this.resourceGroupName = resourceGroupName;
        this.managedInstanceName = managedInstanceName;
        return this;
    }

    public HybridLink create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getHybridLinks()
                .createOrUpdate(
                    resourceGroupName,
                    managedInstanceName,
                    distributedAvailabilityGroupName,
                    this.innerModel(),
                    Context.NONE);
        return this;
    }

    public HybridLink create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getHybridLinks()
                .createOrUpdate(
                    resourceGroupName,
                    managedInstanceName,
                    distributedAvailabilityGroupName,
                    this.innerModel(),
                    context);
        return this;
    }

    HybridLinkImpl(String name, SqlManager serviceManager) {
        this.innerObject = new HybridLinkInner();
        this.serviceManager = serviceManager;
        this.distributedAvailabilityGroupName = name;
    }

    public HybridLinkImpl update() {
        return this;
    }

    public HybridLink apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getHybridLinks()
                .createOrUpdate(
                    resourceGroupName,
                    managedInstanceName,
                    distributedAvailabilityGroupName,
                    this.innerModel(),
                    Context.NONE);
        return this;
    }

    public HybridLink apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getHybridLinks()
                .createOrUpdate(
                    resourceGroupName,
                    managedInstanceName,
                    distributedAvailabilityGroupName,
                    this.innerModel(),
                    context);
        return this;
    }

    HybridLinkImpl(HybridLinkInner innerObject, SqlManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.managedInstanceName = Utils.getValueFromIdByName(innerObject.id(), "managedInstances");
        this.distributedAvailabilityGroupName = Utils.getValueFromIdByName(innerObject.id(), "hybridLink");
    }

    public HybridLink refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getHybridLinks()
                .getWithResponse(resourceGroupName, managedInstanceName, distributedAvailabilityGroupName, Context.NONE)
                .getValue();
        return this;
    }

    public HybridLink refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getHybridLinks()
                .getWithResponse(resourceGroupName, managedInstanceName, distributedAvailabilityGroupName, context)
                .getValue();
        return this;
    }

    public HybridLinkImpl withTargetDatabase(String targetDatabase) {
        this.innerModel().withTargetDatabase(targetDatabase);
        return this;
    }

    public HybridLinkImpl withSourceEndpoint(String sourceEndpoint) {
        this.innerModel().withSourceEndpoint(sourceEndpoint);
        return this;
    }

    public HybridLinkImpl withPrimaryAvailabilityGroupName(String primaryAvailabilityGroupName) {
        this.innerModel().withPrimaryAvailabilityGroupName(primaryAvailabilityGroupName);
        return this;
    }

    public HybridLinkImpl withSecondaryAvailabilityGroupName(String secondaryAvailabilityGroupName) {
        this.innerModel().withSecondaryAvailabilityGroupName(secondaryAvailabilityGroupName);
        return this;
    }

    public HybridLinkImpl withReplicationMode(ReplicationMode replicationMode) {
        this.innerModel().withReplicationMode(replicationMode);
        return this;
    }
}
