// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.SqlManager;
import com.azure.resourcemanager.sql.generated.fluent.HybridLinksClient;
import com.azure.resourcemanager.sql.generated.fluent.models.HybridLinkInner;
import com.azure.resourcemanager.sql.generated.models.HybridLink;
import com.azure.resourcemanager.sql.generated.models.HybridLinks;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class HybridLinksImpl implements HybridLinks {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(HybridLinksImpl.class);

    private final HybridLinksClient innerClient;

    private final SqlManager serviceManager;

    public HybridLinksImpl(HybridLinksClient innerClient, SqlManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<HybridLink> listByInstance(String resourceGroupName, String managedInstanceName) {
        PagedIterable<HybridLinkInner> inner =
            this.serviceClient().listByInstance(resourceGroupName, managedInstanceName);
        return Utils.mapPage(inner, inner1 -> new HybridLinkImpl(inner1, this.manager()));
    }

    public PagedIterable<HybridLink> listByInstance(
        String resourceGroupName, String managedInstanceName, Context context) {
        PagedIterable<HybridLinkInner> inner =
            this.serviceClient().listByInstance(resourceGroupName, managedInstanceName, context);
        return Utils.mapPage(inner, inner1 -> new HybridLinkImpl(inner1, this.manager()));
    }

    public HybridLink get(
        String resourceGroupName, String managedInstanceName, String distributedAvailabilityGroupName) {
        HybridLinkInner inner =
            this.serviceClient().get(resourceGroupName, managedInstanceName, distributedAvailabilityGroupName);
        if (inner != null) {
            return new HybridLinkImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<HybridLink> getWithResponse(
        String resourceGroupName,
        String managedInstanceName,
        String distributedAvailabilityGroupName,
        Context context) {
        Response<HybridLinkInner> inner =
            this
                .serviceClient()
                .getWithResponse(resourceGroupName, managedInstanceName, distributedAvailabilityGroupName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new HybridLinkImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public HybridLink delete(
        String resourceGroupName, String managedInstanceName, String distributedAvailabilityGroupName) {
        HybridLinkInner inner =
            this.serviceClient().delete(resourceGroupName, managedInstanceName, distributedAvailabilityGroupName);
        if (inner != null) {
            return new HybridLinkImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public HybridLink delete(
        String resourceGroupName,
        String managedInstanceName,
        String distributedAvailabilityGroupName,
        Context context) {
        HybridLinkInner inner =
            this
                .serviceClient()
                .delete(resourceGroupName, managedInstanceName, distributedAvailabilityGroupName, context);
        if (inner != null) {
            return new HybridLinkImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public HybridLink getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String distributedAvailabilityGroupName = Utils.getValueFromIdByName(id, "hybridLink");
        if (distributedAvailabilityGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'hybridLink'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, managedInstanceName, distributedAvailabilityGroupName, Context.NONE)
            .getValue();
    }

    public Response<HybridLink> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String distributedAvailabilityGroupName = Utils.getValueFromIdByName(id, "hybridLink");
        if (distributedAvailabilityGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'hybridLink'.", id)));
        }
        return this.getWithResponse(resourceGroupName, managedInstanceName, distributedAvailabilityGroupName, context);
    }

    public HybridLink deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String distributedAvailabilityGroupName = Utils.getValueFromIdByName(id, "hybridLink");
        if (distributedAvailabilityGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'hybridLink'.", id)));
        }
        return this.delete(resourceGroupName, managedInstanceName, distributedAvailabilityGroupName, Context.NONE);
    }

    public HybridLink deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String distributedAvailabilityGroupName = Utils.getValueFromIdByName(id, "hybridLink");
        if (distributedAvailabilityGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'hybridLink'.", id)));
        }
        return this.delete(resourceGroupName, managedInstanceName, distributedAvailabilityGroupName, context);
    }

    private HybridLinksClient serviceClient() {
        return this.innerClient;
    }

    private SqlManager manager() {
        return this.serviceManager;
    }

    public HybridLinkImpl define(String name) {
        return new HybridLinkImpl(name, this.manager());
    }
}
