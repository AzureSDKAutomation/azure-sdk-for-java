// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.SqlManager;
import com.azure.resourcemanager.sql.generated.fluent.HybridCertificatesClient;
import com.azure.resourcemanager.sql.generated.fluent.models.HybridCertificateInner;
import com.azure.resourcemanager.sql.generated.models.HybridCertificate;
import com.azure.resourcemanager.sql.generated.models.HybridCertificates;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class HybridCertificatesImpl implements HybridCertificates {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(HybridCertificatesImpl.class);

    private final HybridCertificatesClient innerClient;

    private final SqlManager serviceManager;

    public HybridCertificatesImpl(HybridCertificatesClient innerClient, SqlManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public HybridCertificate createOrUpdate(
        String resourceGroupName, String managedInstanceName, HybridCertificateInner parameters) {
        HybridCertificateInner inner =
            this.serviceClient().createOrUpdate(resourceGroupName, managedInstanceName, parameters);
        if (inner != null) {
            return new HybridCertificateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public HybridCertificate createOrUpdate(
        String resourceGroupName, String managedInstanceName, HybridCertificateInner parameters, Context context) {
        HybridCertificateInner inner =
            this.serviceClient().createOrUpdate(resourceGroupName, managedInstanceName, parameters, context);
        if (inner != null) {
            return new HybridCertificateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private HybridCertificatesClient serviceClient() {
        return this.innerClient;
    }

    private SqlManager manager() {
        return this.serviceManager;
    }
}
