/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datafactory.v2018_06_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.datafactory.v2018_06_01.Credential;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in CredentialOperations.
 */
public class CredentialOperationsInner {
    /** The Retrofit service to perform REST calls. */
    private CredentialOperationsService service;
    /** The service client containing this operation class. */
    private DataFactoryManagementClientImpl client;

    /**
     * Initializes an instance of CredentialOperationsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public CredentialOperationsInner(Retrofit retrofit, DataFactoryManagementClientImpl client) {
        this.service = retrofit.create(CredentialOperationsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for CredentialOperations to be
     * used by Retrofit to perform actually REST calls.
     */
    interface CredentialOperationsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.CredentialOperations listByFactory" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/credentials")
        Observable<Response<ResponseBody>> listByFactory(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("factoryName") String factoryName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.CredentialOperations createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/credentials/{credentialName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("factoryName") String factoryName, @Path("credentialName") String credentialName, @Query("api-version") String apiVersion, @Header("If-Match") String ifMatch, @Header("accept-language") String acceptLanguage, @Body CredentialResourceInner credential, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.CredentialOperations get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/credentials/{credentialName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("factoryName") String factoryName, @Path("credentialName") String credentialName, @Query("api-version") String apiVersion, @Header("If-None-Match") String ifNoneMatch, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.CredentialOperations delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/credentials/{credentialName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("factoryName") String factoryName, @Path("credentialName") String credentialName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.CredentialOperations listByFactoryNext" })
        @GET
        Observable<Response<ResponseBody>> listByFactoryNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * List credentials.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;CredentialResourceInner&gt; object if successful.
     */
    public PagedList<CredentialResourceInner> listByFactory(final String resourceGroupName, final String factoryName) {
        ServiceResponse<Page<CredentialResourceInner>> response = listByFactorySinglePageAsync(resourceGroupName, factoryName).toBlocking().single();
        return new PagedList<CredentialResourceInner>(response.body()) {
            @Override
            public Page<CredentialResourceInner> nextPage(String nextPageLink) {
                return listByFactoryNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List credentials.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<CredentialResourceInner>> listByFactoryAsync(final String resourceGroupName, final String factoryName, final ListOperationCallback<CredentialResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByFactorySinglePageAsync(resourceGroupName, factoryName),
            new Func1<String, Observable<ServiceResponse<Page<CredentialResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CredentialResourceInner>>> call(String nextPageLink) {
                    return listByFactoryNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List credentials.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CredentialResourceInner&gt; object
     */
    public Observable<Page<CredentialResourceInner>> listByFactoryAsync(final String resourceGroupName, final String factoryName) {
        return listByFactoryWithServiceResponseAsync(resourceGroupName, factoryName)
            .map(new Func1<ServiceResponse<Page<CredentialResourceInner>>, Page<CredentialResourceInner>>() {
                @Override
                public Page<CredentialResourceInner> call(ServiceResponse<Page<CredentialResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List credentials.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CredentialResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<CredentialResourceInner>>> listByFactoryWithServiceResponseAsync(final String resourceGroupName, final String factoryName) {
        return listByFactorySinglePageAsync(resourceGroupName, factoryName)
            .concatMap(new Func1<ServiceResponse<Page<CredentialResourceInner>>, Observable<ServiceResponse<Page<CredentialResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CredentialResourceInner>>> call(ServiceResponse<Page<CredentialResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByFactoryNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List credentials.
     *
    ServiceResponse<PageImpl<CredentialResourceInner>> * @param resourceGroupName The resource group name.
    ServiceResponse<PageImpl<CredentialResourceInner>> * @param factoryName The factory name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;CredentialResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<CredentialResourceInner>>> listByFactorySinglePageAsync(final String resourceGroupName, final String factoryName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByFactory(this.client.subscriptionId(), resourceGroupName, factoryName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<CredentialResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CredentialResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<CredentialResourceInner>> result = listByFactoryDelegate(response);
                        return Observable.just(new ServiceResponse<Page<CredentialResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<CredentialResourceInner>> listByFactoryDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<CredentialResourceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<CredentialResourceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Creates or updates a credential.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param credentialName Credential name
     * @param properties Properties of credentials.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CredentialResourceInner object if successful.
     */
    public CredentialResourceInner createOrUpdate(String resourceGroupName, String factoryName, String credentialName, Credential properties) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, factoryName, credentialName, properties).toBlocking().single().body();
    }

    /**
     * Creates or updates a credential.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param credentialName Credential name
     * @param properties Properties of credentials.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CredentialResourceInner> createOrUpdateAsync(String resourceGroupName, String factoryName, String credentialName, Credential properties, final ServiceCallback<CredentialResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, factoryName, credentialName, properties), serviceCallback);
    }

    /**
     * Creates or updates a credential.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param credentialName Credential name
     * @param properties Properties of credentials.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CredentialResourceInner object
     */
    public Observable<CredentialResourceInner> createOrUpdateAsync(String resourceGroupName, String factoryName, String credentialName, Credential properties) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, factoryName, credentialName, properties).map(new Func1<ServiceResponse<CredentialResourceInner>, CredentialResourceInner>() {
            @Override
            public CredentialResourceInner call(ServiceResponse<CredentialResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a credential.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param credentialName Credential name
     * @param properties Properties of credentials.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CredentialResourceInner object
     */
    public Observable<ServiceResponse<CredentialResourceInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String factoryName, String credentialName, Credential properties) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (credentialName == null) {
            throw new IllegalArgumentException("Parameter credentialName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (properties == null) {
            throw new IllegalArgumentException("Parameter properties is required and cannot be null.");
        }
        Validator.validate(properties);
        final String ifMatch = null;
        CredentialResourceInner credential = new CredentialResourceInner();
        credential.withProperties(properties);
        return service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, factoryName, credentialName, this.client.apiVersion(), ifMatch, this.client.acceptLanguage(), credential, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CredentialResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<CredentialResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CredentialResourceInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Creates or updates a credential.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param credentialName Credential name
     * @param properties Properties of credentials.
     * @param ifMatch ETag of the credential entity. Should only be specified for update, for which it should match existing entity or can be * for unconditional update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CredentialResourceInner object if successful.
     */
    public CredentialResourceInner createOrUpdate(String resourceGroupName, String factoryName, String credentialName, Credential properties, String ifMatch) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, factoryName, credentialName, properties, ifMatch).toBlocking().single().body();
    }

    /**
     * Creates or updates a credential.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param credentialName Credential name
     * @param properties Properties of credentials.
     * @param ifMatch ETag of the credential entity. Should only be specified for update, for which it should match existing entity or can be * for unconditional update.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CredentialResourceInner> createOrUpdateAsync(String resourceGroupName, String factoryName, String credentialName, Credential properties, String ifMatch, final ServiceCallback<CredentialResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, factoryName, credentialName, properties, ifMatch), serviceCallback);
    }

    /**
     * Creates or updates a credential.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param credentialName Credential name
     * @param properties Properties of credentials.
     * @param ifMatch ETag of the credential entity. Should only be specified for update, for which it should match existing entity or can be * for unconditional update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CredentialResourceInner object
     */
    public Observable<CredentialResourceInner> createOrUpdateAsync(String resourceGroupName, String factoryName, String credentialName, Credential properties, String ifMatch) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, factoryName, credentialName, properties, ifMatch).map(new Func1<ServiceResponse<CredentialResourceInner>, CredentialResourceInner>() {
            @Override
            public CredentialResourceInner call(ServiceResponse<CredentialResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a credential.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param credentialName Credential name
     * @param properties Properties of credentials.
     * @param ifMatch ETag of the credential entity. Should only be specified for update, for which it should match existing entity or can be * for unconditional update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CredentialResourceInner object
     */
    public Observable<ServiceResponse<CredentialResourceInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String factoryName, String credentialName, Credential properties, String ifMatch) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (credentialName == null) {
            throw new IllegalArgumentException("Parameter credentialName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (properties == null) {
            throw new IllegalArgumentException("Parameter properties is required and cannot be null.");
        }
        Validator.validate(properties);
        CredentialResourceInner credential = new CredentialResourceInner();
        credential.withProperties(properties);
        return service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, factoryName, credentialName, this.client.apiVersion(), ifMatch, this.client.acceptLanguage(), credential, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CredentialResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<CredentialResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CredentialResourceInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CredentialResourceInner> createOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CredentialResourceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CredentialResourceInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets a credential.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param credentialName Credential name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CredentialResourceInner object if successful.
     */
    public CredentialResourceInner get(String resourceGroupName, String factoryName, String credentialName) {
        return getWithServiceResponseAsync(resourceGroupName, factoryName, credentialName).toBlocking().single().body();
    }

    /**
     * Gets a credential.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param credentialName Credential name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CredentialResourceInner> getAsync(String resourceGroupName, String factoryName, String credentialName, final ServiceCallback<CredentialResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, factoryName, credentialName), serviceCallback);
    }

    /**
     * Gets a credential.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param credentialName Credential name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CredentialResourceInner object
     */
    public Observable<CredentialResourceInner> getAsync(String resourceGroupName, String factoryName, String credentialName) {
        return getWithServiceResponseAsync(resourceGroupName, factoryName, credentialName).map(new Func1<ServiceResponse<CredentialResourceInner>, CredentialResourceInner>() {
            @Override
            public CredentialResourceInner call(ServiceResponse<CredentialResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a credential.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param credentialName Credential name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CredentialResourceInner object
     */
    public Observable<ServiceResponse<CredentialResourceInner>> getWithServiceResponseAsync(String resourceGroupName, String factoryName, String credentialName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (credentialName == null) {
            throw new IllegalArgumentException("Parameter credentialName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String ifNoneMatch = null;
        return service.get(this.client.subscriptionId(), resourceGroupName, factoryName, credentialName, this.client.apiVersion(), ifNoneMatch, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CredentialResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<CredentialResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CredentialResourceInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets a credential.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param credentialName Credential name
     * @param ifNoneMatch ETag of the credential entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CredentialResourceInner object if successful.
     */
    public CredentialResourceInner get(String resourceGroupName, String factoryName, String credentialName, String ifNoneMatch) {
        return getWithServiceResponseAsync(resourceGroupName, factoryName, credentialName, ifNoneMatch).toBlocking().single().body();
    }

    /**
     * Gets a credential.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param credentialName Credential name
     * @param ifNoneMatch ETag of the credential entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CredentialResourceInner> getAsync(String resourceGroupName, String factoryName, String credentialName, String ifNoneMatch, final ServiceCallback<CredentialResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, factoryName, credentialName, ifNoneMatch), serviceCallback);
    }

    /**
     * Gets a credential.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param credentialName Credential name
     * @param ifNoneMatch ETag of the credential entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CredentialResourceInner object
     */
    public Observable<CredentialResourceInner> getAsync(String resourceGroupName, String factoryName, String credentialName, String ifNoneMatch) {
        return getWithServiceResponseAsync(resourceGroupName, factoryName, credentialName, ifNoneMatch).map(new Func1<ServiceResponse<CredentialResourceInner>, CredentialResourceInner>() {
            @Override
            public CredentialResourceInner call(ServiceResponse<CredentialResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a credential.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param credentialName Credential name
     * @param ifNoneMatch ETag of the credential entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CredentialResourceInner object
     */
    public Observable<ServiceResponse<CredentialResourceInner>> getWithServiceResponseAsync(String resourceGroupName, String factoryName, String credentialName, String ifNoneMatch) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (credentialName == null) {
            throw new IllegalArgumentException("Parameter credentialName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, factoryName, credentialName, this.client.apiVersion(), ifNoneMatch, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CredentialResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<CredentialResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CredentialResourceInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CredentialResourceInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CredentialResourceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CredentialResourceInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes a credential.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param credentialName Credential name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String factoryName, String credentialName) {
        deleteWithServiceResponseAsync(resourceGroupName, factoryName, credentialName).toBlocking().single().body();
    }

    /**
     * Deletes a credential.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param credentialName Credential name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String factoryName, String credentialName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, factoryName, credentialName), serviceCallback);
    }

    /**
     * Deletes a credential.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param credentialName Credential name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String factoryName, String credentialName) {
        return deleteWithServiceResponseAsync(resourceGroupName, factoryName, credentialName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a credential.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param credentialName Credential name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String factoryName, String credentialName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (credentialName == null) {
            throw new IllegalArgumentException("Parameter credentialName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), resourceGroupName, factoryName, credentialName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List credentials.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;CredentialResourceInner&gt; object if successful.
     */
    public PagedList<CredentialResourceInner> listByFactoryNext(final String nextPageLink) {
        ServiceResponse<Page<CredentialResourceInner>> response = listByFactoryNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<CredentialResourceInner>(response.body()) {
            @Override
            public Page<CredentialResourceInner> nextPage(String nextPageLink) {
                return listByFactoryNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List credentials.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<CredentialResourceInner>> listByFactoryNextAsync(final String nextPageLink, final ServiceFuture<List<CredentialResourceInner>> serviceFuture, final ListOperationCallback<CredentialResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByFactoryNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<CredentialResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CredentialResourceInner>>> call(String nextPageLink) {
                    return listByFactoryNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List credentials.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CredentialResourceInner&gt; object
     */
    public Observable<Page<CredentialResourceInner>> listByFactoryNextAsync(final String nextPageLink) {
        return listByFactoryNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<CredentialResourceInner>>, Page<CredentialResourceInner>>() {
                @Override
                public Page<CredentialResourceInner> call(ServiceResponse<Page<CredentialResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List credentials.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CredentialResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<CredentialResourceInner>>> listByFactoryNextWithServiceResponseAsync(final String nextPageLink) {
        return listByFactoryNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<CredentialResourceInner>>, Observable<ServiceResponse<Page<CredentialResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CredentialResourceInner>>> call(ServiceResponse<Page<CredentialResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByFactoryNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List credentials.
     *
    ServiceResponse<PageImpl<CredentialResourceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;CredentialResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<CredentialResourceInner>>> listByFactoryNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByFactoryNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<CredentialResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CredentialResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<CredentialResourceInner>> result = listByFactoryNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<CredentialResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<CredentialResourceInner>> listByFactoryNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<CredentialResourceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<CredentialResourceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
