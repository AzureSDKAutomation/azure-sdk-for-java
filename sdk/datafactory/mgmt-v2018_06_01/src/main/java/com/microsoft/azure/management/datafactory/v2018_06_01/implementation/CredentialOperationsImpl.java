/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.datafactory.v2018_06_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.datafactory.v2018_06_01.CredentialOperations;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.datafactory.v2018_06_01.CredentialResource;

class CredentialOperationsImpl extends WrapperImpl<CredentialOperationsInner> implements CredentialOperations {
    private final DataFactoryManager manager;

    CredentialOperationsImpl(DataFactoryManager manager) {
        super(manager.inner().credentialOperations());
        this.manager = manager;
    }

    public DataFactoryManager manager() {
        return this.manager;
    }

    @Override
    public CredentialResourceImpl define(String name) {
        return wrapModel(name);
    }

    private CredentialResourceImpl wrapModel(CredentialResourceInner inner) {
        return  new CredentialResourceImpl(inner, manager());
    }

    private CredentialResourceImpl wrapModel(String name) {
        return new CredentialResourceImpl(name, this.manager());
    }

    @Override
    public Observable<CredentialResource> listByFactoryAsync(final String resourceGroupName, final String factoryName) {
        CredentialOperationsInner client = this.inner();
        return client.listByFactoryAsync(resourceGroupName, factoryName)
        .flatMapIterable(new Func1<Page<CredentialResourceInner>, Iterable<CredentialResourceInner>>() {
            @Override
            public Iterable<CredentialResourceInner> call(Page<CredentialResourceInner> page) {
                return page.items();
            }
        })
        .map(new Func1<CredentialResourceInner, CredentialResource>() {
            @Override
            public CredentialResource call(CredentialResourceInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<CredentialResource> getAsync(String resourceGroupName, String factoryName, String credentialName) {
        CredentialOperationsInner client = this.inner();
        return client.getAsync(resourceGroupName, factoryName, credentialName)
        .flatMap(new Func1<CredentialResourceInner, Observable<CredentialResource>>() {
            @Override
            public Observable<CredentialResource> call(CredentialResourceInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((CredentialResource)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String factoryName, String credentialName) {
        CredentialOperationsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, factoryName, credentialName).toCompletable();
    }

}
