// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datalakestore.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The parameters used to delete virtual network. */
@Fluent
public final class DeleteVirtualNetworkOrSubnetsParameters {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DeleteVirtualNetworkOrSubnetsParameters.class);

    /*
     * virtual Network Resource Guid.
     */
    @JsonProperty(value = "virtualNetworkResourceGuid")
    private String virtualNetworkResourceGuid;

    /*
     * virtual Network Location.
     */
    @JsonProperty(value = "virtualNetworkLocation")
    private String virtualNetworkLocation;

    /*
     * Acl subscription
     */
    @JsonProperty(value = "acledSubscriptions")
    private List<String> acledSubscriptions;

    /*
     * Resources to delete
     */
    @JsonProperty(value = "resources")
    private List<DeleteVirtualNetworkOrSubnetsResource> resources;

    /**
     * Get the virtualNetworkResourceGuid property: virtual Network Resource Guid.
     *
     * @return the virtualNetworkResourceGuid value.
     */
    public String virtualNetworkResourceGuid() {
        return this.virtualNetworkResourceGuid;
    }

    /**
     * Set the virtualNetworkResourceGuid property: virtual Network Resource Guid.
     *
     * @param virtualNetworkResourceGuid the virtualNetworkResourceGuid value to set.
     * @return the DeleteVirtualNetworkOrSubnetsParameters object itself.
     */
    public DeleteVirtualNetworkOrSubnetsParameters withVirtualNetworkResourceGuid(String virtualNetworkResourceGuid) {
        this.virtualNetworkResourceGuid = virtualNetworkResourceGuid;
        return this;
    }

    /**
     * Get the virtualNetworkLocation property: virtual Network Location.
     *
     * @return the virtualNetworkLocation value.
     */
    public String virtualNetworkLocation() {
        return this.virtualNetworkLocation;
    }

    /**
     * Set the virtualNetworkLocation property: virtual Network Location.
     *
     * @param virtualNetworkLocation the virtualNetworkLocation value to set.
     * @return the DeleteVirtualNetworkOrSubnetsParameters object itself.
     */
    public DeleteVirtualNetworkOrSubnetsParameters withVirtualNetworkLocation(String virtualNetworkLocation) {
        this.virtualNetworkLocation = virtualNetworkLocation;
        return this;
    }

    /**
     * Get the acledSubscriptions property: Acl subscription.
     *
     * @return the acledSubscriptions value.
     */
    public List<String> acledSubscriptions() {
        return this.acledSubscriptions;
    }

    /**
     * Set the acledSubscriptions property: Acl subscription.
     *
     * @param acledSubscriptions the acledSubscriptions value to set.
     * @return the DeleteVirtualNetworkOrSubnetsParameters object itself.
     */
    public DeleteVirtualNetworkOrSubnetsParameters withAcledSubscriptions(List<String> acledSubscriptions) {
        this.acledSubscriptions = acledSubscriptions;
        return this;
    }

    /**
     * Get the resources property: Resources to delete.
     *
     * @return the resources value.
     */
    public List<DeleteVirtualNetworkOrSubnetsResource> resources() {
        return this.resources;
    }

    /**
     * Set the resources property: Resources to delete.
     *
     * @param resources the resources value to set.
     * @return the DeleteVirtualNetworkOrSubnetsParameters object itself.
     */
    public DeleteVirtualNetworkOrSubnetsParameters withResources(
        List<DeleteVirtualNetworkOrSubnetsResource> resources) {
        this.resources = resources;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resources() != null) {
            resources().forEach(e -> e.validate());
        }
    }
}
