/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.storage.v2019_08_01_preview.implementation;

import java.util.List;
import com.microsoft.azure.management.storage.v2019_08_01_preview.PermissionScope;
import com.microsoft.azure.management.storage.v2019_08_01_preview.SshPublicKey;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.ProxyResource;

/**
 * The local user associated with the storage accounts.
 */
@JsonFlatten
public class LocalUserInner extends ProxyResource {
    /**
     * The permission scopes of the local user.
     */
    @JsonProperty(value = "properties.permissionScopes")
    private List<PermissionScope> permissionScopes;

    /**
     * Optional, local user home directory.
     */
    @JsonProperty(value = "properties.homeDirectory")
    private String homeDirectory;

    /**
     * The sshAuthorizedKeys property.
     */
    @JsonProperty(value = "properties.sshAuthorizedKeys")
    private List<SshPublicKey> sshAuthorizedKeys;

    /**
     * Auto generated by the server for SMB.
     */
    @JsonProperty(value = "properties.sid", access = JsonProperty.Access.WRITE_ONLY)
    private String sid;

    /**
     * The sharedKey property.
     */
    @JsonProperty(value = "properties.sharedKey")
    private String sharedKey;

    /**
     * Indicates whether shared key exists.
     */
    @JsonProperty(value = "properties.hasSharedKey", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean hasSharedKey;

    /**
     * Indicates whether ssh key exists.
     */
    @JsonProperty(value = "properties.hasSshKey", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean hasSshKey;

    /**
     * Get the permission scopes of the local user.
     *
     * @return the permissionScopes value
     */
    public List<PermissionScope> permissionScopes() {
        return this.permissionScopes;
    }

    /**
     * Set the permission scopes of the local user.
     *
     * @param permissionScopes the permissionScopes value to set
     * @return the LocalUserInner object itself.
     */
    public LocalUserInner withPermissionScopes(List<PermissionScope> permissionScopes) {
        this.permissionScopes = permissionScopes;
        return this;
    }

    /**
     * Get optional, local user home directory.
     *
     * @return the homeDirectory value
     */
    public String homeDirectory() {
        return this.homeDirectory;
    }

    /**
     * Set optional, local user home directory.
     *
     * @param homeDirectory the homeDirectory value to set
     * @return the LocalUserInner object itself.
     */
    public LocalUserInner withHomeDirectory(String homeDirectory) {
        this.homeDirectory = homeDirectory;
        return this;
    }

    /**
     * Get the sshAuthorizedKeys value.
     *
     * @return the sshAuthorizedKeys value
     */
    public List<SshPublicKey> sshAuthorizedKeys() {
        return this.sshAuthorizedKeys;
    }

    /**
     * Set the sshAuthorizedKeys value.
     *
     * @param sshAuthorizedKeys the sshAuthorizedKeys value to set
     * @return the LocalUserInner object itself.
     */
    public LocalUserInner withSshAuthorizedKeys(List<SshPublicKey> sshAuthorizedKeys) {
        this.sshAuthorizedKeys = sshAuthorizedKeys;
        return this;
    }

    /**
     * Get auto generated by the server for SMB.
     *
     * @return the sid value
     */
    public String sid() {
        return this.sid;
    }

    /**
     * Get the sharedKey value.
     *
     * @return the sharedKey value
     */
    public String sharedKey() {
        return this.sharedKey;
    }

    /**
     * Set the sharedKey value.
     *
     * @param sharedKey the sharedKey value to set
     * @return the LocalUserInner object itself.
     */
    public LocalUserInner withSharedKey(String sharedKey) {
        this.sharedKey = sharedKey;
        return this;
    }

    /**
     * Get indicates whether shared key exists.
     *
     * @return the hasSharedKey value
     */
    public Boolean hasSharedKey() {
        return this.hasSharedKey;
    }

    /**
     * Get indicates whether ssh key exists.
     *
     * @return the hasSshKey value
     */
    public Boolean hasSshKey() {
        return this.hasSshKey;
    }

}
