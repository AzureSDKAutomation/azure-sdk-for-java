/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.storage.v2019_08_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.storage.v2019_08_01_preview.LocalUsers;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import java.util.List;
import com.microsoft.azure.management.storage.v2019_08_01_preview.LocalUserKeys;
import com.microsoft.azure.management.storage.v2019_08_01_preview.LocalUser;

class LocalUsersImpl extends WrapperImpl<LocalUsersInner> implements LocalUsers {
    private final StorageManager manager;

    LocalUsersImpl(StorageManager manager) {
        super(manager.inner().localUsers());
        this.manager = manager;
    }

    public StorageManager manager() {
        return this.manager;
    }

    @Override
    public LocalUserImpl define(String name) {
        return wrapModel(name);
    }

    private LocalUserImpl wrapModel(LocalUserInner inner) {
        return  new LocalUserImpl(inner, manager());
    }

    private LocalUserImpl wrapModel(String name) {
        return new LocalUserImpl(name, this.manager());
    }

    @Override
    public Observable<LocalUserKeys> listKeysAsync(String resourceGroupName, String accountName, String username) {
        LocalUsersInner client = this.inner();
        return client.listKeysAsync(resourceGroupName, accountName, username)
        .map(new Func1<LocalUserKeysInner, LocalUserKeys>() {
            @Override
            public LocalUserKeys call(LocalUserKeysInner inner) {
                return new LocalUserKeysImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<LocalUser> listAsync(String resourceGroupName, String accountName) {
        LocalUsersInner client = this.inner();
        return client.listAsync(resourceGroupName, accountName)
        .flatMap(new Func1<List<LocalUserInner>, Observable<LocalUserInner>>() {
            @Override
            public Observable<LocalUserInner> call(List<LocalUserInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<LocalUserInner, LocalUser>() {
            @Override
            public LocalUser call(LocalUserInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<LocalUser> getAsync(String resourceGroupName, String accountName, String username) {
        LocalUsersInner client = this.inner();
        return client.getAsync(resourceGroupName, accountName, username)
        .flatMap(new Func1<LocalUserInner, Observable<LocalUser>>() {
            @Override
            public Observable<LocalUser> call(LocalUserInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((LocalUser)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String accountName, String username) {
        LocalUsersInner client = this.inner();
        return client.deleteAsync(resourceGroupName, accountName, username).toCompletable();
    }

}
