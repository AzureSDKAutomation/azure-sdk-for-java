/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.storage.v2019_08_01_preview.implementation;

import com.microsoft.azure.management.storage.v2019_08_01_preview.LocalUser;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import java.util.List;
import com.microsoft.azure.management.storage.v2019_08_01_preview.PermissionScope;
import com.microsoft.azure.management.storage.v2019_08_01_preview.SshPublicKey;

class LocalUserImpl extends CreatableUpdatableImpl<LocalUser, LocalUserInner, LocalUserImpl> implements LocalUser, LocalUser.Definition, LocalUser.Update {
    private final StorageManager manager;
    private String resourceGroupName;
    private String accountName;
    private String username;

    LocalUserImpl(String name, StorageManager manager) {
        super(name, new LocalUserInner());
        this.manager = manager;
        // Set resource name
        this.username = name;
        //
    }

    LocalUserImpl(LocalUserInner inner, StorageManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.username = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.accountName = IdParsingUtils.getValueFromIdByName(inner.id(), "storageAccounts");
        this.username = IdParsingUtils.getValueFromIdByName(inner.id(), "localUsers");
        //
    }

    @Override
    public StorageManager manager() {
        return this.manager;
    }

    @Override
    public Observable<LocalUser> createResourceAsync() {
        LocalUsersInner client = this.manager().inner().localUsers();
        return client.createOrUpdateAsync(this.resourceGroupName, this.accountName, this.username, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<LocalUser> updateResourceAsync() {
        LocalUsersInner client = this.manager().inner().localUsers();
        return client.createOrUpdateAsync(this.resourceGroupName, this.accountName, this.username, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<LocalUserInner> getInnerAsync() {
        LocalUsersInner client = this.manager().inner().localUsers();
        return client.getAsync(this.resourceGroupName, this.accountName, this.username);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public Boolean hasSharedKey() {
        return this.inner().hasSharedKey();
    }

    @Override
    public Boolean hasSshKey() {
        return this.inner().hasSshKey();
    }

    @Override
    public String homeDirectory() {
        return this.inner().homeDirectory();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public List<PermissionScope> permissionScopes() {
        return this.inner().permissionScopes();
    }

    @Override
    public String sharedKey() {
        return this.inner().sharedKey();
    }

    @Override
    public String sid() {
        return this.inner().sid();
    }

    @Override
    public List<SshPublicKey> sshAuthorizedKeys() {
        return this.inner().sshAuthorizedKeys();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public LocalUserImpl withExistingStorageAccount(String resourceGroupName, String accountName) {
        this.resourceGroupName = resourceGroupName;
        this.accountName = accountName;
        return this;
    }

    @Override
    public LocalUserImpl withHomeDirectory(String homeDirectory) {
        this.inner().withHomeDirectory(homeDirectory);
        return this;
    }

    @Override
    public LocalUserImpl withPermissionScopes(List<PermissionScope> permissionScopes) {
        this.inner().withPermissionScopes(permissionScopes);
        return this;
    }

    @Override
    public LocalUserImpl withSharedKey(String sharedKey) {
        this.inner().withSharedKey(sharedKey);
        return this;
    }

    @Override
    public LocalUserImpl withSshAuthorizedKeys(List<SshPublicKey> sshAuthorizedKeys) {
        this.inner().withSshAuthorizedKeys(sshAuthorizedKeys);
        return this;
    }

}
