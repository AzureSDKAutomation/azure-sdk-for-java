// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Device Secrets. */
@Fluent
public final class DeviceSecrets extends ArmBaseModel {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DeviceSecrets.class);

    /*
     * Keyvault Id of HcsDataVolumeBitLockerExternalKey
     */
    @JsonProperty(value = "hcsDataVolumeBitLockerExternalKey")
    private Secret hcsDataVolumeBitLockerExternalKey;

    /*
     * Keyvault Id of HcsInternalVolumeBitLockerExternalKey
     */
    @JsonProperty(value = "hcsInternalVolumeBitLockerExternalKey")
    private Secret hcsInternalVolumeBitLockerExternalKey;

    /*
     * Keyvault Id of SystemVolumeBitLockerRecoveryKey
     */
    @JsonProperty(value = "systemVolumeBitLockerRecoveryKey")
    private Secret systemVolumeBitLockerRecoveryKey;

    /*
     * Keyvault Id of SEDEncryptionExternalKeyId
     */
    @JsonProperty(value = "sedEncryptionExternalKeyId")
    private Secret sedEncryptionExternalKeyId;

    /*
     * Keyvault Id of SEDEncryptionExternalKey
     */
    @JsonProperty(value = "sedEncryptionExternalKey")
    private Secret sedEncryptionExternalKey;

    /*
     * Keyvault Id of BMCDefaultUserPassword
     */
    @JsonProperty(value = "bmcDefaultUserPassword")
    private Secret bmcDefaultUserPassword;

    /*
     * Keyvault Id of RotateKeyForDataVolumeBitlocker
     */
    @JsonProperty(value = "rotateKeyForDataVolumeBitlocker")
    private Secret rotateKeyForDataVolumeBitlocker;

    /*
     * Keyvault Id of RotateKeysForSedDrivesSerialized
     */
    @JsonProperty(value = "rotateKeysForSedDrivesSerialized")
    private Secret rotateKeysForSedDrivesSerialized;

    /**
     * Get the hcsDataVolumeBitLockerExternalKey property: Keyvault Id of HcsDataVolumeBitLockerExternalKey.
     *
     * @return the hcsDataVolumeBitLockerExternalKey value.
     */
    public Secret hcsDataVolumeBitLockerExternalKey() {
        return this.hcsDataVolumeBitLockerExternalKey;
    }

    /**
     * Set the hcsDataVolumeBitLockerExternalKey property: Keyvault Id of HcsDataVolumeBitLockerExternalKey.
     *
     * @param hcsDataVolumeBitLockerExternalKey the hcsDataVolumeBitLockerExternalKey value to set.
     * @return the DeviceSecrets object itself.
     */
    public DeviceSecrets withHcsDataVolumeBitLockerExternalKey(Secret hcsDataVolumeBitLockerExternalKey) {
        this.hcsDataVolumeBitLockerExternalKey = hcsDataVolumeBitLockerExternalKey;
        return this;
    }

    /**
     * Get the hcsInternalVolumeBitLockerExternalKey property: Keyvault Id of HcsInternalVolumeBitLockerExternalKey.
     *
     * @return the hcsInternalVolumeBitLockerExternalKey value.
     */
    public Secret hcsInternalVolumeBitLockerExternalKey() {
        return this.hcsInternalVolumeBitLockerExternalKey;
    }

    /**
     * Set the hcsInternalVolumeBitLockerExternalKey property: Keyvault Id of HcsInternalVolumeBitLockerExternalKey.
     *
     * @param hcsInternalVolumeBitLockerExternalKey the hcsInternalVolumeBitLockerExternalKey value to set.
     * @return the DeviceSecrets object itself.
     */
    public DeviceSecrets withHcsInternalVolumeBitLockerExternalKey(Secret hcsInternalVolumeBitLockerExternalKey) {
        this.hcsInternalVolumeBitLockerExternalKey = hcsInternalVolumeBitLockerExternalKey;
        return this;
    }

    /**
     * Get the systemVolumeBitLockerRecoveryKey property: Keyvault Id of SystemVolumeBitLockerRecoveryKey.
     *
     * @return the systemVolumeBitLockerRecoveryKey value.
     */
    public Secret systemVolumeBitLockerRecoveryKey() {
        return this.systemVolumeBitLockerRecoveryKey;
    }

    /**
     * Set the systemVolumeBitLockerRecoveryKey property: Keyvault Id of SystemVolumeBitLockerRecoveryKey.
     *
     * @param systemVolumeBitLockerRecoveryKey the systemVolumeBitLockerRecoveryKey value to set.
     * @return the DeviceSecrets object itself.
     */
    public DeviceSecrets withSystemVolumeBitLockerRecoveryKey(Secret systemVolumeBitLockerRecoveryKey) {
        this.systemVolumeBitLockerRecoveryKey = systemVolumeBitLockerRecoveryKey;
        return this;
    }

    /**
     * Get the sedEncryptionExternalKeyId property: Keyvault Id of SEDEncryptionExternalKeyId.
     *
     * @return the sedEncryptionExternalKeyId value.
     */
    public Secret sedEncryptionExternalKeyId() {
        return this.sedEncryptionExternalKeyId;
    }

    /**
     * Set the sedEncryptionExternalKeyId property: Keyvault Id of SEDEncryptionExternalKeyId.
     *
     * @param sedEncryptionExternalKeyId the sedEncryptionExternalKeyId value to set.
     * @return the DeviceSecrets object itself.
     */
    public DeviceSecrets withSedEncryptionExternalKeyId(Secret sedEncryptionExternalKeyId) {
        this.sedEncryptionExternalKeyId = sedEncryptionExternalKeyId;
        return this;
    }

    /**
     * Get the sedEncryptionExternalKey property: Keyvault Id of SEDEncryptionExternalKey.
     *
     * @return the sedEncryptionExternalKey value.
     */
    public Secret sedEncryptionExternalKey() {
        return this.sedEncryptionExternalKey;
    }

    /**
     * Set the sedEncryptionExternalKey property: Keyvault Id of SEDEncryptionExternalKey.
     *
     * @param sedEncryptionExternalKey the sedEncryptionExternalKey value to set.
     * @return the DeviceSecrets object itself.
     */
    public DeviceSecrets withSedEncryptionExternalKey(Secret sedEncryptionExternalKey) {
        this.sedEncryptionExternalKey = sedEncryptionExternalKey;
        return this;
    }

    /**
     * Get the bmcDefaultUserPassword property: Keyvault Id of BMCDefaultUserPassword.
     *
     * @return the bmcDefaultUserPassword value.
     */
    public Secret bmcDefaultUserPassword() {
        return this.bmcDefaultUserPassword;
    }

    /**
     * Set the bmcDefaultUserPassword property: Keyvault Id of BMCDefaultUserPassword.
     *
     * @param bmcDefaultUserPassword the bmcDefaultUserPassword value to set.
     * @return the DeviceSecrets object itself.
     */
    public DeviceSecrets withBmcDefaultUserPassword(Secret bmcDefaultUserPassword) {
        this.bmcDefaultUserPassword = bmcDefaultUserPassword;
        return this;
    }

    /**
     * Get the rotateKeyForDataVolumeBitlocker property: Keyvault Id of RotateKeyForDataVolumeBitlocker.
     *
     * @return the rotateKeyForDataVolumeBitlocker value.
     */
    public Secret rotateKeyForDataVolumeBitlocker() {
        return this.rotateKeyForDataVolumeBitlocker;
    }

    /**
     * Set the rotateKeyForDataVolumeBitlocker property: Keyvault Id of RotateKeyForDataVolumeBitlocker.
     *
     * @param rotateKeyForDataVolumeBitlocker the rotateKeyForDataVolumeBitlocker value to set.
     * @return the DeviceSecrets object itself.
     */
    public DeviceSecrets withRotateKeyForDataVolumeBitlocker(Secret rotateKeyForDataVolumeBitlocker) {
        this.rotateKeyForDataVolumeBitlocker = rotateKeyForDataVolumeBitlocker;
        return this;
    }

    /**
     * Get the rotateKeysForSedDrivesSerialized property: Keyvault Id of RotateKeysForSedDrivesSerialized.
     *
     * @return the rotateKeysForSedDrivesSerialized value.
     */
    public Secret rotateKeysForSedDrivesSerialized() {
        return this.rotateKeysForSedDrivesSerialized;
    }

    /**
     * Set the rotateKeysForSedDrivesSerialized property: Keyvault Id of RotateKeysForSedDrivesSerialized.
     *
     * @param rotateKeysForSedDrivesSerialized the rotateKeysForSedDrivesSerialized value to set.
     * @return the DeviceSecrets object itself.
     */
    public DeviceSecrets withRotateKeysForSedDrivesSerialized(Secret rotateKeysForSedDrivesSerialized) {
        this.rotateKeysForSedDrivesSerialized = rotateKeysForSedDrivesSerialized;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (hcsDataVolumeBitLockerExternalKey() != null) {
            hcsDataVolumeBitLockerExternalKey().validate();
        }
        if (hcsInternalVolumeBitLockerExternalKey() != null) {
            hcsInternalVolumeBitLockerExternalKey().validate();
        }
        if (systemVolumeBitLockerRecoveryKey() != null) {
            systemVolumeBitLockerRecoveryKey().validate();
        }
        if (sedEncryptionExternalKeyId() != null) {
            sedEncryptionExternalKeyId().validate();
        }
        if (sedEncryptionExternalKey() != null) {
            sedEncryptionExternalKey().validate();
        }
        if (bmcDefaultUserPassword() != null) {
            bmcDefaultUserPassword().validate();
        }
        if (rotateKeyForDataVolumeBitlocker() != null) {
            rotateKeyForDataVolumeBitlocker().validate();
        }
        if (rotateKeysForSedDrivesSerialized() != null) {
            rotateKeysForSedDrivesSerialized().validate();
        }
    }
}
