// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.databoxedge.models.ArmBaseModel;
import com.azure.resourcemanager.databoxedge.models.MetricConfiguration;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The metric setting details for the role. */
@JsonFlatten
@Fluent
public class MonitoringMetricConfigurationInner extends ArmBaseModel {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(MonitoringMetricConfigurationInner.class);

    /*
     * The metrics configuration details
     */
    @JsonProperty(value = "properties.metricConfigurations", required = true)
    private List<MetricConfiguration> metricConfigurations;

    /**
     * Get the metricConfigurations property: The metrics configuration details.
     *
     * @return the metricConfigurations value.
     */
    public List<MetricConfiguration> metricConfigurations() {
        return this.metricConfigurations;
    }

    /**
     * Set the metricConfigurations property: The metrics configuration details.
     *
     * @param metricConfigurations the metricConfigurations value to set.
     * @return the MonitoringMetricConfigurationInner object itself.
     */
    public MonitoringMetricConfigurationInner withMetricConfigurations(List<MetricConfiguration> metricConfigurations) {
        this.metricConfigurations = metricConfigurations;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (metricConfigurations() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property metricConfigurations in model MonitoringMetricConfigurationInner"));
        } else {
            metricConfigurations().forEach(e -> e.validate());
        }
    }
}
