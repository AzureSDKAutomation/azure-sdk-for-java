/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.resources.v2020_10_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.resources.v2020_10_01.ProviderResourceTypes;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.resources.v2020_10_01.ProviderResourceType;

class ProviderResourceTypesImpl extends WrapperImpl<ProviderResourceTypesInner> implements ProviderResourceTypes {
    private final ResourcesManager manager;

    ProviderResourceTypesImpl(ResourcesManager manager) {
        super(manager.inner().providerResourceTypes());
        this.manager = manager;
    }

    public ResourcesManager manager() {
        return this.manager;
    }

    private ProviderResourceTypeImpl wrapModel(ProviderResourceTypeInner inner) {
        return  new ProviderResourceTypeImpl(inner, manager());
    }

    @Override
    public Observable<ProviderResourceType> listAsync(String resourceProviderNamespace) {
        ProviderResourceTypesInner client = this.inner();
        return client.listAsync(resourceProviderNamespace)
        .flatMap(new Func1<Page<ProviderResourceTypeInner>, Observable<ProviderResourceTypeInner>>() {
            @Override
            public Observable<ProviderResourceTypeInner> call(Page<ProviderResourceTypeInner> innerPage) {
                return Observable.from(innerPage.items());
            }
        })
        .map(new Func1<ProviderResourceTypeInner, ProviderResourceType>() {
            @Override
            public ProviderResourceType call(ProviderResourceTypeInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
