/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.resources.v2020_10_01.implementation;

import com.microsoft.azure.management.resources.v2020_10_01.ProviderResourceType;
import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import rx.Observable;
import java.util.List;
import com.microsoft.azure.management.resources.v2020_10_01.Alias;
import com.microsoft.azure.management.resources.v2020_10_01.ApiProfile;
import com.microsoft.azure.management.resources.v2020_10_01.ProviderExtendedLocation;
import java.util.Map;

class ProviderResourceTypeImpl extends WrapperImpl<ProviderResourceTypeInner> implements ProviderResourceType {
    private final ResourcesManager manager;

    ProviderResourceTypeImpl(ProviderResourceTypeInner inner,  ResourcesManager manager) {
        super(inner);
        this.manager = manager;
    }

    @Override
    public ResourcesManager manager() {
        return this.manager;
    }



    @Override
    public List<Alias> aliases() {
        return this.inner().aliases();
    }

    @Override
    public List<ApiProfile> apiProfiles() {
        return this.inner().apiProfiles();
    }

    @Override
    public List<String> apiVersions() {
        return this.inner().apiVersions();
    }

    @Override
    public String capabilities() {
        return this.inner().capabilities();
    }

    @Override
    public String defaultApiVersion() {
        return this.inner().defaultApiVersion();
    }

    @Override
    public List<ProviderExtendedLocation> locationMappings() {
        return this.inner().locationMappings();
    }

    @Override
    public List<String> locations() {
        return this.inner().locations();
    }

    @Override
    public Map<String, String> properties() {
        return this.inner().properties();
    }

    @Override
    public String resourceType() {
        return this.inner().resourceType();
    }

}
