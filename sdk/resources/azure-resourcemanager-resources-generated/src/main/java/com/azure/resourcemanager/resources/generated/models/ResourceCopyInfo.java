// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resources.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Parameters of copy resources. */
@Fluent
public final class ResourceCopyInfo {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ResourceCopyInfo.class);

    /*
     * Target location for the move.
     */
    @JsonProperty(value = "targetLocation", required = true)
    private String targetLocation;

    /*
     * Array of resources to be moved.
     */
    @JsonProperty(value = "resources", required = true)
    private List<ResourceCopyResourceList> resources;

    /**
     * Get the targetLocation property: Target location for the move.
     *
     * @return the targetLocation value.
     */
    public String targetLocation() {
        return this.targetLocation;
    }

    /**
     * Set the targetLocation property: Target location for the move.
     *
     * @param targetLocation the targetLocation value to set.
     * @return the ResourceCopyInfo object itself.
     */
    public ResourceCopyInfo withTargetLocation(String targetLocation) {
        this.targetLocation = targetLocation;
        return this;
    }

    /**
     * Get the resources property: Array of resources to be moved.
     *
     * @return the resources value.
     */
    public List<ResourceCopyResourceList> resources() {
        return this.resources;
    }

    /**
     * Set the resources property: Array of resources to be moved.
     *
     * @param resources the resources value to set.
     * @return the ResourceCopyInfo object itself.
     */
    public ResourceCopyInfo withResources(List<ResourceCopyResourceList> resources) {
        this.resources = resources;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (targetLocation() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property targetLocation in model ResourceCopyInfo"));
        }
        if (resources() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property resources in model ResourceCopyInfo"));
        } else {
            resources().forEach(e -> e.validate());
        }
    }
}
