// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resources.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.resources.generated.models.ResourceCopyStatusResourcesItem;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The ResourceCopyStatus model. */
@Fluent
public final class ResourceCopyStatusInner {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ResourceCopyStatusInner.class);

    /*
     * Resource copy token.
     */
    @JsonProperty(value = "token")
    private String token;

    /*
     * Resources with resource copy status.
     */
    @JsonProperty(value = "resources")
    private List<ResourceCopyStatusResourcesItem> resources;

    /**
     * Get the token property: Resource copy token.
     *
     * @return the token value.
     */
    public String token() {
        return this.token;
    }

    /**
     * Set the token property: Resource copy token.
     *
     * @param token the token value to set.
     * @return the ResourceCopyStatusInner object itself.
     */
    public ResourceCopyStatusInner withToken(String token) {
        this.token = token;
        return this;
    }

    /**
     * Get the resources property: Resources with resource copy status.
     *
     * @return the resources value.
     */
    public List<ResourceCopyStatusResourcesItem> resources() {
        return this.resources;
    }

    /**
     * Set the resources property: Resources with resource copy status.
     *
     * @param resources the resources value to set.
     * @return the ResourceCopyStatusInner object itself.
     */
    public ResourceCopyStatusInner withResources(List<ResourceCopyStatusResourcesItem> resources) {
        this.resources = resources;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resources() != null) {
            resources().forEach(e -> e.validate());
        }
    }
}
