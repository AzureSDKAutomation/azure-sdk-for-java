// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** Worker App container Custom scaling rule. */
@Fluent
public final class WorkerAppHttpScaleRule {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(WorkerAppHttpScaleRule.class);

    /*
     * Metadata properties to describe http scale rule.
     */
    @JsonProperty(value = "metadata")
    private Map<String, String> metadata;

    /*
     * Authentication secrets for the custom scale rule.
     */
    @JsonProperty(value = "auth")
    private List<WorkerAppScaleRuleAuth> auth;

    /**
     * Get the metadata property: Metadata properties to describe http scale rule.
     *
     * @return the metadata value.
     */
    public Map<String, String> metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: Metadata properties to describe http scale rule.
     *
     * @param metadata the metadata value to set.
     * @return the WorkerAppHttpScaleRule object itself.
     */
    public WorkerAppHttpScaleRule withMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Get the auth property: Authentication secrets for the custom scale rule.
     *
     * @return the auth value.
     */
    public List<WorkerAppScaleRuleAuth> auth() {
        return this.auth;
    }

    /**
     * Set the auth property: Authentication secrets for the custom scale rule.
     *
     * @param auth the auth value to set.
     * @return the WorkerAppHttpScaleRule object itself.
     */
    public WorkerAppHttpScaleRule withAuth(List<WorkerAppScaleRuleAuth> auth) {
        this.auth = auth;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (auth() != null) {
            auth().forEach(e -> e.validate());
        }
    }
}
