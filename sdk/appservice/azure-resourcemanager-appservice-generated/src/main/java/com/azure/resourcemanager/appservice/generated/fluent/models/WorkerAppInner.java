// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appservice.generated.models.WorkerAppConfiguration;
import com.azure.resourcemanager.appservice.generated.models.WorkerAppProvisioningState;
import com.azure.resourcemanager.appservice.generated.models.WorkerAppTemplate;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** Worker App. */
@JsonFlatten
@Fluent
public class WorkerAppInner extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(WorkerAppInner.class);

    /*
     * Provisioning state of the Worker App.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private WorkerAppProvisioningState provisioningState;

    /*
     * Resource ID of the Worker App's KubeEnvironment.
     */
    @JsonProperty(value = "properties.kubeEnvironmentId")
    private String kubeEnvironmentId;

    /*
     * Resource ID of the latest revision of the Worker App.
     */
    @JsonProperty(value = "properties.latestRevisionId", access = JsonProperty.Access.WRITE_ONLY)
    private String latestRevisionId;

    /*
     * Fully Qualified Domain Name of the latest revision of the Worker App.
     */
    @JsonProperty(value = "properties.latestRevisionFqdn", access = JsonProperty.Access.WRITE_ONLY)
    private String latestRevisionFqdn;

    /*
     * Non versioned Worker App configuration properties.
     */
    @JsonProperty(value = "properties.configuration")
    private WorkerAppConfiguration configuration;

    /*
     * Worker App versioned application definition.
     */
    @JsonProperty(value = "properties.template")
    private WorkerAppTemplate template;

    /*
     * Kind of resource.
     */
    @JsonProperty(value = "kind")
    private String kind;

    /*
     * Metadata pertaining to creation and last modification of the resource.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Get the provisioningState property: Provisioning state of the Worker App.
     *
     * @return the provisioningState value.
     */
    public WorkerAppProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the kubeEnvironmentId property: Resource ID of the Worker App's KubeEnvironment.
     *
     * @return the kubeEnvironmentId value.
     */
    public String kubeEnvironmentId() {
        return this.kubeEnvironmentId;
    }

    /**
     * Set the kubeEnvironmentId property: Resource ID of the Worker App's KubeEnvironment.
     *
     * @param kubeEnvironmentId the kubeEnvironmentId value to set.
     * @return the WorkerAppInner object itself.
     */
    public WorkerAppInner withKubeEnvironmentId(String kubeEnvironmentId) {
        this.kubeEnvironmentId = kubeEnvironmentId;
        return this;
    }

    /**
     * Get the latestRevisionId property: Resource ID of the latest revision of the Worker App.
     *
     * @return the latestRevisionId value.
     */
    public String latestRevisionId() {
        return this.latestRevisionId;
    }

    /**
     * Get the latestRevisionFqdn property: Fully Qualified Domain Name of the latest revision of the Worker App.
     *
     * @return the latestRevisionFqdn value.
     */
    public String latestRevisionFqdn() {
        return this.latestRevisionFqdn;
    }

    /**
     * Get the configuration property: Non versioned Worker App configuration properties.
     *
     * @return the configuration value.
     */
    public WorkerAppConfiguration configuration() {
        return this.configuration;
    }

    /**
     * Set the configuration property: Non versioned Worker App configuration properties.
     *
     * @param configuration the configuration value to set.
     * @return the WorkerAppInner object itself.
     */
    public WorkerAppInner withConfiguration(WorkerAppConfiguration configuration) {
        this.configuration = configuration;
        return this;
    }

    /**
     * Get the template property: Worker App versioned application definition.
     *
     * @return the template value.
     */
    public WorkerAppTemplate template() {
        return this.template;
    }

    /**
     * Set the template property: Worker App versioned application definition.
     *
     * @param template the template value to set.
     * @return the WorkerAppInner object itself.
     */
    public WorkerAppInner withTemplate(WorkerAppTemplate template) {
        this.template = template;
        return this;
    }

    /**
     * Get the kind property: Kind of resource.
     *
     * @return the kind value.
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Set the kind property: Kind of resource.
     *
     * @param kind the kind value to set.
     * @return the WorkerAppInner object itself.
     */
    public WorkerAppInner withKind(String kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the systemData property: Metadata pertaining to creation and last modification of the resource.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /** {@inheritDoc} */
    @Override
    public WorkerAppInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public WorkerAppInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (configuration() != null) {
            configuration().validate();
        }
        if (template() != null) {
            template().validate();
        }
    }
}
