// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appservice.generated.fluent.WorkerAppsRevisionsClient;
import com.azure.resourcemanager.appservice.generated.fluent.models.WorkerAppRevisionInner;
import com.azure.resourcemanager.appservice.generated.models.DefaultErrorResponseErrorException;
import com.azure.resourcemanager.appservice.generated.models.WorkerAppRevisionCollection;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in WorkerAppsRevisionsClient. */
public final class WorkerAppsRevisionsClientImpl implements WorkerAppsRevisionsClient {
    private final ClientLogger logger = new ClientLogger(WorkerAppsRevisionsClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final WorkerAppsRevisionsService service;

    /** The service client containing this operation class. */
    private final WebSiteManagementClientImpl client;

    /**
     * Initializes an instance of WorkerAppsRevisionsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    WorkerAppsRevisionsClientImpl(WebSiteManagementClientImpl client) {
        this.service =
            RestProxy.create(WorkerAppsRevisionsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for WebSiteManagementClientWorkerAppsRevisions to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "WebSiteManagementCli")
    private interface WorkerAppsRevisionsService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/workerApps"
                + "/{workerAppName}/revisions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseErrorException.class)
        Mono<Response<WorkerAppRevisionCollection>> listRevisions(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("workerAppName") String workerAppName,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/workerApps"
                + "/{workerAppName}/revisions/{name}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseErrorException.class)
        Mono<Response<WorkerAppRevisionInner>> getRevision(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("workerAppName") String workerAppName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/workerApps"
                + "/{workerAppName}/revisions/{name}/activate")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseErrorException.class)
        Mono<Response<Void>> activateRevision(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("workerAppName") String workerAppName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/workerApps"
                + "/{workerAppName}/revisions/{name}/deactivate")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseErrorException.class)
        Mono<Response<Void>> deactivateRevision(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("workerAppName") String workerAppName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/workerApps"
                + "/{workerAppName}/revisions/{name}/restart")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseErrorException.class)
        Mono<Response<Void>> restartRevision(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("workerAppName") String workerAppName,
            @PathParam("name") String name,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseErrorException.class)
        Mono<Response<WorkerAppRevisionCollection>> listRevisionsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Description for Get the Revisions for a given Worker App.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param workerAppName Name of the Worker App for which Revisions are needed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return worker App Revisions collection ARM resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<WorkerAppRevisionInner>> listRevisionsSinglePageAsync(
        String resourceGroupName, String workerAppName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workerAppName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workerAppName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listRevisions(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            workerAppName,
                            this.client.getSubscriptionId(),
                            this.client.getApiVersion(),
                            accept,
                            context))
            .<PagedResponse<WorkerAppRevisionInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Description for Get the Revisions for a given Worker App.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param workerAppName Name of the Worker App for which Revisions are needed.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return worker App Revisions collection ARM resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<WorkerAppRevisionInner>> listRevisionsSinglePageAsync(
        String resourceGroupName, String workerAppName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workerAppName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workerAppName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listRevisions(
                this.client.getEndpoint(),
                resourceGroupName,
                workerAppName,
                this.client.getSubscriptionId(),
                this.client.getApiVersion(),
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Description for Get the Revisions for a given Worker App.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param workerAppName Name of the Worker App for which Revisions are needed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return worker App Revisions collection ARM resource.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<WorkerAppRevisionInner> listRevisionsAsync(String resourceGroupName, String workerAppName) {
        return new PagedFlux<>(
            () -> listRevisionsSinglePageAsync(resourceGroupName, workerAppName),
            nextLink -> listRevisionsNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Get the Revisions for a given Worker App.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param workerAppName Name of the Worker App for which Revisions are needed.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return worker App Revisions collection ARM resource.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<WorkerAppRevisionInner> listRevisionsAsync(
        String resourceGroupName, String workerAppName, Context context) {
        return new PagedFlux<>(
            () -> listRevisionsSinglePageAsync(resourceGroupName, workerAppName, context),
            nextLink -> listRevisionsNextSinglePageAsync(nextLink, context));
    }

    /**
     * Description for Get the Revisions for a given Worker App.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param workerAppName Name of the Worker App for which Revisions are needed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return worker App Revisions collection ARM resource.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<WorkerAppRevisionInner> listRevisions(String resourceGroupName, String workerAppName) {
        return new PagedIterable<>(listRevisionsAsync(resourceGroupName, workerAppName));
    }

    /**
     * Description for Get the Revisions for a given Worker App.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param workerAppName Name of the Worker App for which Revisions are needed.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return worker App Revisions collection ARM resource.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<WorkerAppRevisionInner> listRevisions(
        String resourceGroupName, String workerAppName, Context context) {
        return new PagedIterable<>(listRevisionsAsync(resourceGroupName, workerAppName, context));
    }

    /**
     * Description for Get a revision of a Worker App.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param workerAppName Name of the Worker App.
     * @param name Name of the Worker App Revision.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return worker App Revision.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<WorkerAppRevisionInner>> getRevisionWithResponseAsync(
        String resourceGroupName, String workerAppName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workerAppName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workerAppName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getRevision(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            workerAppName,
                            name,
                            this.client.getSubscriptionId(),
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Description for Get a revision of a Worker App.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param workerAppName Name of the Worker App.
     * @param name Name of the Worker App Revision.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return worker App Revision.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<WorkerAppRevisionInner>> getRevisionWithResponseAsync(
        String resourceGroupName, String workerAppName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workerAppName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workerAppName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getRevision(
                this.client.getEndpoint(),
                resourceGroupName,
                workerAppName,
                name,
                this.client.getSubscriptionId(),
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Description for Get a revision of a Worker App.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param workerAppName Name of the Worker App.
     * @param name Name of the Worker App Revision.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return worker App Revision.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<WorkerAppRevisionInner> getRevisionAsync(String resourceGroupName, String workerAppName, String name) {
        return getRevisionWithResponseAsync(resourceGroupName, workerAppName, name)
            .flatMap(
                (Response<WorkerAppRevisionInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Description for Get a revision of a Worker App.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param workerAppName Name of the Worker App.
     * @param name Name of the Worker App Revision.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return worker App Revision.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public WorkerAppRevisionInner getRevision(String resourceGroupName, String workerAppName, String name) {
        return getRevisionAsync(resourceGroupName, workerAppName, name).block();
    }

    /**
     * Description for Get a revision of a Worker App.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param workerAppName Name of the Worker App.
     * @param name Name of the Worker App Revision.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return worker App Revision.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<WorkerAppRevisionInner> getRevisionWithResponse(
        String resourceGroupName, String workerAppName, String name, Context context) {
        return getRevisionWithResponseAsync(resourceGroupName, workerAppName, name, context).block();
    }

    /**
     * Description for Activates a revision for a Worker App.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param workerAppName Name of the Worker App.
     * @param name Name of the Worker App Revision to activate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> activateRevisionWithResponseAsync(
        String resourceGroupName, String workerAppName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workerAppName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workerAppName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .activateRevision(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            workerAppName,
                            name,
                            this.client.getSubscriptionId(),
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Description for Activates a revision for a Worker App.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param workerAppName Name of the Worker App.
     * @param name Name of the Worker App Revision to activate.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> activateRevisionWithResponseAsync(
        String resourceGroupName, String workerAppName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workerAppName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workerAppName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .activateRevision(
                this.client.getEndpoint(),
                resourceGroupName,
                workerAppName,
                name,
                this.client.getSubscriptionId(),
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Description for Activates a revision for a Worker App.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param workerAppName Name of the Worker App.
     * @param name Name of the Worker App Revision to activate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> activateRevisionAsync(String resourceGroupName, String workerAppName, String name) {
        return activateRevisionWithResponseAsync(resourceGroupName, workerAppName, name)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Activates a revision for a Worker App.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param workerAppName Name of the Worker App.
     * @param name Name of the Worker App Revision to activate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void activateRevision(String resourceGroupName, String workerAppName, String name) {
        activateRevisionAsync(resourceGroupName, workerAppName, name).block();
    }

    /**
     * Description for Activates a revision for a Worker App.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param workerAppName Name of the Worker App.
     * @param name Name of the Worker App Revision to activate.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> activateRevisionWithResponse(
        String resourceGroupName, String workerAppName, String name, Context context) {
        return activateRevisionWithResponseAsync(resourceGroupName, workerAppName, name, context).block();
    }

    /**
     * Description for Deactivates a revision for a Worker App.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param workerAppName Name of the Worker App.
     * @param name Name of the Worker App Revision to deactivate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deactivateRevisionWithResponseAsync(
        String resourceGroupName, String workerAppName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workerAppName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workerAppName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .deactivateRevision(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            workerAppName,
                            name,
                            this.client.getSubscriptionId(),
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Description for Deactivates a revision for a Worker App.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param workerAppName Name of the Worker App.
     * @param name Name of the Worker App Revision to deactivate.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deactivateRevisionWithResponseAsync(
        String resourceGroupName, String workerAppName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workerAppName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workerAppName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .deactivateRevision(
                this.client.getEndpoint(),
                resourceGroupName,
                workerAppName,
                name,
                this.client.getSubscriptionId(),
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Description for Deactivates a revision for a Worker App.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param workerAppName Name of the Worker App.
     * @param name Name of the Worker App Revision to deactivate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deactivateRevisionAsync(String resourceGroupName, String workerAppName, String name) {
        return deactivateRevisionWithResponseAsync(resourceGroupName, workerAppName, name)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Deactivates a revision for a Worker App.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param workerAppName Name of the Worker App.
     * @param name Name of the Worker App Revision to deactivate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deactivateRevision(String resourceGroupName, String workerAppName, String name) {
        deactivateRevisionAsync(resourceGroupName, workerAppName, name).block();
    }

    /**
     * Description for Deactivates a revision for a Worker App.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param workerAppName Name of the Worker App.
     * @param name Name of the Worker App Revision to deactivate.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deactivateRevisionWithResponse(
        String resourceGroupName, String workerAppName, String name, Context context) {
        return deactivateRevisionWithResponseAsync(resourceGroupName, workerAppName, name, context).block();
    }

    /**
     * Description for Restarts a revision for a Worker App.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param workerAppName Name of the Worker App.
     * @param name Name of the Worker App Revision to restart.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> restartRevisionWithResponseAsync(
        String resourceGroupName, String workerAppName, String name) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workerAppName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workerAppName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .restartRevision(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            workerAppName,
                            name,
                            this.client.getSubscriptionId(),
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Description for Restarts a revision for a Worker App.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param workerAppName Name of the Worker App.
     * @param name Name of the Worker App Revision to restart.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> restartRevisionWithResponseAsync(
        String resourceGroupName, String workerAppName, String name, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (workerAppName == null) {
            return Mono.error(new IllegalArgumentException("Parameter workerAppName is required and cannot be null."));
        }
        if (name == null) {
            return Mono.error(new IllegalArgumentException("Parameter name is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .restartRevision(
                this.client.getEndpoint(),
                resourceGroupName,
                workerAppName,
                name,
                this.client.getSubscriptionId(),
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Description for Restarts a revision for a Worker App.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param workerAppName Name of the Worker App.
     * @param name Name of the Worker App Revision to restart.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> restartRevisionAsync(String resourceGroupName, String workerAppName, String name) {
        return restartRevisionWithResponseAsync(resourceGroupName, workerAppName, name)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Restarts a revision for a Worker App.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param workerAppName Name of the Worker App.
     * @param name Name of the Worker App Revision to restart.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void restartRevision(String resourceGroupName, String workerAppName, String name) {
        restartRevisionAsync(resourceGroupName, workerAppName, name).block();
    }

    /**
     * Description for Restarts a revision for a Worker App.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param workerAppName Name of the Worker App.
     * @param name Name of the Worker App Revision to restart.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> restartRevisionWithResponse(
        String resourceGroupName, String workerAppName, String name, Context context) {
        return restartRevisionWithResponseAsync(resourceGroupName, workerAppName, name, context).block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return worker App Revisions collection ARM resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<WorkerAppRevisionInner>> listRevisionsNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listRevisionsNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<WorkerAppRevisionInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return worker App Revisions collection ARM resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<WorkerAppRevisionInner>> listRevisionsNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listRevisionsNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
