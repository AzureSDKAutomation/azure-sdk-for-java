// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Worker App Ingress configuration. */
@Fluent
public final class WorkerAppIngress {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(WorkerAppIngress.class);

    /*
     * Hostname.
     */
    @JsonProperty(value = "fqdn", access = JsonProperty.Access.WRITE_ONLY)
    private String fqdn;

    /*
     * Bool indicating if app exposes an external http endpoint
     */
    @JsonProperty(value = "external")
    private Boolean external;

    /*
     * Target Port in containers for traffic from ingress
     */
    @JsonProperty(value = "targetPort")
    private Integer targetPort;

    /*
     * Ingress transport protocol
     */
    @JsonProperty(value = "transport")
    private WorkerAppIngressTransportMethod transport;

    /**
     * Get the fqdn property: Hostname.
     *
     * @return the fqdn value.
     */
    public String fqdn() {
        return this.fqdn;
    }

    /**
     * Get the external property: Bool indicating if app exposes an external http endpoint.
     *
     * @return the external value.
     */
    public Boolean external() {
        return this.external;
    }

    /**
     * Set the external property: Bool indicating if app exposes an external http endpoint.
     *
     * @param external the external value to set.
     * @return the WorkerAppIngress object itself.
     */
    public WorkerAppIngress withExternal(Boolean external) {
        this.external = external;
        return this;
    }

    /**
     * Get the targetPort property: Target Port in containers for traffic from ingress.
     *
     * @return the targetPort value.
     */
    public Integer targetPort() {
        return this.targetPort;
    }

    /**
     * Set the targetPort property: Target Port in containers for traffic from ingress.
     *
     * @param targetPort the targetPort value to set.
     * @return the WorkerAppIngress object itself.
     */
    public WorkerAppIngress withTargetPort(Integer targetPort) {
        this.targetPort = targetPort;
        return this;
    }

    /**
     * Get the transport property: Ingress transport protocol.
     *
     * @return the transport value.
     */
    public WorkerAppIngressTransportMethod transport() {
        return this.transport;
    }

    /**
     * Set the transport property: Ingress transport protocol.
     *
     * @param transport the transport value to set.
     * @return the WorkerAppIngress object itself.
     */
    public WorkerAppIngress withTransport(WorkerAppIngressTransportMethod transport) {
        this.transport = transport;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
