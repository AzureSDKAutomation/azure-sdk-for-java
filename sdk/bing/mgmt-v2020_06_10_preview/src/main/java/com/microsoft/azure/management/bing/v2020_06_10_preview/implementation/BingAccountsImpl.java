/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.bing.v2020_06_10_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.bing.v2020_06_10_preview.BingAccounts;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.bing.v2020_06_10_preview.BingAccount;
import com.microsoft.azure.Page;
import rx.Completable;
import com.microsoft.azure.management.bing.v2020_06_10_preview.BingAccountKeys;
import com.microsoft.azure.management.bing.v2020_06_10_preview.KeyName;
import com.microsoft.azure.management.bing.v2020_06_10_preview.BingAccountEnumerateSkusResult;
import com.microsoft.azure.management.bing.v2020_06_10_preview.UsagesResult;

class BingAccountsImpl extends WrapperImpl<BingAccountsInner> implements BingAccounts {
    private final BingManager manager;

    BingAccountsImpl(BingManager manager) {
        super(manager.inner().bingAccounts());
        this.manager = manager;
    }

    public BingManager manager() {
        return this.manager;
    }

    @Override
    public BingAccountImpl defineAccount(String name) {
        return wrapAccountModel(name);
    }

    private BingAccountImpl wrapAccountModel(String name) {
        return new BingAccountImpl(name, new BingAccountInner(), this.manager());
    }

    private BingAccountImpl wrapBingAccountModel(BingAccountInner inner) {
        return  new BingAccountImpl(inner.name(), inner, manager());
    }

    private Observable<BingAccountInner> getBingAccountInnerUsingBingAccountsInnerAsync(String resourceGroupName, String name) {
        BingAccountsInner client = this.inner();
        return client.getByResourceGroupAsync(resourceGroupName, name);
    }

    @Override
    public Observable<BingAccount> getByResourceGroupAsync(String resourceGroupName, String name) {
        return this.getBingAccountInnerUsingBingAccountsInnerAsync(resourceGroupName, name).flatMap(new Func1<BingAccountInner, Observable<BingAccount>> () {
            @Override
            public Observable<BingAccount> call(BingAccountInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return  Observable.just((BingAccount)wrapBingAccountModel(inner));
                }
            }
        });
    }

    @Override
    public Observable<BingAccount> listByResourceGroupAsync(String resourceGroupName) {
        BingAccountsInner client = this.inner();
        return client.listByResourceGroupAsync(resourceGroupName)
        .flatMapIterable(new Func1<Page<BingAccountInner>, Iterable<BingAccountInner>>() {
            @Override
            public Iterable<BingAccountInner> call(Page<BingAccountInner> page) {
                return page.items();
            }
        })
        .map(new Func1<BingAccountInner, BingAccount>() {
            @Override
            public BingAccount call(BingAccountInner inner) {
                return wrapBingAccountModel(inner);
            }
        });
    }

    @Override
    public Observable<BingAccount> listAsync() {
        BingAccountsInner client = this.inner();
        return client.listAsync()
        .flatMapIterable(new Func1<Page<BingAccountInner>, Iterable<BingAccountInner>>() {
            @Override
            public Iterable<BingAccountInner> call(Page<BingAccountInner> page) {
                return page.items();
            }
        })
        .map(new Func1<BingAccountInner, BingAccount>() {
            @Override
            public BingAccount call(BingAccountInner inner) {
                return wrapBingAccountModel(inner);
            }
        });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String name) {
        return this.inner().deleteAsync(resourceGroupName, name).toCompletable();
    }

    @Override
    public Observable<BingAccountKeys> listKeysAsync(String resourceGroupName, String accountName) {
        BingAccountsInner client = this.inner();
        return client.listKeysAsync(resourceGroupName, accountName)
        .map(new Func1<BingAccountKeysInner, BingAccountKeys>() {
            @Override
            public BingAccountKeys call(BingAccountKeysInner inner) {
                return new BingAccountKeysImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<BingAccountKeys> regenerateKeyAsync(String resourceGroupName, String accountName, KeyName keyName) {
        BingAccountsInner client = this.inner();
        return client.regenerateKeyAsync(resourceGroupName, accountName, keyName)
        .map(new Func1<BingAccountKeysInner, BingAccountKeys>() {
            @Override
            public BingAccountKeys call(BingAccountKeysInner inner) {
                return new BingAccountKeysImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<BingAccountEnumerateSkusResult> listSkusAsync(String resourceGroupName, String accountName) {
        BingAccountsInner client = this.inner();
        return client.listSkusAsync(resourceGroupName, accountName)
        .map(new Func1<BingAccountEnumerateSkusResultInner, BingAccountEnumerateSkusResult>() {
            @Override
            public BingAccountEnumerateSkusResult call(BingAccountEnumerateSkusResultInner inner) {
                return new BingAccountEnumerateSkusResultImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<UsagesResult> getUsagesAsync(String resourceGroupName, String accountName) {
        BingAccountsInner client = this.inner();
        return client.getUsagesAsync(resourceGroupName, accountName)
        .map(new Func1<UsagesResultInner, UsagesResult>() {
            @Override
            public UsagesResult call(UsagesResultInner inner) {
                return new UsagesResultImpl(inner, manager());
            }
        });
    }

}
