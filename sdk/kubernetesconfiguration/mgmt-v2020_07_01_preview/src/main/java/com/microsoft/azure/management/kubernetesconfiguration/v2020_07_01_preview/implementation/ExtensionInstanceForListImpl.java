/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.kubernetesconfiguration.v2020_07_01_preview.implementation;

import com.microsoft.azure.management.kubernetesconfiguration.v2020_07_01_preview.ExtensionInstanceForList;
import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.kubernetesconfiguration.v2020_07_01_preview.ErrorDefinition;
import com.microsoft.azure.management.kubernetesconfiguration.v2020_07_01_preview.ConfigurationIdentity;
import com.microsoft.azure.management.kubernetesconfiguration.v2020_07_01_preview.InstallStateType;
import com.microsoft.azure.management.kubernetesconfiguration.v2020_07_01_preview.Scope;

class ExtensionInstanceForListImpl extends WrapperImpl<ExtensionInstanceForListInner> implements ExtensionInstanceForList {
    private final KubernetesConfigurationManager manager;
    ExtensionInstanceForListImpl(ExtensionInstanceForListInner inner, KubernetesConfigurationManager manager) {
        super(inner);
        this.manager = manager;
    }

    @Override
    public KubernetesConfigurationManager manager() {
        return this.manager;
    }

    @Override
    public Boolean autoUpgradeMinorVersion() {
        return this.inner().autoUpgradeMinorVersion();
    }

    @Override
    public String creationTime() {
        return this.inner().creationTime();
    }

    @Override
    public ErrorDefinition errorInfo() {
        return this.inner().errorInfo();
    }

    @Override
    public String extensionType() {
        return this.inner().extensionType();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public ConfigurationIdentity identity() {
        return this.inner().identity();
    }

    @Override
    public InstallStateType installState() {
        return this.inner().installState();
    }

    @Override
    public String lastModifiedTime() {
        return this.inner().lastModifiedTime();
    }

    @Override
    public String lastStatusTime() {
        return this.inner().lastStatusTime();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String releaseTrain() {
        return this.inner().releaseTrain();
    }

    @Override
    public Scope scope() {
        return this.inner().scope();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public String version() {
        return this.inner().version();
    }

}
