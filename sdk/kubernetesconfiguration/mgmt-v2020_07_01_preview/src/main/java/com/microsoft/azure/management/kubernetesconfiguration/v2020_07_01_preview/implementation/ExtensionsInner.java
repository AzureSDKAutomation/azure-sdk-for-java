/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.kubernetesconfiguration.v2020_07_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.kubernetesconfiguration.v2020_07_01_preview.ErrorResponseException;
import com.microsoft.azure.management.kubernetesconfiguration.v2020_07_01_preview.ExtensionInstanceForCreate;
import com.microsoft.azure.management.kubernetesconfiguration.v2020_07_01_preview.ExtensionInstanceUpdate;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Extensions.
 */
public class ExtensionsInner {
    /** The Retrofit service to perform REST calls. */
    private ExtensionsService service;
    /** The service client containing this operation class. */
    private SourceControlConfigurationClientImpl client;

    /**
     * Initializes an instance of ExtensionsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ExtensionsInner(Retrofit retrofit, SourceControlConfigurationClientImpl client) {
        this.service = retrofit.create(ExtensionsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Extensions to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ExtensionsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.kubernetesconfiguration.v2020_07_01_preview.Extensions create" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/extensions/{extensionInstanceName}")
        Observable<Response<ResponseBody>> create(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterRp") String clusterRp, @Path("clusterResourceName") String clusterResourceName, @Path("clusterName") String clusterName, @Path("extensionInstanceName") String extensionInstanceName, @Query("api-version") String apiVersion, @Body ExtensionInstanceForCreate extensionInstance, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.kubernetesconfiguration.v2020_07_01_preview.Extensions get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/extensions/{extensionInstanceName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterRp") String clusterRp, @Path("clusterResourceName") String clusterResourceName, @Path("clusterName") String clusterName, @Path("extensionInstanceName") String extensionInstanceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.kubernetesconfiguration.v2020_07_01_preview.Extensions update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/extensions/{extensionInstanceName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterRp") String clusterRp, @Path("clusterResourceName") String clusterResourceName, @Path("clusterName") String clusterName, @Path("extensionInstanceName") String extensionInstanceName, @Query("api-version") String apiVersion, @Body ExtensionInstanceUpdate extensionInstance, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.kubernetesconfiguration.v2020_07_01_preview.Extensions delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/extensions/{extensionInstanceName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterRp") String clusterRp, @Path("clusterResourceName") String clusterResourceName, @Path("clusterName") String clusterName, @Path("extensionInstanceName") String extensionInstanceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.kubernetesconfiguration.v2020_07_01_preview.Extensions list" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/extensions")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("clusterRp") String clusterRp, @Path("clusterResourceName") String clusterResourceName, @Path("clusterName") String clusterName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.kubernetesconfiguration.v2020_07_01_preview.Extensions listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Create a new Kubernetes Cluster Extension Instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionInstanceName Name of an instance of the Extension.
     * @param extensionInstance Properties necessary to Create an Extension Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ExtensionInstanceInner object if successful.
     */
    public ExtensionInstanceInner create(String resourceGroupName, String clusterRp, String clusterResourceName, String clusterName, String extensionInstanceName, ExtensionInstanceForCreate extensionInstance) {
        return createWithServiceResponseAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionInstanceName, extensionInstance).toBlocking().single().body();
    }

    /**
     * Create a new Kubernetes Cluster Extension Instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionInstanceName Name of an instance of the Extension.
     * @param extensionInstance Properties necessary to Create an Extension Instance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ExtensionInstanceInner> createAsync(String resourceGroupName, String clusterRp, String clusterResourceName, String clusterName, String extensionInstanceName, ExtensionInstanceForCreate extensionInstance, final ServiceCallback<ExtensionInstanceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionInstanceName, extensionInstance), serviceCallback);
    }

    /**
     * Create a new Kubernetes Cluster Extension Instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionInstanceName Name of an instance of the Extension.
     * @param extensionInstance Properties necessary to Create an Extension Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ExtensionInstanceInner object
     */
    public Observable<ExtensionInstanceInner> createAsync(String resourceGroupName, String clusterRp, String clusterResourceName, String clusterName, String extensionInstanceName, ExtensionInstanceForCreate extensionInstance) {
        return createWithServiceResponseAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionInstanceName, extensionInstance).map(new Func1<ServiceResponse<ExtensionInstanceInner>, ExtensionInstanceInner>() {
            @Override
            public ExtensionInstanceInner call(ServiceResponse<ExtensionInstanceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a new Kubernetes Cluster Extension Instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionInstanceName Name of an instance of the Extension.
     * @param extensionInstance Properties necessary to Create an Extension Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ExtensionInstanceInner object
     */
    public Observable<ServiceResponse<ExtensionInstanceInner>> createWithServiceResponseAsync(String resourceGroupName, String clusterRp, String clusterResourceName, String clusterName, String extensionInstanceName, ExtensionInstanceForCreate extensionInstance) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterRp == null) {
            throw new IllegalArgumentException("Parameter clusterRp is required and cannot be null.");
        }
        if (clusterResourceName == null) {
            throw new IllegalArgumentException("Parameter clusterResourceName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (extensionInstanceName == null) {
            throw new IllegalArgumentException("Parameter extensionInstanceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (extensionInstance == null) {
            throw new IllegalArgumentException("Parameter extensionInstance is required and cannot be null.");
        }
        Validator.validate(extensionInstance);
        return service.create(this.client.subscriptionId(), resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionInstanceName, this.client.apiVersion(), extensionInstance, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ExtensionInstanceInner>>>() {
                @Override
                public Observable<ServiceResponse<ExtensionInstanceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ExtensionInstanceInner> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ExtensionInstanceInner> createDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ExtensionInstanceInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ExtensionInstanceInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets details of the Kubernetes Cluster Extension Instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionInstanceName Name of an instance of the Extension.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ExtensionInstanceInner object if successful.
     */
    public ExtensionInstanceInner get(String resourceGroupName, String clusterRp, String clusterResourceName, String clusterName, String extensionInstanceName) {
        return getWithServiceResponseAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionInstanceName).toBlocking().single().body();
    }

    /**
     * Gets details of the Kubernetes Cluster Extension Instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionInstanceName Name of an instance of the Extension.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ExtensionInstanceInner> getAsync(String resourceGroupName, String clusterRp, String clusterResourceName, String clusterName, String extensionInstanceName, final ServiceCallback<ExtensionInstanceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionInstanceName), serviceCallback);
    }

    /**
     * Gets details of the Kubernetes Cluster Extension Instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionInstanceName Name of an instance of the Extension.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ExtensionInstanceInner object
     */
    public Observable<ExtensionInstanceInner> getAsync(String resourceGroupName, String clusterRp, String clusterResourceName, String clusterName, String extensionInstanceName) {
        return getWithServiceResponseAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionInstanceName).map(new Func1<ServiceResponse<ExtensionInstanceInner>, ExtensionInstanceInner>() {
            @Override
            public ExtensionInstanceInner call(ServiceResponse<ExtensionInstanceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets details of the Kubernetes Cluster Extension Instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionInstanceName Name of an instance of the Extension.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ExtensionInstanceInner object
     */
    public Observable<ServiceResponse<ExtensionInstanceInner>> getWithServiceResponseAsync(String resourceGroupName, String clusterRp, String clusterResourceName, String clusterName, String extensionInstanceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterRp == null) {
            throw new IllegalArgumentException("Parameter clusterRp is required and cannot be null.");
        }
        if (clusterResourceName == null) {
            throw new IllegalArgumentException("Parameter clusterResourceName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (extensionInstanceName == null) {
            throw new IllegalArgumentException("Parameter extensionInstanceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionInstanceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ExtensionInstanceInner>>>() {
                @Override
                public Observable<ServiceResponse<ExtensionInstanceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ExtensionInstanceInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ExtensionInstanceInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ExtensionInstanceInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ExtensionInstanceInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Update an existing Kubernetes Cluster Extension Instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionInstanceName Name of an instance of the Extension.
     * @param extensionInstance Properties to Update in the Extension Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ExtensionInstanceInner object if successful.
     */
    public ExtensionInstanceInner update(String resourceGroupName, String clusterRp, String clusterResourceName, String clusterName, String extensionInstanceName, ExtensionInstanceUpdate extensionInstance) {
        return updateWithServiceResponseAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionInstanceName, extensionInstance).toBlocking().single().body();
    }

    /**
     * Update an existing Kubernetes Cluster Extension Instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionInstanceName Name of an instance of the Extension.
     * @param extensionInstance Properties to Update in the Extension Instance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ExtensionInstanceInner> updateAsync(String resourceGroupName, String clusterRp, String clusterResourceName, String clusterName, String extensionInstanceName, ExtensionInstanceUpdate extensionInstance, final ServiceCallback<ExtensionInstanceInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionInstanceName, extensionInstance), serviceCallback);
    }

    /**
     * Update an existing Kubernetes Cluster Extension Instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionInstanceName Name of an instance of the Extension.
     * @param extensionInstance Properties to Update in the Extension Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ExtensionInstanceInner object
     */
    public Observable<ExtensionInstanceInner> updateAsync(String resourceGroupName, String clusterRp, String clusterResourceName, String clusterName, String extensionInstanceName, ExtensionInstanceUpdate extensionInstance) {
        return updateWithServiceResponseAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionInstanceName, extensionInstance).map(new Func1<ServiceResponse<ExtensionInstanceInner>, ExtensionInstanceInner>() {
            @Override
            public ExtensionInstanceInner call(ServiceResponse<ExtensionInstanceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update an existing Kubernetes Cluster Extension Instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionInstanceName Name of an instance of the Extension.
     * @param extensionInstance Properties to Update in the Extension Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ExtensionInstanceInner object
     */
    public Observable<ServiceResponse<ExtensionInstanceInner>> updateWithServiceResponseAsync(String resourceGroupName, String clusterRp, String clusterResourceName, String clusterName, String extensionInstanceName, ExtensionInstanceUpdate extensionInstance) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterRp == null) {
            throw new IllegalArgumentException("Parameter clusterRp is required and cannot be null.");
        }
        if (clusterResourceName == null) {
            throw new IllegalArgumentException("Parameter clusterResourceName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (extensionInstanceName == null) {
            throw new IllegalArgumentException("Parameter extensionInstanceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (extensionInstance == null) {
            throw new IllegalArgumentException("Parameter extensionInstance is required and cannot be null.");
        }
        Validator.validate(extensionInstance);
        return service.update(this.client.subscriptionId(), resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionInstanceName, this.client.apiVersion(), extensionInstance, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ExtensionInstanceInner>>>() {
                @Override
                public Observable<ServiceResponse<ExtensionInstanceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ExtensionInstanceInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ExtensionInstanceInner> updateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ExtensionInstanceInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ExtensionInstanceInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Delete a Kubernetes Cluster Extension Instance. This will cause the Agent to Uninstall the extension instance from the cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionInstanceName Name of an instance of the Extension.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String clusterRp, String clusterResourceName, String clusterName, String extensionInstanceName) {
        deleteWithServiceResponseAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionInstanceName).toBlocking().single().body();
    }

    /**
     * Delete a Kubernetes Cluster Extension Instance. This will cause the Agent to Uninstall the extension instance from the cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionInstanceName Name of an instance of the Extension.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String clusterRp, String clusterResourceName, String clusterName, String extensionInstanceName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionInstanceName), serviceCallback);
    }

    /**
     * Delete a Kubernetes Cluster Extension Instance. This will cause the Agent to Uninstall the extension instance from the cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionInstanceName Name of an instance of the Extension.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String clusterRp, String clusterResourceName, String clusterName, String extensionInstanceName) {
        return deleteWithServiceResponseAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionInstanceName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a Kubernetes Cluster Extension Instance. This will cause the Agent to Uninstall the extension instance from the cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionInstanceName Name of an instance of the Extension.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String clusterRp, String clusterResourceName, String clusterName, String extensionInstanceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterRp == null) {
            throw new IllegalArgumentException("Parameter clusterRp is required and cannot be null.");
        }
        if (clusterResourceName == null) {
            throw new IllegalArgumentException("Parameter clusterResourceName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (extensionInstanceName == null) {
            throw new IllegalArgumentException("Parameter extensionInstanceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionInstanceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * List all Source Control Configurations.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ExtensionInstanceForListInner&gt; object if successful.
     */
    public PagedList<ExtensionInstanceForListInner> list(final String resourceGroupName, final String clusterRp, final String clusterResourceName, final String clusterName) {
        ServiceResponse<Page<ExtensionInstanceForListInner>> response = listSinglePageAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName).toBlocking().single();
        return new PagedList<ExtensionInstanceForListInner>(response.body()) {
            @Override
            public Page<ExtensionInstanceForListInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List all Source Control Configurations.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ExtensionInstanceForListInner>> listAsync(final String resourceGroupName, final String clusterRp, final String clusterResourceName, final String clusterName, final ListOperationCallback<ExtensionInstanceForListInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName),
            new Func1<String, Observable<ServiceResponse<Page<ExtensionInstanceForListInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ExtensionInstanceForListInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List all Source Control Configurations.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ExtensionInstanceForListInner&gt; object
     */
    public Observable<Page<ExtensionInstanceForListInner>> listAsync(final String resourceGroupName, final String clusterRp, final String clusterResourceName, final String clusterName) {
        return listWithServiceResponseAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName)
            .map(new Func1<ServiceResponse<Page<ExtensionInstanceForListInner>>, Page<ExtensionInstanceForListInner>>() {
                @Override
                public Page<ExtensionInstanceForListInner> call(ServiceResponse<Page<ExtensionInstanceForListInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List all Source Control Configurations.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
     * @param clusterName The name of the kubernetes cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ExtensionInstanceForListInner&gt; object
     */
    public Observable<ServiceResponse<Page<ExtensionInstanceForListInner>>> listWithServiceResponseAsync(final String resourceGroupName, final String clusterRp, final String clusterResourceName, final String clusterName) {
        return listSinglePageAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName)
            .concatMap(new Func1<ServiceResponse<Page<ExtensionInstanceForListInner>>, Observable<ServiceResponse<Page<ExtensionInstanceForListInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ExtensionInstanceForListInner>>> call(ServiceResponse<Page<ExtensionInstanceForListInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List all Source Control Configurations.
     *
    ServiceResponse<PageImpl<ExtensionInstanceForListInner>> * @param resourceGroupName The name of the resource group.
    ServiceResponse<PageImpl<ExtensionInstanceForListInner>> * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters). Possible values include: 'Microsoft.ContainerService', 'Microsoft.Kubernetes'
    ServiceResponse<PageImpl<ExtensionInstanceForListInner>> * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters). Possible values include: 'managedClusters', 'connectedClusters'
    ServiceResponse<PageImpl<ExtensionInstanceForListInner>> * @param clusterName The name of the kubernetes cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ExtensionInstanceForListInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ExtensionInstanceForListInner>>> listSinglePageAsync(final String resourceGroupName, final String clusterRp, final String clusterResourceName, final String clusterName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (clusterRp == null) {
            throw new IllegalArgumentException("Parameter clusterRp is required and cannot be null.");
        }
        if (clusterResourceName == null) {
            throw new IllegalArgumentException("Parameter clusterResourceName is required and cannot be null.");
        }
        if (clusterName == null) {
            throw new IllegalArgumentException("Parameter clusterName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), resourceGroupName, clusterRp, clusterResourceName, clusterName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ExtensionInstanceForListInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ExtensionInstanceForListInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ExtensionInstanceForListInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ExtensionInstanceForListInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ExtensionInstanceForListInner>> listDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ExtensionInstanceForListInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ExtensionInstanceForListInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * List all Source Control Configurations.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ExtensionInstanceForListInner&gt; object if successful.
     */
    public PagedList<ExtensionInstanceForListInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<ExtensionInstanceForListInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ExtensionInstanceForListInner>(response.body()) {
            @Override
            public Page<ExtensionInstanceForListInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List all Source Control Configurations.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ExtensionInstanceForListInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<ExtensionInstanceForListInner>> serviceFuture, final ListOperationCallback<ExtensionInstanceForListInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ExtensionInstanceForListInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ExtensionInstanceForListInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List all Source Control Configurations.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ExtensionInstanceForListInner&gt; object
     */
    public Observable<Page<ExtensionInstanceForListInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ExtensionInstanceForListInner>>, Page<ExtensionInstanceForListInner>>() {
                @Override
                public Page<ExtensionInstanceForListInner> call(ServiceResponse<Page<ExtensionInstanceForListInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List all Source Control Configurations.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ExtensionInstanceForListInner&gt; object
     */
    public Observable<ServiceResponse<Page<ExtensionInstanceForListInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ExtensionInstanceForListInner>>, Observable<ServiceResponse<Page<ExtensionInstanceForListInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ExtensionInstanceForListInner>>> call(ServiceResponse<Page<ExtensionInstanceForListInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List all Source Control Configurations.
     *
    ServiceResponse<PageImpl<ExtensionInstanceForListInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ExtensionInstanceForListInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ExtensionInstanceForListInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ExtensionInstanceForListInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ExtensionInstanceForListInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ExtensionInstanceForListInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ExtensionInstanceForListInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ExtensionInstanceForListInner>> listNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ExtensionInstanceForListInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ExtensionInstanceForListInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
