/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.kubernetesconfiguration.v2020_07_01_preview.implementation;

import com.microsoft.azure.management.kubernetesconfiguration.v2020_07_01_preview.ExtensionInstance;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.kubernetesconfiguration.v2020_07_01_preview.ExtensionInstanceUpdate;
import com.microsoft.azure.management.kubernetesconfiguration.v2020_07_01_preview.ExtensionInstanceForCreate;
import java.util.Map;
import com.microsoft.azure.management.kubernetesconfiguration.v2020_07_01_preview.ErrorDefinition;
import com.microsoft.azure.management.kubernetesconfiguration.v2020_07_01_preview.ConfigurationIdentity;
import com.microsoft.azure.management.kubernetesconfiguration.v2020_07_01_preview.InstallStateType;
import com.microsoft.azure.management.kubernetesconfiguration.v2020_07_01_preview.Scope;
import java.util.List;
import com.microsoft.azure.management.kubernetesconfiguration.v2020_07_01_preview.ExtensionStatus;
import rx.functions.Func1;

class ExtensionInstanceImpl extends CreatableUpdatableImpl<ExtensionInstance, ExtensionInstanceInner, ExtensionInstanceImpl> implements ExtensionInstance, ExtensionInstance.Definition, ExtensionInstance.Update {
    private final KubernetesConfigurationManager manager;
    private String resourceGroupName;
    private String clusterRp;
    private String clusterResourceName;
    private String clusterName;
    private String extensionInstanceName;
    private ExtensionInstanceForCreate createParameter;
    private ExtensionInstanceUpdate updateParameter;

    ExtensionInstanceImpl(String name, KubernetesConfigurationManager manager) {
        super(name, new ExtensionInstanceInner());
        this.manager = manager;
        // Set resource name
        this.extensionInstanceName = name;
        //
        this.createParameter = new ExtensionInstanceForCreate();
        this.updateParameter = new ExtensionInstanceUpdate();
    }

    ExtensionInstanceImpl(ExtensionInstanceInner inner, KubernetesConfigurationManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.extensionInstanceName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.clusterRp = String.fromString(IdParsingUtils.getValueFromIdByName(inner.id(), "providers"));
        this.extensionInstanceName = IdParsingUtils.getValueFromIdByName(inner.id(), "extensions");
        this.clusterResourceName = String.fromString(IdParsingUtils.getValueFromIdByPosition(inner.id(), 6));
        this.clusterName = IdParsingUtils.getValueFromIdByPosition(inner.id(), 7);
        //
        this.createParameter = new ExtensionInstanceForCreate();
        this.updateParameter = new ExtensionInstanceUpdate();
    }

    @Override
    public KubernetesConfigurationManager manager() {
        return this.manager;
    }

    @Override
    public Observable<ExtensionInstance> createResourceAsync() {
        ExtensionsInner client = this.manager().inner().extensions();
        return client.createAsync(this.resourceGroupName, this.clusterRp, this.clusterResourceName, this.clusterName, this.extensionInstanceName, this.createParameter)
            .map(new Func1<ExtensionInstanceInner, ExtensionInstanceInner>() {
               @Override
               public ExtensionInstanceInner call(ExtensionInstanceInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<ExtensionInstance> updateResourceAsync() {
        ExtensionsInner client = this.manager().inner().extensions();
        return client.updateAsync(this.resourceGroupName, this.clusterRp, this.clusterResourceName, this.clusterName, this.extensionInstanceName, this.updateParameter)
            .map(new Func1<ExtensionInstanceInner, ExtensionInstanceInner>() {
               @Override
               public ExtensionInstanceInner call(ExtensionInstanceInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ExtensionInstanceInner> getInnerAsync() {
        ExtensionsInner client = this.manager().inner().extensions();
        return null; // NOP getInnerAsync implementation as get is not supported
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.createParameter = new ExtensionInstanceForCreate();
        this.updateParameter = new ExtensionInstanceUpdate();
    }

    @Override
    public Boolean autoUpgradeMinorVersion() {
        return this.inner().autoUpgradeMinorVersion();
    }

    @Override
    public Map<String, String> configurationSettings() {
        return this.inner().configurationSettings();
    }

    @Override
    public String creationTime() {
        return this.inner().creationTime();
    }

    @Override
    public ErrorDefinition errorInfo() {
        return this.inner().errorInfo();
    }

    @Override
    public String extensionType() {
        return this.inner().extensionType();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public ConfigurationIdentity identity() {
        return this.inner().identity();
    }

    @Override
    public InstallStateType installState() {
        return this.inner().installState();
    }

    @Override
    public String lastModifiedTime() {
        return this.inner().lastModifiedTime();
    }

    @Override
    public String lastStatusTime() {
        return this.inner().lastStatusTime();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String releaseTrain() {
        return this.inner().releaseTrain();
    }

    @Override
    public Scope scope() {
        return this.inner().scope();
    }

    @Override
    public List<ExtensionStatus> statuses() {
        return this.inner().statuses();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public String version() {
        return this.inner().version();
    }

    @Override
    public ExtensionInstanceImpl withExistingProvider(String resourceGroupName, String clusterRp) {
        this.resourceGroupName = resourceGroupName;
        this.clusterRp = clusterRp;
        return this;
    }

    @Override
    public ExtensionInstanceImpl withClusterResourceName(String clusterResourceName) {
        this.clusterResourceName = clusterResourceName;
        return this;
    }

    @Override
    public ExtensionInstanceImpl withClusterName(String clusterName) {
        this.clusterName = clusterName;
        return this;
    }

    @Override
    public ExtensionInstanceImpl withConfigurationProtectedSettings(Map<String, String> configurationProtectedSettings) {
        this.createParameter.withConfigurationProtectedSettings(configurationProtectedSettings);
        return this;
    }

    @Override
    public ExtensionInstanceImpl withConfigurationSettings(Map<String, String> configurationSettings) {
        this.createParameter.withConfigurationSettings(configurationSettings);
        return this;
    }

    @Override
    public ExtensionInstanceImpl withExtensionType(String extensionType) {
        this.createParameter.withExtensionType(extensionType);
        return this;
    }

    @Override
    public ExtensionInstanceImpl withIdentity(ConfigurationIdentity identity) {
        this.createParameter.withIdentity(identity);
        return this;
    }

    @Override
    public ExtensionInstanceImpl withScope(Scope scope) {
        this.createParameter.withScope(scope);
        return this;
    }

    @Override
    public ExtensionInstanceImpl withAutoUpgradeMinorVersion(Boolean autoUpgradeMinorVersion) {
        if (isInCreateMode()) {
            this.createParameter.withAutoUpgradeMinorVersion(autoUpgradeMinorVersion);
        } else {
            this.updateParameter.withAutoUpgradeMinorVersion(autoUpgradeMinorVersion);
        }
        return this;
    }

    @Override
    public ExtensionInstanceImpl withReleaseTrain(String releaseTrain) {
        if (isInCreateMode()) {
            this.createParameter.withReleaseTrain(releaseTrain);
        } else {
            this.updateParameter.withReleaseTrain(releaseTrain);
        }
        return this;
    }

    @Override
    public ExtensionInstanceImpl withVersion(String version) {
        if (isInCreateMode()) {
            this.createParameter.withVersion(version);
        } else {
            this.updateParameter.withVersion(version);
        }
        return this;
    }

}
