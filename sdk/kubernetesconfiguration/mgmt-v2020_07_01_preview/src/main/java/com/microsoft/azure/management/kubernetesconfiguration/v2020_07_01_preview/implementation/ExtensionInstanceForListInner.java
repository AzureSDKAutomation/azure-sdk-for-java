/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.kubernetesconfiguration.v2020_07_01_preview.implementation;

import com.microsoft.azure.management.kubernetesconfiguration.v2020_07_01_preview.Scope;
import com.microsoft.azure.management.kubernetesconfiguration.v2020_07_01_preview.InstallStateType;
import com.microsoft.azure.management.kubernetesconfiguration.v2020_07_01_preview.ErrorDefinition;
import com.microsoft.azure.management.kubernetesconfiguration.v2020_07_01_preview.ConfigurationIdentity;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.ProxyResource;

/**
 * The Extension Instance object.
 */
@JsonFlatten
public class ExtensionInstanceForListInner extends ProxyResource {
    /**
     * Type of the Extension, of which this resource is an instance of.  It
     * must be one of the Extension Types registered with
     * Microsoft.KubernetesConfiguration by the Extension publisher.
     */
    @JsonProperty(value = "properties.extensionType")
    private String extensionType;

    /**
     * Flag to note if this instance participates in auto upgrade of minor
     * version, or not.
     */
    @JsonProperty(value = "properties.autoUpgradeMinorVersion")
    private Boolean autoUpgradeMinorVersion;

    /**
     * ReleaseTrain this extension instance participates in for auto-upgrade
     * (e.g. Stable, Preview, etc.) - only if autoUpgradeMinorVersion is
     * 'true'.
     */
    @JsonProperty(value = "properties.releaseTrain")
    private String releaseTrain;

    /**
     * Version of the extension for this extension instance, if it is 'pinned'
     * to a specific version.
     */
    @JsonProperty(value = "properties.version")
    private String version;

    /**
     * Scope at which the extension instance is installed.
     */
    @JsonProperty(value = "properties.scope")
    private Scope scope;

    /**
     * Status of installation of this instance of the extension. Possible
     * values include: 'Pending', 'Installed', 'Failed'.
     */
    @JsonProperty(value = "properties.installState")
    private InstallStateType installState;

    /**
     * DateLiteral (per ISO8601) noting the time the resource was created by
     * the client (user).
     */
    @JsonProperty(value = "properties.creationTime", access = JsonProperty.Access.WRITE_ONLY)
    private String creationTime;

    /**
     * DateLiteral (per ISO8601) noting the time the resource was modified by
     * the client (user).
     */
    @JsonProperty(value = "properties.lastModifiedTime", access = JsonProperty.Access.WRITE_ONLY)
    private String lastModifiedTime;

    /**
     * DateLiteral (per ISO8601) noting the time of last status from the agent.
     */
    @JsonProperty(value = "properties.lastStatusTime", access = JsonProperty.Access.WRITE_ONLY)
    private String lastStatusTime;

    /**
     * Error information from the Agent - e.g. errors during installation.
     */
    @JsonProperty(value = "properties.errorInfo", access = JsonProperty.Access.WRITE_ONLY)
    private ErrorDefinition errorInfo;

    /**
     * The identity of the configuration.
     */
    @JsonProperty(value = "identity")
    private ConfigurationIdentity identity;

    /**
     * Get type of the Extension, of which this resource is an instance of.  It must be one of the Extension Types registered with Microsoft.KubernetesConfiguration by the Extension publisher.
     *
     * @return the extensionType value
     */
    public String extensionType() {
        return this.extensionType;
    }

    /**
     * Set type of the Extension, of which this resource is an instance of.  It must be one of the Extension Types registered with Microsoft.KubernetesConfiguration by the Extension publisher.
     *
     * @param extensionType the extensionType value to set
     * @return the ExtensionInstanceForListInner object itself.
     */
    public ExtensionInstanceForListInner withExtensionType(String extensionType) {
        this.extensionType = extensionType;
        return this;
    }

    /**
     * Get flag to note if this instance participates in auto upgrade of minor version, or not.
     *
     * @return the autoUpgradeMinorVersion value
     */
    public Boolean autoUpgradeMinorVersion() {
        return this.autoUpgradeMinorVersion;
    }

    /**
     * Set flag to note if this instance participates in auto upgrade of minor version, or not.
     *
     * @param autoUpgradeMinorVersion the autoUpgradeMinorVersion value to set
     * @return the ExtensionInstanceForListInner object itself.
     */
    public ExtensionInstanceForListInner withAutoUpgradeMinorVersion(Boolean autoUpgradeMinorVersion) {
        this.autoUpgradeMinorVersion = autoUpgradeMinorVersion;
        return this;
    }

    /**
     * Get releaseTrain this extension instance participates in for auto-upgrade (e.g. Stable, Preview, etc.) - only if autoUpgradeMinorVersion is 'true'.
     *
     * @return the releaseTrain value
     */
    public String releaseTrain() {
        return this.releaseTrain;
    }

    /**
     * Set releaseTrain this extension instance participates in for auto-upgrade (e.g. Stable, Preview, etc.) - only if autoUpgradeMinorVersion is 'true'.
     *
     * @param releaseTrain the releaseTrain value to set
     * @return the ExtensionInstanceForListInner object itself.
     */
    public ExtensionInstanceForListInner withReleaseTrain(String releaseTrain) {
        this.releaseTrain = releaseTrain;
        return this;
    }

    /**
     * Get version of the extension for this extension instance, if it is 'pinned' to a specific version.
     *
     * @return the version value
     */
    public String version() {
        return this.version;
    }

    /**
     * Set version of the extension for this extension instance, if it is 'pinned' to a specific version.
     *
     * @param version the version value to set
     * @return the ExtensionInstanceForListInner object itself.
     */
    public ExtensionInstanceForListInner withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get scope at which the extension instance is installed.
     *
     * @return the scope value
     */
    public Scope scope() {
        return this.scope;
    }

    /**
     * Set scope at which the extension instance is installed.
     *
     * @param scope the scope value to set
     * @return the ExtensionInstanceForListInner object itself.
     */
    public ExtensionInstanceForListInner withScope(Scope scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Get status of installation of this instance of the extension. Possible values include: 'Pending', 'Installed', 'Failed'.
     *
     * @return the installState value
     */
    public InstallStateType installState() {
        return this.installState;
    }

    /**
     * Set status of installation of this instance of the extension. Possible values include: 'Pending', 'Installed', 'Failed'.
     *
     * @param installState the installState value to set
     * @return the ExtensionInstanceForListInner object itself.
     */
    public ExtensionInstanceForListInner withInstallState(InstallStateType installState) {
        this.installState = installState;
        return this;
    }

    /**
     * Get dateLiteral (per ISO8601) noting the time the resource was created by the client (user).
     *
     * @return the creationTime value
     */
    public String creationTime() {
        return this.creationTime;
    }

    /**
     * Get dateLiteral (per ISO8601) noting the time the resource was modified by the client (user).
     *
     * @return the lastModifiedTime value
     */
    public String lastModifiedTime() {
        return this.lastModifiedTime;
    }

    /**
     * Get dateLiteral (per ISO8601) noting the time of last status from the agent.
     *
     * @return the lastStatusTime value
     */
    public String lastStatusTime() {
        return this.lastStatusTime;
    }

    /**
     * Get error information from the Agent - e.g. errors during installation.
     *
     * @return the errorInfo value
     */
    public ErrorDefinition errorInfo() {
        return this.errorInfo;
    }

    /**
     * Get the identity of the configuration.
     *
     * @return the identity value
     */
    public ConfigurationIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity of the configuration.
     *
     * @param identity the identity value to set
     * @return the ExtensionInstanceForListInner object itself.
     */
    public ExtensionInstanceForListInner withIdentity(ConfigurationIdentity identity) {
        this.identity = identity;
        return this;
    }

}
