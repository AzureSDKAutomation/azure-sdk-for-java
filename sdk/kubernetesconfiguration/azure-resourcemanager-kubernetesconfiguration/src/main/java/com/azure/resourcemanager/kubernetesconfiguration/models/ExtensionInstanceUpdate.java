// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesconfiguration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Update Extension Instance request object. */
@JsonFlatten
@Fluent
public class ExtensionInstanceUpdate {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ExtensionInstanceUpdate.class);

    /*
     * Flag to note if this instance participates in Extension Lifecycle
     * Management or not.
     */
    @JsonProperty(value = "properties.autoUpgradeMinorVersion")
    private Boolean autoUpgradeMinorVersion;

    /*
     * ReleaseTrain this extension instance participates in for auto-upgrade
     * (e.g. Stable, Preview, etc.) - only if autoUpgradeMinorVersion is
     * 'true'.
     */
    @JsonProperty(value = "properties.releaseTrain")
    private String releaseTrain;

    /*
     * Version number of extension, to 'pin' to a specific version.
     * autoUpgradeMinorVersion must be 'false'.
     */
    @JsonProperty(value = "properties.version")
    private String version;

    /**
     * Get the autoUpgradeMinorVersion property: Flag to note if this instance participates in Extension Lifecycle
     * Management or not.
     *
     * @return the autoUpgradeMinorVersion value.
     */
    public Boolean autoUpgradeMinorVersion() {
        return this.autoUpgradeMinorVersion;
    }

    /**
     * Set the autoUpgradeMinorVersion property: Flag to note if this instance participates in Extension Lifecycle
     * Management or not.
     *
     * @param autoUpgradeMinorVersion the autoUpgradeMinorVersion value to set.
     * @return the ExtensionInstanceUpdate object itself.
     */
    public ExtensionInstanceUpdate withAutoUpgradeMinorVersion(Boolean autoUpgradeMinorVersion) {
        this.autoUpgradeMinorVersion = autoUpgradeMinorVersion;
        return this;
    }

    /**
     * Get the releaseTrain property: ReleaseTrain this extension instance participates in for auto-upgrade (e.g.
     * Stable, Preview, etc.) - only if autoUpgradeMinorVersion is 'true'.
     *
     * @return the releaseTrain value.
     */
    public String releaseTrain() {
        return this.releaseTrain;
    }

    /**
     * Set the releaseTrain property: ReleaseTrain this extension instance participates in for auto-upgrade (e.g.
     * Stable, Preview, etc.) - only if autoUpgradeMinorVersion is 'true'.
     *
     * @param releaseTrain the releaseTrain value to set.
     * @return the ExtensionInstanceUpdate object itself.
     */
    public ExtensionInstanceUpdate withReleaseTrain(String releaseTrain) {
        this.releaseTrain = releaseTrain;
        return this;
    }

    /**
     * Get the version property: Version number of extension, to 'pin' to a specific version. autoUpgradeMinorVersion
     * must be 'false'.
     *
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: Version number of extension, to 'pin' to a specific version. autoUpgradeMinorVersion
     * must be 'false'.
     *
     * @param version the version value to set.
     * @return the ExtensionInstanceUpdate object itself.
     */
    public ExtensionInstanceUpdate withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
