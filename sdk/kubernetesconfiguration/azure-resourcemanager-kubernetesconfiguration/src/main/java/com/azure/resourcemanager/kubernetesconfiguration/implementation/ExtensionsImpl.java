// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesconfiguration.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.kubernetesconfiguration.fluent.ExtensionsClient;
import com.azure.resourcemanager.kubernetesconfiguration.fluent.models.ExtensionInstanceInner;
import com.azure.resourcemanager.kubernetesconfiguration.models.ExtensionInstance;
import com.azure.resourcemanager.kubernetesconfiguration.models.ExtensionInstanceUpdate;
import com.azure.resourcemanager.kubernetesconfiguration.models.Extensions;
import com.azure.resourcemanager.kubernetesconfiguration.models.ExtensionsClusterResourceName;
import com.azure.resourcemanager.kubernetesconfiguration.models.ExtensionsClusterRp;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ExtensionsImpl implements Extensions {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ExtensionsImpl.class);

    private final ExtensionsClient innerClient;

    private final com.azure.resourcemanager.kubernetesconfiguration.SourceControlConfigurationManager serviceManager;

    public ExtensionsImpl(
        ExtensionsClient innerClient,
        com.azure.resourcemanager.kubernetesconfiguration.SourceControlConfigurationManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public ExtensionInstance create(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ExtensionsClusterResourceName clusterResourceName,
        String clusterName,
        String extensionInstanceName,
        ExtensionInstanceInner extensionInstance) {
        ExtensionInstanceInner inner =
            this
                .serviceClient()
                .create(
                    resourceGroupName,
                    clusterRp,
                    clusterResourceName,
                    clusterName,
                    extensionInstanceName,
                    extensionInstance);
        if (inner != null) {
            return new ExtensionInstanceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ExtensionInstance> createWithResponse(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ExtensionsClusterResourceName clusterResourceName,
        String clusterName,
        String extensionInstanceName,
        ExtensionInstanceInner extensionInstance,
        Context context) {
        Response<ExtensionInstanceInner> inner =
            this
                .serviceClient()
                .createWithResponse(
                    resourceGroupName,
                    clusterRp,
                    clusterResourceName,
                    clusterName,
                    extensionInstanceName,
                    extensionInstance,
                    context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ExtensionInstanceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ExtensionInstance get(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ExtensionsClusterResourceName clusterResourceName,
        String clusterName,
        String extensionInstanceName) {
        ExtensionInstanceInner inner =
            this
                .serviceClient()
                .get(resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionInstanceName);
        if (inner != null) {
            return new ExtensionInstanceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ExtensionInstance> getWithResponse(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ExtensionsClusterResourceName clusterResourceName,
        String clusterName,
        String extensionInstanceName,
        Context context) {
        Response<ExtensionInstanceInner> inner =
            this
                .serviceClient()
                .getWithResponse(
                    resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionInstanceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ExtensionInstanceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ExtensionInstance update(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ExtensionsClusterResourceName clusterResourceName,
        String clusterName,
        String extensionInstanceName,
        ExtensionInstanceUpdate extensionInstance) {
        ExtensionInstanceInner inner =
            this
                .serviceClient()
                .update(
                    resourceGroupName,
                    clusterRp,
                    clusterResourceName,
                    clusterName,
                    extensionInstanceName,
                    extensionInstance);
        if (inner != null) {
            return new ExtensionInstanceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ExtensionInstance> updateWithResponse(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ExtensionsClusterResourceName clusterResourceName,
        String clusterName,
        String extensionInstanceName,
        ExtensionInstanceUpdate extensionInstance,
        Context context) {
        Response<ExtensionInstanceInner> inner =
            this
                .serviceClient()
                .updateWithResponse(
                    resourceGroupName,
                    clusterRp,
                    clusterResourceName,
                    clusterName,
                    extensionInstanceName,
                    extensionInstance,
                    context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ExtensionInstanceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ExtensionsClusterResourceName clusterResourceName,
        String clusterName,
        String extensionInstanceName) {
        this
            .serviceClient()
            .delete(resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionInstanceName);
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ExtensionsClusterResourceName clusterResourceName,
        String clusterName,
        String extensionInstanceName,
        Context context) {
        return this
            .serviceClient()
            .deleteWithResponse(
                resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionInstanceName, context);
    }

    public PagedIterable<ExtensionInstance> list(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ExtensionsClusterResourceName clusterResourceName,
        String clusterName) {
        PagedIterable<ExtensionInstanceInner> inner =
            this.serviceClient().list(resourceGroupName, clusterRp, clusterResourceName, clusterName);
        return Utils.mapPage(inner, inner1 -> new ExtensionInstanceImpl(inner1, this.manager()));
    }

    public PagedIterable<ExtensionInstance> list(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ExtensionsClusterResourceName clusterResourceName,
        String clusterName,
        Context context) {
        PagedIterable<ExtensionInstanceInner> inner =
            this.serviceClient().list(resourceGroupName, clusterRp, clusterResourceName, clusterName, context);
        return Utils.mapPage(inner, inner1 -> new ExtensionInstanceImpl(inner1, this.manager()));
    }

    private ExtensionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.kubernetesconfiguration.SourceControlConfigurationManager manager() {
        return this.serviceManager;
    }
}
