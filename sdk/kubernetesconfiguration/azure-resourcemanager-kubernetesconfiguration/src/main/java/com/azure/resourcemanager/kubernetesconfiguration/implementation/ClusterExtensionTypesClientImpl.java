// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesconfiguration.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.kubernetesconfiguration.fluent.ClusterExtensionTypesClient;
import com.azure.resourcemanager.kubernetesconfiguration.fluent.models.ExtensionTypeInner;
import com.azure.resourcemanager.kubernetesconfiguration.models.ClusterExtensionTypeClusterType;
import com.azure.resourcemanager.kubernetesconfiguration.models.ExtensionsClusterRp;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in ClusterExtensionTypesClient. */
public final class ClusterExtensionTypesClientImpl implements ClusterExtensionTypesClient {
    private final ClientLogger logger = new ClientLogger(ClusterExtensionTypesClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final ClusterExtensionTypesService service;

    /** The service client containing this operation class. */
    private final SourceControlConfigurationClientImpl client;

    /**
     * Initializes an instance of ClusterExtensionTypesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ClusterExtensionTypesClientImpl(SourceControlConfigurationClientImpl client) {
        this.service =
            RestProxy
                .create(ClusterExtensionTypesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for SourceControlConfigurationClientClusterExtensionTypes to be used by
     * the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "SourceControlConfigu")
    private interface ClusterExtensionTypesService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterType}"
                + "/{clusterName}/providers/Microsoft.KubernetesConfiguration/extensionTypes/{extensionTypeName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ExtensionTypeInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("clusterRp") ExtensionsClusterRp clusterRp,
            @PathParam("clusterType") ClusterExtensionTypeClusterType clusterType,
            @PathParam("clusterName") String clusterName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("extensionTypeName") String extensionTypeName,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Get Extension Type details.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or
     *     Microsoft.Kubernetes (for OnPrem K8S clusters).
     * @param clusterType The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or
     *     connectedClusters (for OnPrem K8S clusters).
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionTypeName Extension type name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension Type details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ExtensionTypeInner>> getWithResponseAsync(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ClusterExtensionTypeClusterType clusterType,
        String clusterName,
        String extensionTypeName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterRp == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterRp is required and cannot be null."));
        }
        if (clusterType == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterType is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (extensionTypeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter extensionTypeName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            clusterRp,
                            clusterType,
                            clusterName,
                            this.client.getApiVersion(),
                            extensionTypeName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get Extension Type details.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or
     *     Microsoft.Kubernetes (for OnPrem K8S clusters).
     * @param clusterType The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or
     *     connectedClusters (for OnPrem K8S clusters).
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionTypeName Extension type name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension Type details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ExtensionTypeInner>> getWithResponseAsync(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ClusterExtensionTypeClusterType clusterType,
        String clusterName,
        String extensionTypeName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterRp == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterRp is required and cannot be null."));
        }
        if (clusterType == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterType is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (extensionTypeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter extensionTypeName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                clusterRp,
                clusterType,
                clusterName,
                this.client.getApiVersion(),
                extensionTypeName,
                accept,
                context);
    }

    /**
     * Get Extension Type details.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or
     *     Microsoft.Kubernetes (for OnPrem K8S clusters).
     * @param clusterType The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or
     *     connectedClusters (for OnPrem K8S clusters).
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionTypeName Extension type name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension Type details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ExtensionTypeInner> getAsync(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ClusterExtensionTypeClusterType clusterType,
        String clusterName,
        String extensionTypeName) {
        return getWithResponseAsync(resourceGroupName, clusterRp, clusterType, clusterName, extensionTypeName)
            .flatMap(
                (Response<ExtensionTypeInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get Extension Type details.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or
     *     Microsoft.Kubernetes (for OnPrem K8S clusters).
     * @param clusterType The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or
     *     connectedClusters (for OnPrem K8S clusters).
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionTypeName Extension type name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension Type details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ExtensionTypeInner get(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ClusterExtensionTypeClusterType clusterType,
        String clusterName,
        String extensionTypeName) {
        return getAsync(resourceGroupName, clusterRp, clusterType, clusterName, extensionTypeName).block();
    }

    /**
     * Get Extension Type details.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or
     *     Microsoft.Kubernetes (for OnPrem K8S clusters).
     * @param clusterType The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or
     *     connectedClusters (for OnPrem K8S clusters).
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionTypeName Extension type name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension Type details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ExtensionTypeInner> getWithResponse(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ClusterExtensionTypeClusterType clusterType,
        String clusterName,
        String extensionTypeName,
        Context context) {
        return getWithResponseAsync(resourceGroupName, clusterRp, clusterType, clusterName, extensionTypeName, context)
            .block();
    }
}
