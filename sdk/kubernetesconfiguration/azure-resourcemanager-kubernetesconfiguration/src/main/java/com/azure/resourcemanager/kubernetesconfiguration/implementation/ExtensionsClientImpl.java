// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesconfiguration.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.kubernetesconfiguration.fluent.ExtensionsClient;
import com.azure.resourcemanager.kubernetesconfiguration.fluent.models.ExtensionInstanceInner;
import com.azure.resourcemanager.kubernetesconfiguration.models.ExtensionInstanceUpdate;
import com.azure.resourcemanager.kubernetesconfiguration.models.ExtensionInstancesList;
import com.azure.resourcemanager.kubernetesconfiguration.models.ExtensionsClusterResourceName;
import com.azure.resourcemanager.kubernetesconfiguration.models.ExtensionsClusterRp;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in ExtensionsClient. */
public final class ExtensionsClientImpl implements ExtensionsClient {
    private final ClientLogger logger = new ClientLogger(ExtensionsClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final ExtensionsService service;

    /** The service client containing this operation class. */
    private final SourceControlConfigurationClientImpl client;

    /**
     * Initializes an instance of ExtensionsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ExtensionsClientImpl(SourceControlConfigurationClientImpl client) {
        this.service =
            RestProxy.create(ExtensionsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for SourceControlConfigurationClientExtensions to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "SourceControlConfigu")
    private interface ExtensionsService {
        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}"
                + "/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/extensions"
                + "/{extensionInstanceName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ExtensionInstanceInner>> create(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("clusterRp") ExtensionsClusterRp clusterRp,
            @PathParam("clusterResourceName") ExtensionsClusterResourceName clusterResourceName,
            @PathParam("clusterName") String clusterName,
            @PathParam("extensionInstanceName") String extensionInstanceName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ExtensionInstanceInner extensionInstance,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}"
                + "/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/extensions"
                + "/{extensionInstanceName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ExtensionInstanceInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("clusterRp") ExtensionsClusterRp clusterRp,
            @PathParam("clusterResourceName") ExtensionsClusterResourceName clusterResourceName,
            @PathParam("clusterName") String clusterName,
            @PathParam("extensionInstanceName") String extensionInstanceName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}"
                + "/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/extensions"
                + "/{extensionInstanceName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ExtensionInstanceInner>> update(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("clusterRp") ExtensionsClusterRp clusterRp,
            @PathParam("clusterResourceName") ExtensionsClusterResourceName clusterResourceName,
            @PathParam("clusterName") String clusterName,
            @PathParam("extensionInstanceName") String extensionInstanceName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ExtensionInstanceUpdate extensionInstance,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}"
                + "/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/extensions"
                + "/{extensionInstanceName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("clusterRp") ExtensionsClusterRp clusterRp,
            @PathParam("clusterResourceName") ExtensionsClusterResourceName clusterResourceName,
            @PathParam("clusterName") String clusterName,
            @PathParam("extensionInstanceName") String extensionInstanceName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}"
                + "/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/extensions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ExtensionInstancesList>> list(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("clusterRp") ExtensionsClusterRp clusterRp,
            @PathParam("clusterResourceName") ExtensionsClusterResourceName clusterResourceName,
            @PathParam("clusterName") String clusterName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ExtensionInstancesList>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Create a new Kubernetes Cluster Extension Instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or
     *     Microsoft.Kubernetes (for OnPrem K8S clusters).
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or
     *     connectedClusters (for OnPrem K8S clusters).
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionInstanceName Name of an instance of the Extension.
     * @param extensionInstance Properties necessary to Create an Extension Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Extension Instance object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ExtensionInstanceInner>> createWithResponseAsync(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ExtensionsClusterResourceName clusterResourceName,
        String clusterName,
        String extensionInstanceName,
        ExtensionInstanceInner extensionInstance) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterRp == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterRp is required and cannot be null."));
        }
        if (clusterResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter clusterResourceName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (extensionInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter extensionInstanceName is required and cannot be null."));
        }
        if (extensionInstance == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter extensionInstance is required and cannot be null."));
        } else {
            extensionInstance.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .create(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            clusterRp,
                            clusterResourceName,
                            clusterName,
                            extensionInstanceName,
                            this.client.getApiVersion(),
                            extensionInstance,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Create a new Kubernetes Cluster Extension Instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or
     *     Microsoft.Kubernetes (for OnPrem K8S clusters).
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or
     *     connectedClusters (for OnPrem K8S clusters).
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionInstanceName Name of an instance of the Extension.
     * @param extensionInstance Properties necessary to Create an Extension Instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Extension Instance object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ExtensionInstanceInner>> createWithResponseAsync(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ExtensionsClusterResourceName clusterResourceName,
        String clusterName,
        String extensionInstanceName,
        ExtensionInstanceInner extensionInstance,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterRp == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterRp is required and cannot be null."));
        }
        if (clusterResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter clusterResourceName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (extensionInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter extensionInstanceName is required and cannot be null."));
        }
        if (extensionInstance == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter extensionInstance is required and cannot be null."));
        } else {
            extensionInstance.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .create(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                clusterRp,
                clusterResourceName,
                clusterName,
                extensionInstanceName,
                this.client.getApiVersion(),
                extensionInstance,
                accept,
                context);
    }

    /**
     * Create a new Kubernetes Cluster Extension Instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or
     *     Microsoft.Kubernetes (for OnPrem K8S clusters).
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or
     *     connectedClusters (for OnPrem K8S clusters).
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionInstanceName Name of an instance of the Extension.
     * @param extensionInstance Properties necessary to Create an Extension Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Extension Instance object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ExtensionInstanceInner> createAsync(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ExtensionsClusterResourceName clusterResourceName,
        String clusterName,
        String extensionInstanceName,
        ExtensionInstanceInner extensionInstance) {
        return createWithResponseAsync(
                resourceGroupName,
                clusterRp,
                clusterResourceName,
                clusterName,
                extensionInstanceName,
                extensionInstance)
            .flatMap(
                (Response<ExtensionInstanceInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Create a new Kubernetes Cluster Extension Instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or
     *     Microsoft.Kubernetes (for OnPrem K8S clusters).
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or
     *     connectedClusters (for OnPrem K8S clusters).
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionInstanceName Name of an instance of the Extension.
     * @param extensionInstance Properties necessary to Create an Extension Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Extension Instance object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ExtensionInstanceInner create(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ExtensionsClusterResourceName clusterResourceName,
        String clusterName,
        String extensionInstanceName,
        ExtensionInstanceInner extensionInstance) {
        return createAsync(
                resourceGroupName,
                clusterRp,
                clusterResourceName,
                clusterName,
                extensionInstanceName,
                extensionInstance)
            .block();
    }

    /**
     * Create a new Kubernetes Cluster Extension Instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or
     *     Microsoft.Kubernetes (for OnPrem K8S clusters).
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or
     *     connectedClusters (for OnPrem K8S clusters).
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionInstanceName Name of an instance of the Extension.
     * @param extensionInstance Properties necessary to Create an Extension Instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Extension Instance object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ExtensionInstanceInner> createWithResponse(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ExtensionsClusterResourceName clusterResourceName,
        String clusterName,
        String extensionInstanceName,
        ExtensionInstanceInner extensionInstance,
        Context context) {
        return createWithResponseAsync(
                resourceGroupName,
                clusterRp,
                clusterResourceName,
                clusterName,
                extensionInstanceName,
                extensionInstance,
                context)
            .block();
    }

    /**
     * Gets details of the Kubernetes Cluster Extension Instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or
     *     Microsoft.Kubernetes (for OnPrem K8S clusters).
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or
     *     connectedClusters (for OnPrem K8S clusters).
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionInstanceName Name of an instance of the Extension.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the Kubernetes Cluster Extension Instance.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ExtensionInstanceInner>> getWithResponseAsync(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ExtensionsClusterResourceName clusterResourceName,
        String clusterName,
        String extensionInstanceName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterRp == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterRp is required and cannot be null."));
        }
        if (clusterResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter clusterResourceName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (extensionInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter extensionInstanceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            clusterRp,
                            clusterResourceName,
                            clusterName,
                            extensionInstanceName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets details of the Kubernetes Cluster Extension Instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or
     *     Microsoft.Kubernetes (for OnPrem K8S clusters).
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or
     *     connectedClusters (for OnPrem K8S clusters).
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionInstanceName Name of an instance of the Extension.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the Kubernetes Cluster Extension Instance.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ExtensionInstanceInner>> getWithResponseAsync(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ExtensionsClusterResourceName clusterResourceName,
        String clusterName,
        String extensionInstanceName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterRp == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterRp is required and cannot be null."));
        }
        if (clusterResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter clusterResourceName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (extensionInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter extensionInstanceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                clusterRp,
                clusterResourceName,
                clusterName,
                extensionInstanceName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Gets details of the Kubernetes Cluster Extension Instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or
     *     Microsoft.Kubernetes (for OnPrem K8S clusters).
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or
     *     connectedClusters (for OnPrem K8S clusters).
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionInstanceName Name of an instance of the Extension.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the Kubernetes Cluster Extension Instance.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ExtensionInstanceInner> getAsync(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ExtensionsClusterResourceName clusterResourceName,
        String clusterName,
        String extensionInstanceName) {
        return getWithResponseAsync(
                resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionInstanceName)
            .flatMap(
                (Response<ExtensionInstanceInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets details of the Kubernetes Cluster Extension Instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or
     *     Microsoft.Kubernetes (for OnPrem K8S clusters).
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or
     *     connectedClusters (for OnPrem K8S clusters).
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionInstanceName Name of an instance of the Extension.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the Kubernetes Cluster Extension Instance.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ExtensionInstanceInner get(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ExtensionsClusterResourceName clusterResourceName,
        String clusterName,
        String extensionInstanceName) {
        return getAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionInstanceName).block();
    }

    /**
     * Gets details of the Kubernetes Cluster Extension Instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or
     *     Microsoft.Kubernetes (for OnPrem K8S clusters).
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or
     *     connectedClusters (for OnPrem K8S clusters).
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionInstanceName Name of an instance of the Extension.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the Kubernetes Cluster Extension Instance.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ExtensionInstanceInner> getWithResponse(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ExtensionsClusterResourceName clusterResourceName,
        String clusterName,
        String extensionInstanceName,
        Context context) {
        return getWithResponseAsync(
                resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionInstanceName, context)
            .block();
    }

    /**
     * Update an existing Kubernetes Cluster Extension Instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or
     *     Microsoft.Kubernetes (for OnPrem K8S clusters).
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or
     *     connectedClusters (for OnPrem K8S clusters).
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionInstanceName Name of an instance of the Extension.
     * @param extensionInstance Properties to Update in the Extension Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Extension Instance object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ExtensionInstanceInner>> updateWithResponseAsync(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ExtensionsClusterResourceName clusterResourceName,
        String clusterName,
        String extensionInstanceName,
        ExtensionInstanceUpdate extensionInstance) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterRp == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterRp is required and cannot be null."));
        }
        if (clusterResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter clusterResourceName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (extensionInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter extensionInstanceName is required and cannot be null."));
        }
        if (extensionInstance == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter extensionInstance is required and cannot be null."));
        } else {
            extensionInstance.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            clusterRp,
                            clusterResourceName,
                            clusterName,
                            extensionInstanceName,
                            this.client.getApiVersion(),
                            extensionInstance,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Update an existing Kubernetes Cluster Extension Instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or
     *     Microsoft.Kubernetes (for OnPrem K8S clusters).
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or
     *     connectedClusters (for OnPrem K8S clusters).
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionInstanceName Name of an instance of the Extension.
     * @param extensionInstance Properties to Update in the Extension Instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Extension Instance object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ExtensionInstanceInner>> updateWithResponseAsync(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ExtensionsClusterResourceName clusterResourceName,
        String clusterName,
        String extensionInstanceName,
        ExtensionInstanceUpdate extensionInstance,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterRp == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterRp is required and cannot be null."));
        }
        if (clusterResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter clusterResourceName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (extensionInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter extensionInstanceName is required and cannot be null."));
        }
        if (extensionInstance == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter extensionInstance is required and cannot be null."));
        } else {
            extensionInstance.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .update(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                clusterRp,
                clusterResourceName,
                clusterName,
                extensionInstanceName,
                this.client.getApiVersion(),
                extensionInstance,
                accept,
                context);
    }

    /**
     * Update an existing Kubernetes Cluster Extension Instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or
     *     Microsoft.Kubernetes (for OnPrem K8S clusters).
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or
     *     connectedClusters (for OnPrem K8S clusters).
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionInstanceName Name of an instance of the Extension.
     * @param extensionInstance Properties to Update in the Extension Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Extension Instance object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ExtensionInstanceInner> updateAsync(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ExtensionsClusterResourceName clusterResourceName,
        String clusterName,
        String extensionInstanceName,
        ExtensionInstanceUpdate extensionInstance) {
        return updateWithResponseAsync(
                resourceGroupName,
                clusterRp,
                clusterResourceName,
                clusterName,
                extensionInstanceName,
                extensionInstance)
            .flatMap(
                (Response<ExtensionInstanceInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Update an existing Kubernetes Cluster Extension Instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or
     *     Microsoft.Kubernetes (for OnPrem K8S clusters).
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or
     *     connectedClusters (for OnPrem K8S clusters).
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionInstanceName Name of an instance of the Extension.
     * @param extensionInstance Properties to Update in the Extension Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Extension Instance object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ExtensionInstanceInner update(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ExtensionsClusterResourceName clusterResourceName,
        String clusterName,
        String extensionInstanceName,
        ExtensionInstanceUpdate extensionInstance) {
        return updateAsync(
                resourceGroupName,
                clusterRp,
                clusterResourceName,
                clusterName,
                extensionInstanceName,
                extensionInstance)
            .block();
    }

    /**
     * Update an existing Kubernetes Cluster Extension Instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or
     *     Microsoft.Kubernetes (for OnPrem K8S clusters).
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or
     *     connectedClusters (for OnPrem K8S clusters).
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionInstanceName Name of an instance of the Extension.
     * @param extensionInstance Properties to Update in the Extension Instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Extension Instance object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ExtensionInstanceInner> updateWithResponse(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ExtensionsClusterResourceName clusterResourceName,
        String clusterName,
        String extensionInstanceName,
        ExtensionInstanceUpdate extensionInstance,
        Context context) {
        return updateWithResponseAsync(
                resourceGroupName,
                clusterRp,
                clusterResourceName,
                clusterName,
                extensionInstanceName,
                extensionInstance,
                context)
            .block();
    }

    /**
     * Delete a Kubernetes Cluster Extension Instance. This will cause the Agent to Uninstall the extension instance
     * from the cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or
     *     Microsoft.Kubernetes (for OnPrem K8S clusters).
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or
     *     connectedClusters (for OnPrem K8S clusters).
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionInstanceName Name of an instance of the Extension.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ExtensionsClusterResourceName clusterResourceName,
        String clusterName,
        String extensionInstanceName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterRp == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterRp is required and cannot be null."));
        }
        if (clusterResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter clusterResourceName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (extensionInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter extensionInstanceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            clusterRp,
                            clusterResourceName,
                            clusterName,
                            extensionInstanceName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Delete a Kubernetes Cluster Extension Instance. This will cause the Agent to Uninstall the extension instance
     * from the cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or
     *     Microsoft.Kubernetes (for OnPrem K8S clusters).
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or
     *     connectedClusters (for OnPrem K8S clusters).
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionInstanceName Name of an instance of the Extension.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ExtensionsClusterResourceName clusterResourceName,
        String clusterName,
        String extensionInstanceName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterRp == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterRp is required and cannot be null."));
        }
        if (clusterResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter clusterResourceName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (extensionInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter extensionInstanceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                clusterRp,
                clusterResourceName,
                clusterName,
                extensionInstanceName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Delete a Kubernetes Cluster Extension Instance. This will cause the Agent to Uninstall the extension instance
     * from the cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or
     *     Microsoft.Kubernetes (for OnPrem K8S clusters).
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or
     *     connectedClusters (for OnPrem K8S clusters).
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionInstanceName Name of an instance of the Extension.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ExtensionsClusterResourceName clusterResourceName,
        String clusterName,
        String extensionInstanceName) {
        return deleteWithResponseAsync(
                resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionInstanceName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete a Kubernetes Cluster Extension Instance. This will cause the Agent to Uninstall the extension instance
     * from the cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or
     *     Microsoft.Kubernetes (for OnPrem K8S clusters).
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or
     *     connectedClusters (for OnPrem K8S clusters).
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionInstanceName Name of an instance of the Extension.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ExtensionsClusterResourceName clusterResourceName,
        String clusterName,
        String extensionInstanceName) {
        deleteAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionInstanceName).block();
    }

    /**
     * Delete a Kubernetes Cluster Extension Instance. This will cause the Agent to Uninstall the extension instance
     * from the cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or
     *     Microsoft.Kubernetes (for OnPrem K8S clusters).
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or
     *     connectedClusters (for OnPrem K8S clusters).
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionInstanceName Name of an instance of the Extension.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ExtensionsClusterResourceName clusterResourceName,
        String clusterName,
        String extensionInstanceName,
        Context context) {
        return deleteWithResponseAsync(
                resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionInstanceName, context)
            .block();
    }

    /**
     * List all Source Control Configurations.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or
     *     Microsoft.Kubernetes (for OnPrem K8S clusters).
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or
     *     connectedClusters (for OnPrem K8S clusters).
     * @param clusterName The name of the kubernetes cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list Extension Instances.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ExtensionInstanceInner>> listSinglePageAsync(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ExtensionsClusterResourceName clusterResourceName,
        String clusterName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterRp == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterRp is required and cannot be null."));
        }
        if (clusterResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter clusterResourceName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            clusterRp,
                            clusterResourceName,
                            clusterName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .<PagedResponse<ExtensionInstanceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * List all Source Control Configurations.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or
     *     Microsoft.Kubernetes (for OnPrem K8S clusters).
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or
     *     connectedClusters (for OnPrem K8S clusters).
     * @param clusterName The name of the kubernetes cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list Extension Instances.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ExtensionInstanceInner>> listSinglePageAsync(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ExtensionsClusterResourceName clusterResourceName,
        String clusterName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterRp == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterRp is required and cannot be null."));
        }
        if (clusterResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter clusterResourceName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                clusterRp,
                clusterResourceName,
                clusterName,
                this.client.getApiVersion(),
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * List all Source Control Configurations.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or
     *     Microsoft.Kubernetes (for OnPrem K8S clusters).
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or
     *     connectedClusters (for OnPrem K8S clusters).
     * @param clusterName The name of the kubernetes cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list Extension Instances.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ExtensionInstanceInner> listAsync(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ExtensionsClusterResourceName clusterResourceName,
        String clusterName) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * List all Source Control Configurations.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or
     *     Microsoft.Kubernetes (for OnPrem K8S clusters).
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or
     *     connectedClusters (for OnPrem K8S clusters).
     * @param clusterName The name of the kubernetes cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list Extension Instances.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ExtensionInstanceInner> listAsync(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ExtensionsClusterResourceName clusterResourceName,
        String clusterName,
        Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * List all Source Control Configurations.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or
     *     Microsoft.Kubernetes (for OnPrem K8S clusters).
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or
     *     connectedClusters (for OnPrem K8S clusters).
     * @param clusterName The name of the kubernetes cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list Extension Instances.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ExtensionInstanceInner> list(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ExtensionsClusterResourceName clusterResourceName,
        String clusterName) {
        return new PagedIterable<>(listAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName));
    }

    /**
     * List all Source Control Configurations.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterRp The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or
     *     Microsoft.Kubernetes (for OnPrem K8S clusters).
     * @param clusterResourceName The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or
     *     connectedClusters (for OnPrem K8S clusters).
     * @param clusterName The name of the kubernetes cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list Extension Instances.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ExtensionInstanceInner> list(
        String resourceGroupName,
        ExtensionsClusterRp clusterRp,
        ExtensionsClusterResourceName clusterResourceName,
        String clusterName,
        Context context) {
        return new PagedIterable<>(listAsync(resourceGroupName, clusterRp, clusterResourceName, clusterName, context));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list Extension Instances.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ExtensionInstanceInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ExtensionInstanceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list Extension Instances.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ExtensionInstanceInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
