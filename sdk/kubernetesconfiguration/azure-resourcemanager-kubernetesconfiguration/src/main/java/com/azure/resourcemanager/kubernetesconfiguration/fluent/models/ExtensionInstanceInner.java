// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesconfiguration.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.exception.ManagementError;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.kubernetesconfiguration.models.ConfigurationIdentity;
import com.azure.resourcemanager.kubernetesconfiguration.models.ExtensionStatus;
import com.azure.resourcemanager.kubernetesconfiguration.models.InstallStateType;
import com.azure.resourcemanager.kubernetesconfiguration.models.Scope;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** The Extension Instance object. */
@JsonFlatten
@Fluent
public class ExtensionInstanceInner extends ProxyResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ExtensionInstanceInner.class);

    /*
     * Type of the Extension, of which this resource is an instance of.  It
     * must be one of the Extension Types registered with
     * Microsoft.KubernetesConfiguration by the Extension publisher.
     */
    @JsonProperty(value = "properties.extensionType")
    private String extensionType;

    /*
     * Flag to note if this instance participates in auto upgrade of minor
     * version, or not.
     */
    @JsonProperty(value = "properties.autoUpgradeMinorVersion")
    private Boolean autoUpgradeMinorVersion;

    /*
     * ReleaseTrain this extension instance participates in for auto-upgrade
     * (e.g. Stable, Preview, etc.) - only if autoUpgradeMinorVersion is
     * 'true'.
     */
    @JsonProperty(value = "properties.releaseTrain")
    private String releaseTrain;

    /*
     * Version of the extension for this extension instance, if it is 'pinned'
     * to a specific version. autoUpgradeMinorVersion must be 'false'.
     */
    @JsonProperty(value = "properties.version")
    private String version;

    /*
     * Scope at which the extension instance is installed.
     */
    @JsonProperty(value = "properties.scope")
    private Scope scope;

    /*
     * Configuration settings, as name-value pairs for configuring this
     * instance of the extension.
     */
    @JsonProperty(value = "properties.configurationSettings")
    private Map<String, String> configurationSettings;

    /*
     * Configuration settings that are sensitive, as name-value pairs for
     * configuring this instance of the extension.
     */
    @JsonProperty(value = "properties.configurationProtectedSettings")
    private Map<String, String> configurationProtectedSettings;

    /*
     * Status of installation of this instance of the extension.
     */
    @JsonProperty(value = "properties.installState", access = JsonProperty.Access.WRITE_ONLY)
    private InstallStateType installState;

    /*
     * Status from this instance of the extension.
     */
    @JsonProperty(value = "properties.statuses")
    private List<ExtensionStatus> statuses;

    /*
     * DateLiteral (per ISO8601) noting the time the resource was created by
     * the client (user).
     */
    @JsonProperty(value = "properties.creationTime", access = JsonProperty.Access.WRITE_ONLY)
    private String creationTime;

    /*
     * DateLiteral (per ISO8601) noting the time the resource was modified by
     * the client (user).
     */
    @JsonProperty(value = "properties.lastModifiedTime", access = JsonProperty.Access.WRITE_ONLY)
    private String lastModifiedTime;

    /*
     * DateLiteral (per ISO8601) noting the time of last status from the agent.
     */
    @JsonProperty(value = "properties.lastStatusTime", access = JsonProperty.Access.WRITE_ONLY)
    private String lastStatusTime;

    /*
     * Error information from the Agent - e.g. errors during installation.
     */
    @JsonProperty(value = "properties.errorInfo", access = JsonProperty.Access.WRITE_ONLY)
    private ManagementError errorInfo;

    /*
     * The identity of the configuration.
     */
    @JsonProperty(value = "properties.identity")
    private ConfigurationIdentity identity;

    /**
     * Get the extensionType property: Type of the Extension, of which this resource is an instance of. It must be one
     * of the Extension Types registered with Microsoft.KubernetesConfiguration by the Extension publisher.
     *
     * @return the extensionType value.
     */
    public String extensionType() {
        return this.extensionType;
    }

    /**
     * Set the extensionType property: Type of the Extension, of which this resource is an instance of. It must be one
     * of the Extension Types registered with Microsoft.KubernetesConfiguration by the Extension publisher.
     *
     * @param extensionType the extensionType value to set.
     * @return the ExtensionInstanceInner object itself.
     */
    public ExtensionInstanceInner withExtensionType(String extensionType) {
        this.extensionType = extensionType;
        return this;
    }

    /**
     * Get the autoUpgradeMinorVersion property: Flag to note if this instance participates in auto upgrade of minor
     * version, or not.
     *
     * @return the autoUpgradeMinorVersion value.
     */
    public Boolean autoUpgradeMinorVersion() {
        return this.autoUpgradeMinorVersion;
    }

    /**
     * Set the autoUpgradeMinorVersion property: Flag to note if this instance participates in auto upgrade of minor
     * version, or not.
     *
     * @param autoUpgradeMinorVersion the autoUpgradeMinorVersion value to set.
     * @return the ExtensionInstanceInner object itself.
     */
    public ExtensionInstanceInner withAutoUpgradeMinorVersion(Boolean autoUpgradeMinorVersion) {
        this.autoUpgradeMinorVersion = autoUpgradeMinorVersion;
        return this;
    }

    /**
     * Get the releaseTrain property: ReleaseTrain this extension instance participates in for auto-upgrade (e.g.
     * Stable, Preview, etc.) - only if autoUpgradeMinorVersion is 'true'.
     *
     * @return the releaseTrain value.
     */
    public String releaseTrain() {
        return this.releaseTrain;
    }

    /**
     * Set the releaseTrain property: ReleaseTrain this extension instance participates in for auto-upgrade (e.g.
     * Stable, Preview, etc.) - only if autoUpgradeMinorVersion is 'true'.
     *
     * @param releaseTrain the releaseTrain value to set.
     * @return the ExtensionInstanceInner object itself.
     */
    public ExtensionInstanceInner withReleaseTrain(String releaseTrain) {
        this.releaseTrain = releaseTrain;
        return this;
    }

    /**
     * Get the version property: Version of the extension for this extension instance, if it is 'pinned' to a specific
     * version. autoUpgradeMinorVersion must be 'false'.
     *
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: Version of the extension for this extension instance, if it is 'pinned' to a specific
     * version. autoUpgradeMinorVersion must be 'false'.
     *
     * @param version the version value to set.
     * @return the ExtensionInstanceInner object itself.
     */
    public ExtensionInstanceInner withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the scope property: Scope at which the extension instance is installed.
     *
     * @return the scope value.
     */
    public Scope scope() {
        return this.scope;
    }

    /**
     * Set the scope property: Scope at which the extension instance is installed.
     *
     * @param scope the scope value to set.
     * @return the ExtensionInstanceInner object itself.
     */
    public ExtensionInstanceInner withScope(Scope scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Get the configurationSettings property: Configuration settings, as name-value pairs for configuring this instance
     * of the extension.
     *
     * @return the configurationSettings value.
     */
    public Map<String, String> configurationSettings() {
        return this.configurationSettings;
    }

    /**
     * Set the configurationSettings property: Configuration settings, as name-value pairs for configuring this instance
     * of the extension.
     *
     * @param configurationSettings the configurationSettings value to set.
     * @return the ExtensionInstanceInner object itself.
     */
    public ExtensionInstanceInner withConfigurationSettings(Map<String, String> configurationSettings) {
        this.configurationSettings = configurationSettings;
        return this;
    }

    /**
     * Get the configurationProtectedSettings property: Configuration settings that are sensitive, as name-value pairs
     * for configuring this instance of the extension.
     *
     * @return the configurationProtectedSettings value.
     */
    public Map<String, String> configurationProtectedSettings() {
        return this.configurationProtectedSettings;
    }

    /**
     * Set the configurationProtectedSettings property: Configuration settings that are sensitive, as name-value pairs
     * for configuring this instance of the extension.
     *
     * @param configurationProtectedSettings the configurationProtectedSettings value to set.
     * @return the ExtensionInstanceInner object itself.
     */
    public ExtensionInstanceInner withConfigurationProtectedSettings(
        Map<String, String> configurationProtectedSettings) {
        this.configurationProtectedSettings = configurationProtectedSettings;
        return this;
    }

    /**
     * Get the installState property: Status of installation of this instance of the extension.
     *
     * @return the installState value.
     */
    public InstallStateType installState() {
        return this.installState;
    }

    /**
     * Get the statuses property: Status from this instance of the extension.
     *
     * @return the statuses value.
     */
    public List<ExtensionStatus> statuses() {
        return this.statuses;
    }

    /**
     * Set the statuses property: Status from this instance of the extension.
     *
     * @param statuses the statuses value to set.
     * @return the ExtensionInstanceInner object itself.
     */
    public ExtensionInstanceInner withStatuses(List<ExtensionStatus> statuses) {
        this.statuses = statuses;
        return this;
    }

    /**
     * Get the creationTime property: DateLiteral (per ISO8601) noting the time the resource was created by the client
     * (user).
     *
     * @return the creationTime value.
     */
    public String creationTime() {
        return this.creationTime;
    }

    /**
     * Get the lastModifiedTime property: DateLiteral (per ISO8601) noting the time the resource was modified by the
     * client (user).
     *
     * @return the lastModifiedTime value.
     */
    public String lastModifiedTime() {
        return this.lastModifiedTime;
    }

    /**
     * Get the lastStatusTime property: DateLiteral (per ISO8601) noting the time of last status from the agent.
     *
     * @return the lastStatusTime value.
     */
    public String lastStatusTime() {
        return this.lastStatusTime;
    }

    /**
     * Get the errorInfo property: Error information from the Agent - e.g. errors during installation.
     *
     * @return the errorInfo value.
     */
    public ManagementError errorInfo() {
        return this.errorInfo;
    }

    /**
     * Get the identity property: The identity of the configuration.
     *
     * @return the identity value.
     */
    public ConfigurationIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: The identity of the configuration.
     *
     * @param identity the identity value to set.
     * @return the ExtensionInstanceInner object itself.
     */
    public ExtensionInstanceInner withIdentity(ConfigurationIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (scope() != null) {
            scope().validate();
        }
        if (statuses() != null) {
            statuses().forEach(e -> e.validate());
        }
        if (identity() != null) {
            identity().validate();
        }
    }
}
