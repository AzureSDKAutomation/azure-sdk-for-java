// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcehealth.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of PotentialOutages. */
public interface PotentialOutages {
    /**
     * Gets Azure services' potential outages.
     *
     * @param outageId The id of the potential outage.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure services' potential outages.
     */
    PotentialOutagesGetResult get(String outageId);

    /**
     * Gets Azure services' potential outages.
     *
     * @param outageId The id of the potential outage.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure services' potential outages.
     */
    Response<PotentialOutagesGetResult> getWithResponse(String outageId, Context context);

    /**
     * Lists Azure services' potential outages.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of potential outages.
     */
    PagedIterable<PotentialOutagesGetResult> list();

    /**
     * Lists Azure services' potential outages.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of potential outages.
     */
    PagedIterable<PotentialOutagesGetResult> list(Context context);
}
