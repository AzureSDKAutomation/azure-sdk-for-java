// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcehealth.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.ProxyResource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.resourcehealth.models.IcmIncidents;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/** The Get PotentialOutages operation response. */
@JsonFlatten
@Fluent
public class PotentialOutagesGetResultInner extends ProxyResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(PotentialOutagesGetResultInner.class);

    /*
     * Id for the potential outage.
     */
    @JsonProperty(value = "properties.outageId", access = JsonProperty.Access.WRITE_ONLY)
    private String outageId;

    /*
     * Title for the potential outage.
     */
    @JsonProperty(value = "properties.title", access = JsonProperty.Access.WRITE_ONLY)
    private String title;

    /*
     * Confidence score for the potential outage.
     */
    @JsonProperty(value = "properties.confidenceScore", access = JsonProperty.Access.WRITE_ONLY)
    private Float confidenceScore;

    /*
     * Confidence level for the potential outage.
     */
    @JsonProperty(value = "properties.confidence", access = JsonProperty.Access.WRITE_ONLY)
    private String confidence;

    /*
     * Regions impacted by potential outages.
     */
    @JsonProperty(value = "properties.impactedRegions", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> impactedRegions;

    /*
     * Time and date the potential outage is detected.
     */
    @JsonProperty(value = "properties.detectedDateTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime detectedDateTime;

    /*
     * Datacenters impacted by potential outages.
     */
    @JsonProperty(value = "properties.impactedDataCenters", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> impactedDataCenters;

    /*
     * Services impacted by potential outages.
     */
    @JsonProperty(value = "properties.impactedServices", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> impactedServices;

    /*
     * Resource types impacted by potential outages.
     */
    @JsonProperty(value = "properties.impactedResourceTypes", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> impactedResourceTypes;

    /*
     * Symptoms of potential outages.
     */
    @JsonProperty(value = "properties.symptoms", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> symptoms;

    /*
     * A list of outage incidents.
     */
    @JsonProperty(value = "properties.incidents")
    private List<IcmIncidents> incidents;

    /**
     * Get the outageId property: Id for the potential outage.
     *
     * @return the outageId value.
     */
    public String outageId() {
        return this.outageId;
    }

    /**
     * Get the title property: Title for the potential outage.
     *
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Get the confidenceScore property: Confidence score for the potential outage.
     *
     * @return the confidenceScore value.
     */
    public Float confidenceScore() {
        return this.confidenceScore;
    }

    /**
     * Get the confidence property: Confidence level for the potential outage.
     *
     * @return the confidence value.
     */
    public String confidence() {
        return this.confidence;
    }

    /**
     * Get the impactedRegions property: Regions impacted by potential outages.
     *
     * @return the impactedRegions value.
     */
    public List<String> impactedRegions() {
        return this.impactedRegions;
    }

    /**
     * Get the detectedDateTime property: Time and date the potential outage is detected.
     *
     * @return the detectedDateTime value.
     */
    public OffsetDateTime detectedDateTime() {
        return this.detectedDateTime;
    }

    /**
     * Get the impactedDataCenters property: Datacenters impacted by potential outages.
     *
     * @return the impactedDataCenters value.
     */
    public List<String> impactedDataCenters() {
        return this.impactedDataCenters;
    }

    /**
     * Get the impactedServices property: Services impacted by potential outages.
     *
     * @return the impactedServices value.
     */
    public List<String> impactedServices() {
        return this.impactedServices;
    }

    /**
     * Get the impactedResourceTypes property: Resource types impacted by potential outages.
     *
     * @return the impactedResourceTypes value.
     */
    public List<String> impactedResourceTypes() {
        return this.impactedResourceTypes;
    }

    /**
     * Get the symptoms property: Symptoms of potential outages.
     *
     * @return the symptoms value.
     */
    public List<String> symptoms() {
        return this.symptoms;
    }

    /**
     * Get the incidents property: A list of outage incidents.
     *
     * @return the incidents value.
     */
    public List<IcmIncidents> incidents() {
        return this.incidents;
    }

    /**
     * Set the incidents property: A list of outage incidents.
     *
     * @param incidents the incidents value to set.
     * @return the PotentialOutagesGetResultInner object itself.
     */
    public PotentialOutagesGetResultInner withIncidents(List<IcmIncidents> incidents) {
        this.incidents = incidents;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (incidents() != null) {
            incidents().forEach(e -> e.validate());
        }
    }
}
