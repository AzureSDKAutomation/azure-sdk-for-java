/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.loganalytics.v2020_10_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.arm.resources.models.Resource;
import com.microsoft.azure.arm.resources.models.GroupableResourceCore;
import com.microsoft.azure.arm.resources.models.HasResourceGroup;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.loganalytics.v2020_10_01.implementation.LogAnalyticsManager;
import java.util.List;
import com.microsoft.azure.management.loganalytics.v2020_10_01.implementation.ClusterInner;

/**
 * Type representing Cluster.
 */
public interface Cluster extends HasInner<ClusterInner>, Resource, GroupableResourceCore<LogAnalyticsManager, ClusterInner>, HasResourceGroup, Refreshable<Cluster>, Updatable<Cluster.Update>, HasManager<LogAnalyticsManager> {
    /**
     * @return the associatedWorkspaces value.
     */
    List<AssociatedWorkspace> associatedWorkspaces();

    /**
     * @return the billingType value.
     */
    BillingType billingType();

    /**
     * @return the capacityReservationProperties value.
     */
    CapacityReservationProperties capacityReservationProperties();

    /**
     * @return the clusterId value.
     */
    String clusterId();

    /**
     * @return the createdDate value.
     */
    String createdDate();

    /**
     * @return the identity value.
     */
    Identity identity();

    /**
     * @return the isAvailabilityZonesEnabled value.
     */
    Boolean isAvailabilityZonesEnabled();

    /**
     * @return the isDoubleEncryptionEnabled value.
     */
    Boolean isDoubleEncryptionEnabled();

    /**
     * @return the keyVaultProperties value.
     */
    KeyVaultProperties keyVaultProperties();

    /**
     * @return the lastModifiedDate value.
     */
    String lastModifiedDate();

    /**
     * @return the provisioningState value.
     */
    ClusterEntityStatus provisioningState();

    /**
     * @return the sku value.
     */
    ClusterSku sku();

    /**
     * The entirety of the Cluster definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithGroup, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of Cluster definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a Cluster definition.
         */
        interface Blank extends GroupableResourceCore.DefinitionWithRegion<WithGroup> {
        }

        /**
         * The stage of the Cluster definition allowing to specify the resource group.
         */
        interface WithGroup extends GroupableResourceCore.DefinitionStages.WithGroup<WithCreate> {
        }

        /**
         * The stage of the cluster definition allowing to specify AssociatedWorkspaces.
         */
        interface WithAssociatedWorkspaces {
            /**
             * Specifies associatedWorkspaces.
             * @param associatedWorkspaces The list of Log Analytics workspaces associated with the cluster
             * @return the next definition stage
             */
            WithCreate withAssociatedWorkspaces(List<AssociatedWorkspace> associatedWorkspaces);
        }

        /**
         * The stage of the cluster definition allowing to specify BillingType.
         */
        interface WithBillingType {
            /**
             * Specifies billingType.
             * @param billingType Configures whether billing will be only on the cluster or each workspace will be billed by its proportional use. This does not change the overall billing, only how it will be distributed. Default value is 'Cluster'. Possible values include: 'Cluster', 'Workspaces'
             * @return the next definition stage
             */
            WithCreate withBillingType(BillingType billingType);
        }

        /**
         * The stage of the cluster definition allowing to specify CapacityReservationProperties.
         */
        interface WithCapacityReservationProperties {
            /**
             * Specifies capacityReservationProperties.
             * @param capacityReservationProperties Additional properties for capacity reservation
             * @return the next definition stage
             */
            WithCreate withCapacityReservationProperties(CapacityReservationProperties capacityReservationProperties);
        }

        /**
         * The stage of the cluster definition allowing to specify Identity.
         */
        interface WithIdentity {
            /**
             * Specifies identity.
             * @param identity The identity of the resource
             * @return the next definition stage
             */
            WithCreate withIdentity(Identity identity);
        }

        /**
         * The stage of the cluster definition allowing to specify IsAvailabilityZonesEnabled.
         */
        interface WithIsAvailabilityZonesEnabled {
            /**
             * Specifies isAvailabilityZonesEnabled.
             * @param isAvailabilityZonesEnabled Sets whether the cluster will support availability zones. This can be set as true only in regions where Azure Data Explorer support Availability Zones. This Property can not be modified after cluster creation. Default value is 'true' if region supports Availability Zones
             * @return the next definition stage
             */
            WithCreate withIsAvailabilityZonesEnabled(Boolean isAvailabilityZonesEnabled);
        }

        /**
         * The stage of the cluster definition allowing to specify IsDoubleEncryptionEnabled.
         */
        interface WithIsDoubleEncryptionEnabled {
            /**
             * Specifies isDoubleEncryptionEnabled.
             * @param isDoubleEncryptionEnabled Configures whether cluster will use double encryption. This Property can not be modified after cluster creation. Default value is 'true'
             * @return the next definition stage
             */
            WithCreate withIsDoubleEncryptionEnabled(Boolean isDoubleEncryptionEnabled);
        }

        /**
         * The stage of the cluster definition allowing to specify KeyVaultProperties.
         */
        interface WithKeyVaultProperties {
            /**
             * Specifies keyVaultProperties.
             * @param keyVaultProperties The associated key properties
             * @return the next definition stage
             */
            WithCreate withKeyVaultProperties(KeyVaultProperties keyVaultProperties);
        }

        /**
         * The stage of the cluster definition allowing to specify Sku.
         */
        interface WithSku {
            /**
             * Specifies sku.
             * @param sku The sku properties
             * @return the next definition stage
             */
            WithCreate withSku(ClusterSku sku);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<Cluster>, Resource.DefinitionWithTags<WithCreate>, DefinitionStages.WithAssociatedWorkspaces, DefinitionStages.WithBillingType, DefinitionStages.WithCapacityReservationProperties, DefinitionStages.WithIdentity, DefinitionStages.WithIsAvailabilityZonesEnabled, DefinitionStages.WithIsDoubleEncryptionEnabled, DefinitionStages.WithKeyVaultProperties, DefinitionStages.WithSku {
        }
    }
    /**
     * The template for a Cluster update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<Cluster>, Resource.UpdateWithTags<Update>, UpdateStages.WithIdentity, UpdateStages.WithKeyVaultProperties, UpdateStages.WithSku {
    }

    /**
     * Grouping of Cluster update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the cluster update allowing to specify Identity.
         */
        interface WithIdentity {
            /**
             * Specifies identity.
             * @param identity The identity of the resource
             * @return the next update stage
             */
            Update withIdentity(Identity identity);
        }

        /**
         * The stage of the cluster update allowing to specify KeyVaultProperties.
         */
        interface WithKeyVaultProperties {
            /**
             * Specifies keyVaultProperties.
             * @param keyVaultProperties The associated key properties
             * @return the next update stage
             */
            Update withKeyVaultProperties(KeyVaultProperties keyVaultProperties);
        }

        /**
         * The stage of the cluster update allowing to specify Sku.
         */
        interface WithSku {
            /**
             * Specifies sku.
             * @param sku The sku properties
             * @return the next update stage
             */
            Update withSku(ClusterSku sku);
        }

    }
}
