// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.synapse.SynapseManager;
import com.azure.resourcemanager.synapse.fluent.ManagedPrivateEndpointsClient;
import com.azure.resourcemanager.synapse.fluent.models.ManagedPrivateEndpointInner;
import com.azure.resourcemanager.synapse.models.ManagedPrivateEndpoint;
import com.azure.resourcemanager.synapse.models.ManagedPrivateEndpoints;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ManagedPrivateEndpointsImpl implements ManagedPrivateEndpoints {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ManagedPrivateEndpointsImpl.class);

    private final ManagedPrivateEndpointsClient innerClient;

    private final SynapseManager serviceManager;

    public ManagedPrivateEndpointsImpl(ManagedPrivateEndpointsClient innerClient, SynapseManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public ManagedPrivateEndpoint get(
        String resourceGroupName,
        String workspaceName,
        String managedVirtualNetworkName,
        String managedPrivateEndpointName) {
        ManagedPrivateEndpointInner inner =
            this
                .serviceClient()
                .get(resourceGroupName, workspaceName, managedVirtualNetworkName, managedPrivateEndpointName);
        if (inner != null) {
            return new ManagedPrivateEndpointImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ManagedPrivateEndpoint> getWithResponse(
        String resourceGroupName,
        String workspaceName,
        String managedVirtualNetworkName,
        String managedPrivateEndpointName,
        Context context) {
        Response<ManagedPrivateEndpointInner> inner =
            this
                .serviceClient()
                .getWithResponse(
                    resourceGroupName, workspaceName, managedVirtualNetworkName, managedPrivateEndpointName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ManagedPrivateEndpointImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(
        String resourceGroupName,
        String workspaceName,
        String managedVirtualNetworkName,
        String managedPrivateEndpointName) {
        this
            .serviceClient()
            .delete(resourceGroupName, workspaceName, managedVirtualNetworkName, managedPrivateEndpointName);
    }

    public void delete(
        String resourceGroupName,
        String workspaceName,
        String managedVirtualNetworkName,
        String managedPrivateEndpointName,
        Context context) {
        this
            .serviceClient()
            .delete(resourceGroupName, workspaceName, managedVirtualNetworkName, managedPrivateEndpointName, context);
    }

    public PagedIterable<ManagedPrivateEndpoint> listByWorkspace(
        String resourceGroupName, String workspaceName, String managedVirtualNetworkName) {
        PagedIterable<ManagedPrivateEndpointInner> inner =
            this.serviceClient().listByWorkspace(resourceGroupName, workspaceName, managedVirtualNetworkName);
        return Utils.mapPage(inner, inner1 -> new ManagedPrivateEndpointImpl(inner1, this.manager()));
    }

    public PagedIterable<ManagedPrivateEndpoint> listByWorkspace(
        String resourceGroupName, String workspaceName, String managedVirtualNetworkName, Context context) {
        PagedIterable<ManagedPrivateEndpointInner> inner =
            this.serviceClient().listByWorkspace(resourceGroupName, workspaceName, managedVirtualNetworkName, context);
        return Utils.mapPage(inner, inner1 -> new ManagedPrivateEndpointImpl(inner1, this.manager()));
    }

    public ManagedPrivateEndpoint getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String managedVirtualNetworkName = Utils.getValueFromIdByName(id, "managedVirtualNetworks");
        if (managedVirtualNetworkName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedVirtualNetworks'.",
                                id)));
        }
        String managedPrivateEndpointName = Utils.getValueFromIdByName(id, "managedPrivateEndpoints");
        if (managedPrivateEndpointName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedPrivateEndpoints'.",
                                id)));
        }
        return this
            .getWithResponse(
                resourceGroupName, workspaceName, managedVirtualNetworkName, managedPrivateEndpointName, Context.NONE)
            .getValue();
    }

    public Response<ManagedPrivateEndpoint> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String managedVirtualNetworkName = Utils.getValueFromIdByName(id, "managedVirtualNetworks");
        if (managedVirtualNetworkName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedVirtualNetworks'.",
                                id)));
        }
        String managedPrivateEndpointName = Utils.getValueFromIdByName(id, "managedPrivateEndpoints");
        if (managedPrivateEndpointName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedPrivateEndpoints'.",
                                id)));
        }
        return this
            .getWithResponse(
                resourceGroupName, workspaceName, managedVirtualNetworkName, managedPrivateEndpointName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String managedVirtualNetworkName = Utils.getValueFromIdByName(id, "managedVirtualNetworks");
        if (managedVirtualNetworkName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedVirtualNetworks'.",
                                id)));
        }
        String managedPrivateEndpointName = Utils.getValueFromIdByName(id, "managedPrivateEndpoints");
        if (managedPrivateEndpointName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedPrivateEndpoints'.",
                                id)));
        }
        this
            .delete(
                resourceGroupName, workspaceName, managedVirtualNetworkName, managedPrivateEndpointName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        String managedVirtualNetworkName = Utils.getValueFromIdByName(id, "managedVirtualNetworks");
        if (managedVirtualNetworkName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedVirtualNetworks'.",
                                id)));
        }
        String managedPrivateEndpointName = Utils.getValueFromIdByName(id, "managedPrivateEndpoints");
        if (managedPrivateEndpointName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedPrivateEndpoints'.",
                                id)));
        }
        this.delete(resourceGroupName, workspaceName, managedVirtualNetworkName, managedPrivateEndpointName, context);
    }

    private ManagedPrivateEndpointsClient serviceClient() {
        return this.innerClient;
    }

    private SynapseManager manager() {
        return this.serviceManager;
    }

    public ManagedPrivateEndpointImpl define(String name) {
        return new ManagedPrivateEndpointImpl(name, this.manager());
    }
}
