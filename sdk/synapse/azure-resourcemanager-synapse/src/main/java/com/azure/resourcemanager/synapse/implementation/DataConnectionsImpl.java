// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.synapse.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.synapse.fluent.DataConnectionsClient;
import com.azure.resourcemanager.synapse.fluent.models.DataConnectionInner;
import com.azure.resourcemanager.synapse.models.DataConnection;
import com.azure.resourcemanager.synapse.models.DataConnections;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class DataConnectionsImpl implements DataConnections {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DataConnectionsImpl.class);

    private final DataConnectionsClient innerClient;

    private final com.azure.resourcemanager.synapse.SynapseManager serviceManager;

    public DataConnectionsImpl(
        DataConnectionsClient innerClient, com.azure.resourcemanager.synapse.SynapseManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<DataConnection> listByDatabase(
        String resourceGroupName, String workspaceName, String kustoPoolName, String databaseName) {
        PagedIterable<DataConnectionInner> inner =
            this.serviceClient().listByDatabase(resourceGroupName, workspaceName, kustoPoolName, databaseName);
        return Utils.mapPage(inner, inner1 -> new DataConnectionImpl(inner1, this.manager()));
    }

    public PagedIterable<DataConnection> listByDatabase(
        String resourceGroupName, String workspaceName, String kustoPoolName, String databaseName, Context context) {
        PagedIterable<DataConnectionInner> inner =
            this.serviceClient().listByDatabase(resourceGroupName, workspaceName, kustoPoolName, databaseName, context);
        return Utils.mapPage(inner, inner1 -> new DataConnectionImpl(inner1, this.manager()));
    }

    public DataConnection get(
        String resourceGroupName,
        String workspaceName,
        String kustoPoolName,
        String databaseName,
        String dataConnectionName) {
        DataConnectionInner inner =
            this.serviceClient().get(resourceGroupName, workspaceName, kustoPoolName, databaseName, dataConnectionName);
        if (inner != null) {
            return new DataConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DataConnection> getWithResponse(
        String resourceGroupName,
        String workspaceName,
        String kustoPoolName,
        String databaseName,
        String dataConnectionName,
        Context context) {
        Response<DataConnectionInner> inner =
            this
                .serviceClient()
                .getWithResponse(
                    resourceGroupName, workspaceName, kustoPoolName, databaseName, dataConnectionName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DataConnectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DataConnection createOrUpdate(
        String resourceGroupName,
        String workspaceName,
        String kustoPoolName,
        String databaseName,
        String dataConnectionName,
        DataConnectionInner parameters) {
        DataConnectionInner inner =
            this
                .serviceClient()
                .createOrUpdate(
                    resourceGroupName, workspaceName, kustoPoolName, databaseName, dataConnectionName, parameters);
        if (inner != null) {
            return new DataConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public DataConnection createOrUpdate(
        String resourceGroupName,
        String workspaceName,
        String kustoPoolName,
        String databaseName,
        String dataConnectionName,
        DataConnectionInner parameters,
        Context context) {
        DataConnectionInner inner =
            this
                .serviceClient()
                .createOrUpdate(
                    resourceGroupName,
                    workspaceName,
                    kustoPoolName,
                    databaseName,
                    dataConnectionName,
                    parameters,
                    context);
        if (inner != null) {
            return new DataConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public DataConnection update(
        String resourceGroupName,
        String workspaceName,
        String kustoPoolName,
        String databaseName,
        String dataConnectionName,
        DataConnectionInner parameters) {
        DataConnectionInner inner =
            this
                .serviceClient()
                .update(resourceGroupName, workspaceName, kustoPoolName, databaseName, dataConnectionName, parameters);
        if (inner != null) {
            return new DataConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public DataConnection update(
        String resourceGroupName,
        String workspaceName,
        String kustoPoolName,
        String databaseName,
        String dataConnectionName,
        DataConnectionInner parameters,
        Context context) {
        DataConnectionInner inner =
            this
                .serviceClient()
                .update(
                    resourceGroupName,
                    workspaceName,
                    kustoPoolName,
                    databaseName,
                    dataConnectionName,
                    parameters,
                    context);
        if (inner != null) {
            return new DataConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(
        String resourceGroupName,
        String workspaceName,
        String kustoPoolName,
        String databaseName,
        String dataConnectionName) {
        this.serviceClient().delete(resourceGroupName, workspaceName, kustoPoolName, databaseName, dataConnectionName);
    }

    public void delete(
        String resourceGroupName,
        String workspaceName,
        String kustoPoolName,
        String databaseName,
        String dataConnectionName,
        Context context) {
        this
            .serviceClient()
            .delete(resourceGroupName, workspaceName, kustoPoolName, databaseName, dataConnectionName, context);
    }

    private DataConnectionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.synapse.SynapseManager manager() {
        return this.serviceManager;
    }
}
