// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.SubResource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.containerservice.generated.models.ExtensionAddonPropertiesIdentity;
import com.azure.resourcemanager.containerservice.generated.models.ExtensionAddonProvisioningState;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Extension add-on. */
@JsonFlatten
@Fluent
public class ExtensionAddonInner extends SubResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ExtensionAddonInner.class);

    /*
     * The system metadata related to this resource.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /*
     * The current provisioning state of extension add-on.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ExtensionAddonProvisioningState provisioningState;

    /*
     * Corresponding name if the add-on is also embedded in AKS.
     */
    @JsonProperty(value = "properties.addonName")
    private String addonName;

    /*
     * Whether managed identity is required for the extension add-on or not.
     */
    @JsonProperty(value = "properties.enableManagedIdentity")
    private Boolean enableManagedIdentity;

    /*
     * Information of user assigned identity used by this add-on.
     */
    @JsonProperty(value = "properties.identity", access = JsonProperty.Access.WRITE_ONLY)
    private ExtensionAddonPropertiesIdentity identity;

    /*
     * The name of the resource that is unique within a resource group. This
     * name can be used to access the resource.
     */
    @JsonProperty(value = "name", access = JsonProperty.Access.WRITE_ONLY)
    private String name;

    /*
     * Resource type
     */
    @JsonProperty(value = "type", access = JsonProperty.Access.WRITE_ONLY)
    private String type;

    /**
     * Get the systemData property: The system metadata related to this resource.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the provisioningState property: The current provisioning state of extension add-on.
     *
     * @return the provisioningState value.
     */
    public ExtensionAddonProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the addonName property: Corresponding name if the add-on is also embedded in AKS.
     *
     * @return the addonName value.
     */
    public String addonName() {
        return this.addonName;
    }

    /**
     * Set the addonName property: Corresponding name if the add-on is also embedded in AKS.
     *
     * @param addonName the addonName value to set.
     * @return the ExtensionAddonInner object itself.
     */
    public ExtensionAddonInner withAddonName(String addonName) {
        this.addonName = addonName;
        return this;
    }

    /**
     * Get the enableManagedIdentity property: Whether managed identity is required for the extension add-on or not.
     *
     * @return the enableManagedIdentity value.
     */
    public Boolean enableManagedIdentity() {
        return this.enableManagedIdentity;
    }

    /**
     * Set the enableManagedIdentity property: Whether managed identity is required for the extension add-on or not.
     *
     * @param enableManagedIdentity the enableManagedIdentity value to set.
     * @return the ExtensionAddonInner object itself.
     */
    public ExtensionAddonInner withEnableManagedIdentity(Boolean enableManagedIdentity) {
        this.enableManagedIdentity = enableManagedIdentity;
        return this;
    }

    /**
     * Get the identity property: Information of user assigned identity used by this add-on.
     *
     * @return the identity value.
     */
    public ExtensionAddonPropertiesIdentity identity() {
        return this.identity;
    }

    /**
     * Get the name property: The name of the resource that is unique within a resource group. This name can be used to
     * access the resource.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the type property: Resource type.
     *
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /** {@inheritDoc} */
    @Override
    public ExtensionAddonInner withId(String id) {
        super.withId(id);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (identity() != null) {
            identity().validate();
        }
    }
}
