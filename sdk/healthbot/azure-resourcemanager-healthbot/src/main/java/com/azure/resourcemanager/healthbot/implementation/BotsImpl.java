// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthbot.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.healthbot.HealthbotManager;
import com.azure.resourcemanager.healthbot.fluent.BotsClient;
import com.azure.resourcemanager.healthbot.fluent.models.CheckNameAvailabilityResponseBodyInner;
import com.azure.resourcemanager.healthbot.fluent.models.HealthBotInner;
import com.azure.resourcemanager.healthbot.models.Bots;
import com.azure.resourcemanager.healthbot.models.CheckNameAvailabilityRequestBody;
import com.azure.resourcemanager.healthbot.models.CheckNameAvailabilityResponseBody;
import com.azure.resourcemanager.healthbot.models.HealthBot;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class BotsImpl implements Bots {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(BotsImpl.class);

    private final BotsClient innerClient;

    private final HealthbotManager serviceManager;

    public BotsImpl(BotsClient innerClient, HealthbotManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public CheckNameAvailabilityResponseBody getCheckNameAvailability(CheckNameAvailabilityRequestBody parameters) {
        CheckNameAvailabilityResponseBodyInner inner = this.serviceClient().getCheckNameAvailability(parameters);
        if (inner != null) {
            return new CheckNameAvailabilityResponseBodyImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CheckNameAvailabilityResponseBody> getCheckNameAvailabilityWithResponse(
        CheckNameAvailabilityRequestBody parameters, Context context) {
        Response<CheckNameAvailabilityResponseBodyInner> inner =
            this.serviceClient().getCheckNameAvailabilityWithResponse(parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CheckNameAvailabilityResponseBodyImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<HealthBot> listByResourceGroup(String resourceGroupName) {
        PagedIterable<HealthBotInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return inner.mapPage(inner1 -> new HealthBotImpl(inner1, this.manager()));
    }

    public PagedIterable<HealthBot> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<HealthBotInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return inner.mapPage(inner1 -> new HealthBotImpl(inner1, this.manager()));
    }

    public PagedIterable<HealthBot> list() {
        PagedIterable<HealthBotInner> inner = this.serviceClient().list();
        return inner.mapPage(inner1 -> new HealthBotImpl(inner1, this.manager()));
    }

    public PagedIterable<HealthBot> list(Context context) {
        PagedIterable<HealthBotInner> inner = this.serviceClient().list(context);
        return inner.mapPage(inner1 -> new HealthBotImpl(inner1, this.manager()));
    }

    private BotsClient serviceClient() {
        return this.innerClient;
    }

    private HealthbotManager manager() {
        return this.serviceManager;
    }
}
