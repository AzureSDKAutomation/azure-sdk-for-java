// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cdn.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Defines the parameters for the origin group override action. */
@Fluent
public final class OriginGroupOverrideActionParameters {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(OriginGroupOverrideActionParameters.class);

    /*
     * The @odata.type property.
     */
    @JsonProperty(value = "@odata.type", required = true)
    private String odataType;

    /*
     * defines the OriginGroup that would override the DefaultOriginGroup.
     */
    @JsonProperty(value = "originGroup", required = true)
    private ResourceReference originGroup;

    /*
     * The routeType property.
     */
    @JsonProperty(value = "routeType", required = true)
    private RouteType routeType;

    /*
     * Protocol this rule will use when forwarding traffic to backends.
     */
    @JsonProperty(value = "forwardingProtocol")
    private ForwardingProtocol forwardingProtocol;

    /*
     * The caching configuration associated with this rule.
     */
    @JsonProperty(value = "cacheConfiguration")
    private CacheConfiguration cacheConfiguration;

    /*
     * The url rewrite configuration associated with this rule.
     */
    @JsonProperty(value = "urlRewriteConfiguration")
    private UrlRewriteActionParameters urlRewriteConfiguration;

    /*
     * The url redirect configuration associated with this rule.
     */
    @JsonProperty(value = "urlRedirectConfiguration")
    private UrlRedirectActionParameters urlRedirectConfiguration;

    /** Creates an instance of OriginGroupOverrideActionParameters class. */
    public OriginGroupOverrideActionParameters() {
        odataType = "#Microsoft.Azure.Cdn.Models.DeliveryRuleOriginGroupOverrideActionParameters";
    }

    /**
     * Get the odataType property: The @odata.type property.
     *
     * @return the odataType value.
     */
    public String odataType() {
        return this.odataType;
    }

    /**
     * Set the odataType property: The @odata.type property.
     *
     * @param odataType the odataType value to set.
     * @return the OriginGroupOverrideActionParameters object itself.
     */
    public OriginGroupOverrideActionParameters withOdataType(String odataType) {
        this.odataType = odataType;
        return this;
    }

    /**
     * Get the originGroup property: defines the OriginGroup that would override the DefaultOriginGroup.
     *
     * @return the originGroup value.
     */
    public ResourceReference originGroup() {
        return this.originGroup;
    }

    /**
     * Set the originGroup property: defines the OriginGroup that would override the DefaultOriginGroup.
     *
     * @param originGroup the originGroup value to set.
     * @return the OriginGroupOverrideActionParameters object itself.
     */
    public OriginGroupOverrideActionParameters withOriginGroup(ResourceReference originGroup) {
        this.originGroup = originGroup;
        return this;
    }

    /**
     * Get the routeType property: The routeType property.
     *
     * @return the routeType value.
     */
    public RouteType routeType() {
        return this.routeType;
    }

    /**
     * Set the routeType property: The routeType property.
     *
     * @param routeType the routeType value to set.
     * @return the OriginGroupOverrideActionParameters object itself.
     */
    public OriginGroupOverrideActionParameters withRouteType(RouteType routeType) {
        this.routeType = routeType;
        return this;
    }

    /**
     * Get the forwardingProtocol property: Protocol this rule will use when forwarding traffic to backends.
     *
     * @return the forwardingProtocol value.
     */
    public ForwardingProtocol forwardingProtocol() {
        return this.forwardingProtocol;
    }

    /**
     * Set the forwardingProtocol property: Protocol this rule will use when forwarding traffic to backends.
     *
     * @param forwardingProtocol the forwardingProtocol value to set.
     * @return the OriginGroupOverrideActionParameters object itself.
     */
    public OriginGroupOverrideActionParameters withForwardingProtocol(ForwardingProtocol forwardingProtocol) {
        this.forwardingProtocol = forwardingProtocol;
        return this;
    }

    /**
     * Get the cacheConfiguration property: The caching configuration associated with this rule.
     *
     * @return the cacheConfiguration value.
     */
    public CacheConfiguration cacheConfiguration() {
        return this.cacheConfiguration;
    }

    /**
     * Set the cacheConfiguration property: The caching configuration associated with this rule.
     *
     * @param cacheConfiguration the cacheConfiguration value to set.
     * @return the OriginGroupOverrideActionParameters object itself.
     */
    public OriginGroupOverrideActionParameters withCacheConfiguration(CacheConfiguration cacheConfiguration) {
        this.cacheConfiguration = cacheConfiguration;
        return this;
    }

    /**
     * Get the urlRewriteConfiguration property: The url rewrite configuration associated with this rule.
     *
     * @return the urlRewriteConfiguration value.
     */
    public UrlRewriteActionParameters urlRewriteConfiguration() {
        return this.urlRewriteConfiguration;
    }

    /**
     * Set the urlRewriteConfiguration property: The url rewrite configuration associated with this rule.
     *
     * @param urlRewriteConfiguration the urlRewriteConfiguration value to set.
     * @return the OriginGroupOverrideActionParameters object itself.
     */
    public OriginGroupOverrideActionParameters withUrlRewriteConfiguration(
        UrlRewriteActionParameters urlRewriteConfiguration) {
        this.urlRewriteConfiguration = urlRewriteConfiguration;
        return this;
    }

    /**
     * Get the urlRedirectConfiguration property: The url redirect configuration associated with this rule.
     *
     * @return the urlRedirectConfiguration value.
     */
    public UrlRedirectActionParameters urlRedirectConfiguration() {
        return this.urlRedirectConfiguration;
    }

    /**
     * Set the urlRedirectConfiguration property: The url redirect configuration associated with this rule.
     *
     * @param urlRedirectConfiguration the urlRedirectConfiguration value to set.
     * @return the OriginGroupOverrideActionParameters object itself.
     */
    public OriginGroupOverrideActionParameters withUrlRedirectConfiguration(
        UrlRedirectActionParameters urlRedirectConfiguration) {
        this.urlRedirectConfiguration = urlRedirectConfiguration;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (originGroup() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property originGroup in model OriginGroupOverrideActionParameters"));
        } else {
            originGroup().validate();
        }
        if (routeType() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property routeType in model OriginGroupOverrideActionParameters"));
        }
        if (cacheConfiguration() != null) {
            cacheConfiguration().validate();
        }
        if (urlRewriteConfiguration() != null) {
            urlRewriteConfiguration().validate();
        }
        if (urlRedirectConfiguration() != null) {
            urlRedirectConfiguration().validate();
        }
    }
}
