// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.providerhub.ProviderhubManager;
import com.azure.resourcemanager.providerhub.fluent.NotificationRegistrationsClient;
import com.azure.resourcemanager.providerhub.fluent.models.NotificationRegistrationInner;
import com.azure.resourcemanager.providerhub.models.NotificationRegistration;
import com.azure.resourcemanager.providerhub.models.NotificationRegistrations;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class NotificationRegistrationsImpl implements NotificationRegistrations {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(NotificationRegistrationsImpl.class);

    private final NotificationRegistrationsClient innerClient;

    private final ProviderhubManager serviceManager;

    public NotificationRegistrationsImpl(
        NotificationRegistrationsClient innerClient, ProviderhubManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public NotificationRegistration get(String providerNamespace, String notificationRegistrationName) {
        NotificationRegistrationInner inner = this.serviceClient().get(providerNamespace, notificationRegistrationName);
        if (inner != null) {
            return new NotificationRegistrationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<NotificationRegistration> getWithResponse(
        String providerNamespace, String notificationRegistrationName, Context context) {
        Response<NotificationRegistrationInner> inner =
            this.serviceClient().getWithResponse(providerNamespace, notificationRegistrationName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new NotificationRegistrationImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public NotificationRegistration createOrUpdate(String providerNamespace, String notificationRegistrationName) {
        NotificationRegistrationInner inner =
            this.serviceClient().createOrUpdate(providerNamespace, notificationRegistrationName);
        if (inner != null) {
            return new NotificationRegistrationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<NotificationRegistration> createOrUpdateWithResponse(
        String providerNamespace, String notificationRegistrationName, Context context) {
        Response<NotificationRegistrationInner> inner =
            this.serviceClient().createOrUpdateWithResponse(providerNamespace, notificationRegistrationName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new NotificationRegistrationImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String providerNamespace, String notificationRegistrationName) {
        this.serviceClient().delete(providerNamespace, notificationRegistrationName);
    }

    public Response<Void> deleteWithResponse(
        String providerNamespace, String notificationRegistrationName, Context context) {
        return this.serviceClient().deleteWithResponse(providerNamespace, notificationRegistrationName, context);
    }

    public PagedIterable<NotificationRegistration> listByProviderRegistration(String providerNamespace) {
        PagedIterable<NotificationRegistrationInner> inner =
            this.serviceClient().listByProviderRegistration(providerNamespace);
        return inner.mapPage(inner1 -> new NotificationRegistrationImpl(inner1, this.manager()));
    }

    public PagedIterable<NotificationRegistration> listByProviderRegistration(
        String providerNamespace, Context context) {
        PagedIterable<NotificationRegistrationInner> inner =
            this.serviceClient().listByProviderRegistration(providerNamespace, context);
        return inner.mapPage(inner1 -> new NotificationRegistrationImpl(inner1, this.manager()));
    }

    public NotificationRegistration get(String providerNamespace, String notificationRegistrationName) {
        NotificationRegistrationInner inner = this.serviceClient().get(providerNamespace, notificationRegistrationName);
        if (inner != null) {
            return new NotificationRegistrationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<NotificationRegistration> getWithResponse(
        String providerNamespace, String notificationRegistrationName, Context context) {
        Response<NotificationRegistrationInner> inner =
            this.serviceClient().getWithResponse(providerNamespace, notificationRegistrationName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new NotificationRegistrationImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public NotificationRegistration createOrUpdate(String providerNamespace, String notificationRegistrationName) {
        NotificationRegistrationInner inner =
            this.serviceClient().createOrUpdate(providerNamespace, notificationRegistrationName);
        if (inner != null) {
            return new NotificationRegistrationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<NotificationRegistration> createOrUpdateWithResponse(
        String providerNamespace, String notificationRegistrationName, Context context) {
        Response<NotificationRegistrationInner> inner =
            this.serviceClient().createOrUpdateWithResponse(providerNamespace, notificationRegistrationName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new NotificationRegistrationImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String providerNamespace, String notificationRegistrationName) {
        this.serviceClient().delete(providerNamespace, notificationRegistrationName);
    }

    public Response<Void> deleteWithResponse(
        String providerNamespace, String notificationRegistrationName, Context context) {
        return this.serviceClient().deleteWithResponse(providerNamespace, notificationRegistrationName, context);
    }

    public PagedIterable<NotificationRegistration> listByProviderRegistration(String providerNamespace) {
        PagedIterable<NotificationRegistrationInner> inner =
            this.serviceClient().listByProviderRegistration(providerNamespace);
        return inner.mapPage(inner1 -> new NotificationRegistrationImpl(inner1, this.manager()));
    }

    public PagedIterable<NotificationRegistration> listByProviderRegistration(
        String providerNamespace, Context context) {
        PagedIterable<NotificationRegistrationInner> inner =
            this.serviceClient().listByProviderRegistration(providerNamespace, context);
        return inner.mapPage(inner1 -> new NotificationRegistrationImpl(inner1, this.manager()));
    }

    private NotificationRegistrationsClient serviceClient() {
        return this.innerClient;
    }

    private ProviderhubManager manager() {
        return this.serviceManager;
    }
}
