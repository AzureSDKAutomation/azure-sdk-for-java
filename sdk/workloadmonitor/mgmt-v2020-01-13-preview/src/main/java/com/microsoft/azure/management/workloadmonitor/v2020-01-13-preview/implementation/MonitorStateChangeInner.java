/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.workloadmonitor.v2020-01-13-preview.implementation;

import com.microsoft.azure.management.workloadmonitor.v2020-01-13-preview.HealthState;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;

/**
 * Monitor State Change.
 * Information about a state transition of a monitor.
 */
@JsonFlatten
public class MonitorStateChangeInner {
    /**
     * Arm ID.
     * Arm ID of this monitor.
     */
    @JsonProperty(value = "id", required = true)
    private String id;

    /**
     * Name of resource.
     * Timestamp of state change (in unix).
     */
    @JsonProperty(value = "name", required = true)
    private String name;

    /**
     * Resource type.
     * Type of ARM resource.
     */
    @JsonProperty(value = "type", required = true)
    private String type;

    /**
     * Monitor Name.
     * Human-readable name of this monitor.
     */
    @JsonProperty(value = "properties.monitorName")
    private String monitorName;

    /**
     * Monitor Type.
     * Type of this monitor.
     */
    @JsonProperty(value = "properties.monitorType")
    private String monitorType;

    /**
     * Monitored Object.
     * Dynamic monitored object of this monitor.
     */
    @JsonProperty(value = "properties.monitoredObject")
    private String monitoredObject;

    /**
     * Timestamp.
     * Timestamp of that this event ocurred.
     */
    @JsonProperty(value = "properties.evaluationTimestamp")
    private String evaluationTimestamp;

    /**
     * Timestamp.
     * Timestamp of that this health state first ocurred.
     */
    @JsonProperty(value = "properties.currentStateFirstObservedTimestamp")
    private String currentStateFirstObservedTimestamp;

    /**
     * Previous Health State.
     * Previous health state. Possible values include: 'Healthy', 'Critical',
     * 'Warning', 'Unknown'.
     */
    @JsonProperty(value = "properties.previousMonitorState")
    private HealthState previousMonitorState;

    /**
     * New Health State.
     * New health state. Possible values include: 'Healthy', 'Critical',
     * 'Warning', 'Unknown'.
     */
    @JsonProperty(value = "properties.currentMonitorState")
    private HealthState currentMonitorState;

    /**
     * Evidence.
     * Evidence of this monitor's last state change.
     */
    @JsonProperty(value = "properties.evidence")
    private Object evidence;

    /**
     * Configuration.
     * Configuration settings at the time of this monitor's last state change.
     */
    @JsonProperty(value = "properties.monitorConfiguration")
    private Object monitorConfiguration;

    /**
     * Get arm ID of this monitor.
     *
     * @return the id value
     */
    public String id() {
        return this.id;
    }

    /**
     * Set arm ID of this monitor.
     *
     * @param id the id value to set
     * @return the MonitorStateChangeInner object itself.
     */
    public MonitorStateChangeInner withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get timestamp of state change (in unix).
     *
     * @return the name value
     */
    public String name() {
        return this.name;
    }

    /**
     * Set timestamp of state change (in unix).
     *
     * @param name the name value to set
     * @return the MonitorStateChangeInner object itself.
     */
    public MonitorStateChangeInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get type of ARM resource.
     *
     * @return the type value
     */
    public String type() {
        return this.type;
    }

    /**
     * Set type of ARM resource.
     *
     * @param type the type value to set
     * @return the MonitorStateChangeInner object itself.
     */
    public MonitorStateChangeInner withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get human-readable name of this monitor.
     *
     * @return the monitorName value
     */
    public String monitorName() {
        return this.monitorName;
    }

    /**
     * Set human-readable name of this monitor.
     *
     * @param monitorName the monitorName value to set
     * @return the MonitorStateChangeInner object itself.
     */
    public MonitorStateChangeInner withMonitorName(String monitorName) {
        this.monitorName = monitorName;
        return this;
    }

    /**
     * Get type of this monitor.
     *
     * @return the monitorType value
     */
    public String monitorType() {
        return this.monitorType;
    }

    /**
     * Set type of this monitor.
     *
     * @param monitorType the monitorType value to set
     * @return the MonitorStateChangeInner object itself.
     */
    public MonitorStateChangeInner withMonitorType(String monitorType) {
        this.monitorType = monitorType;
        return this;
    }

    /**
     * Get dynamic monitored object of this monitor.
     *
     * @return the monitoredObject value
     */
    public String monitoredObject() {
        return this.monitoredObject;
    }

    /**
     * Set dynamic monitored object of this monitor.
     *
     * @param monitoredObject the monitoredObject value to set
     * @return the MonitorStateChangeInner object itself.
     */
    public MonitorStateChangeInner withMonitoredObject(String monitoredObject) {
        this.monitoredObject = monitoredObject;
        return this;
    }

    /**
     * Get timestamp of that this event ocurred.
     *
     * @return the evaluationTimestamp value
     */
    public String evaluationTimestamp() {
        return this.evaluationTimestamp;
    }

    /**
     * Set timestamp of that this event ocurred.
     *
     * @param evaluationTimestamp the evaluationTimestamp value to set
     * @return the MonitorStateChangeInner object itself.
     */
    public MonitorStateChangeInner withEvaluationTimestamp(String evaluationTimestamp) {
        this.evaluationTimestamp = evaluationTimestamp;
        return this;
    }

    /**
     * Get timestamp of that this health state first ocurred.
     *
     * @return the currentStateFirstObservedTimestamp value
     */
    public String currentStateFirstObservedTimestamp() {
        return this.currentStateFirstObservedTimestamp;
    }

    /**
     * Set timestamp of that this health state first ocurred.
     *
     * @param currentStateFirstObservedTimestamp the currentStateFirstObservedTimestamp value to set
     * @return the MonitorStateChangeInner object itself.
     */
    public MonitorStateChangeInner withCurrentStateFirstObservedTimestamp(String currentStateFirstObservedTimestamp) {
        this.currentStateFirstObservedTimestamp = currentStateFirstObservedTimestamp;
        return this;
    }

    /**
     * Get previous health state. Possible values include: 'Healthy', 'Critical', 'Warning', 'Unknown'.
     *
     * @return the previousMonitorState value
     */
    public HealthState previousMonitorState() {
        return this.previousMonitorState;
    }

    /**
     * Set previous health state. Possible values include: 'Healthy', 'Critical', 'Warning', 'Unknown'.
     *
     * @param previousMonitorState the previousMonitorState value to set
     * @return the MonitorStateChangeInner object itself.
     */
    public MonitorStateChangeInner withPreviousMonitorState(HealthState previousMonitorState) {
        this.previousMonitorState = previousMonitorState;
        return this;
    }

    /**
     * Get new health state. Possible values include: 'Healthy', 'Critical', 'Warning', 'Unknown'.
     *
     * @return the currentMonitorState value
     */
    public HealthState currentMonitorState() {
        return this.currentMonitorState;
    }

    /**
     * Set new health state. Possible values include: 'Healthy', 'Critical', 'Warning', 'Unknown'.
     *
     * @param currentMonitorState the currentMonitorState value to set
     * @return the MonitorStateChangeInner object itself.
     */
    public MonitorStateChangeInner withCurrentMonitorState(HealthState currentMonitorState) {
        this.currentMonitorState = currentMonitorState;
        return this;
    }

    /**
     * Get evidence of this monitor's last state change.
     *
     * @return the evidence value
     */
    public Object evidence() {
        return this.evidence;
    }

    /**
     * Set evidence of this monitor's last state change.
     *
     * @param evidence the evidence value to set
     * @return the MonitorStateChangeInner object itself.
     */
    public MonitorStateChangeInner withEvidence(Object evidence) {
        this.evidence = evidence;
        return this;
    }

    /**
     * Get configuration settings at the time of this monitor's last state change.
     *
     * @return the monitorConfiguration value
     */
    public Object monitorConfiguration() {
        return this.monitorConfiguration;
    }

    /**
     * Set configuration settings at the time of this monitor's last state change.
     *
     * @param monitorConfiguration the monitorConfiguration value to set
     * @return the MonitorStateChangeInner object itself.
     */
    public MonitorStateChangeInner withMonitorConfiguration(Object monitorConfiguration) {
        this.monitorConfiguration = monitorConfiguration;
        return this;
    }

}
