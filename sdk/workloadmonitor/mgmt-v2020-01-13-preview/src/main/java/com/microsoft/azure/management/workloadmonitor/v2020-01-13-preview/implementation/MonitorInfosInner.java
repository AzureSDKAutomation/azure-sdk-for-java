/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.workloadmonitor.v2020-01-13-preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.workloadmonitor.v2020-01-13-preview.DefaultErrorException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in MonitorInfos.
 */
public class MonitorInfosInner {
    /** The Retrofit service to perform REST calls. */
    private MonitorInfosService service;
    /** The service client containing this operation class. */
    private WorkloadMonitorAPIImpl client;

    /**
     * Initializes an instance of MonitorInfosInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public MonitorInfosInner(Retrofit retrofit, WorkloadMonitorAPIImpl client) {
        this.service = retrofit.create(MonitorInfosService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for MonitorInfos to be
     * used by Retrofit to perform actually REST calls.
     */
    interface MonitorInfosService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.workloadmonitor.v2020-01-13-preview.MonitorInfos get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.WorkloadMonitor/monitors/{monitorId}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceNamespace") String resourceNamespace, @Path("resourceType") String resourceType, @Path("resourceName") String resourceName, @Path("monitorId") String monitorId, @Query("api-version") String apiVersion, @Query("$expand") String expand, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get the current status of a monitor of a resource.
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MonitorInner object if successful.
     */
    public MonitorInner get(String subscriptionId, String resourceGroupName, String resourceNamespace, String resourceType, String resourceName, String monitorId) {
        return getWithServiceResponseAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId).toBlocking().single().body();
    }

    /**
     * Get the current status of a monitor of a resource.
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MonitorInner> getAsync(String subscriptionId, String resourceGroupName, String resourceNamespace, String resourceType, String resourceName, String monitorId, final ServiceCallback<MonitorInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId), serviceCallback);
    }

    /**
     * Get the current status of a monitor of a resource.
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MonitorInner object
     */
    public Observable<MonitorInner> getAsync(String subscriptionId, String resourceGroupName, String resourceNamespace, String resourceType, String resourceName, String monitorId) {
        return getWithServiceResponseAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId).map(new Func1<ServiceResponse<MonitorInner>, MonitorInner>() {
            @Override
            public MonitorInner call(ServiceResponse<MonitorInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the current status of a monitor of a resource.
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MonitorInner object
     */
    public Observable<ServiceResponse<MonitorInner>> getWithServiceResponseAsync(String subscriptionId, String resourceGroupName, String resourceNamespace, String resourceType, String resourceName, String monitorId) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceNamespace == null) {
            throw new IllegalArgumentException("Parameter resourceNamespace is required and cannot be null.");
        }
        if (resourceType == null) {
            throw new IllegalArgumentException("Parameter resourceType is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (monitorId == null) {
            throw new IllegalArgumentException("Parameter monitorId is required and cannot be null.");
        }
        final String expand = null;
        return service.get(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId, this.client.apiVersion(), expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<MonitorInner>>>() {
                @Override
                public Observable<ServiceResponse<MonitorInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<MonitorInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Get the current status of a monitor of a resource.
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @param expand ex: $expand=evidence,configuration
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MonitorInner object if successful.
     */
    public MonitorInner get(String subscriptionId, String resourceGroupName, String resourceNamespace, String resourceType, String resourceName, String monitorId, String expand) {
        return getWithServiceResponseAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId, expand).toBlocking().single().body();
    }

    /**
     * Get the current status of a monitor of a resource.
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @param expand ex: $expand=evidence,configuration
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MonitorInner> getAsync(String subscriptionId, String resourceGroupName, String resourceNamespace, String resourceType, String resourceName, String monitorId, String expand, final ServiceCallback<MonitorInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId, expand), serviceCallback);
    }

    /**
     * Get the current status of a monitor of a resource.
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @param expand ex: $expand=evidence,configuration
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MonitorInner object
     */
    public Observable<MonitorInner> getAsync(String subscriptionId, String resourceGroupName, String resourceNamespace, String resourceType, String resourceName, String monitorId, String expand) {
        return getWithServiceResponseAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId, expand).map(new Func1<ServiceResponse<MonitorInner>, MonitorInner>() {
            @Override
            public MonitorInner call(ServiceResponse<MonitorInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the current status of a monitor of a resource.
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @param expand ex: $expand=evidence,configuration
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MonitorInner object
     */
    public Observable<ServiceResponse<MonitorInner>> getWithServiceResponseAsync(String subscriptionId, String resourceGroupName, String resourceNamespace, String resourceType, String resourceName, String monitorId, String expand) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceNamespace == null) {
            throw new IllegalArgumentException("Parameter resourceNamespace is required and cannot be null.");
        }
        if (resourceType == null) {
            throw new IllegalArgumentException("Parameter resourceType is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (monitorId == null) {
            throw new IllegalArgumentException("Parameter monitorId is required and cannot be null.");
        }
        return service.get(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId, this.client.apiVersion(), expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<MonitorInner>>>() {
                @Override
                public Observable<ServiceResponse<MonitorInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<MonitorInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<MonitorInner> getDelegate(Response<ResponseBody> response) throws DefaultErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<MonitorInner, DefaultErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<MonitorInner>() { }.getType())
                .registerError(DefaultErrorException.class)
                .build(response);
    }

}
