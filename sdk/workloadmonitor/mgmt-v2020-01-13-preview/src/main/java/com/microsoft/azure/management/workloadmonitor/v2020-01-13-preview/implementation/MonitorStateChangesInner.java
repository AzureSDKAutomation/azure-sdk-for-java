/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.workloadmonitor.v2020-01-13-preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.workloadmonitor.v2020-01-13-preview.DefaultErrorException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import org.joda.time.DateTime;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in MonitorStateChanges.
 */
public class MonitorStateChangesInner {
    /** The Retrofit service to perform REST calls. */
    private MonitorStateChangesService service;
    /** The service client containing this operation class. */
    private WorkloadMonitorAPIImpl client;

    /**
     * Initializes an instance of MonitorStateChangesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public MonitorStateChangesInner(Retrofit retrofit, WorkloadMonitorAPIImpl client) {
        this.service = retrofit.create(MonitorStateChangesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for MonitorStateChanges to be
     * used by Retrofit to perform actually REST calls.
     */
    interface MonitorStateChangesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.workloadmonitor.v2020-01-13-preview.MonitorStateChanges list" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.WorkloadMonitor/monitors/{monitorId}/history")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceNamespace") String resourceNamespace, @Path("resourceType") String resourceType, @Path("resourceName") String resourceName, @Path("monitorId") String monitorId, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Query("$expand") String expand, @Query("startTimestampUtc") DateTime startTimestampUtc, @Query("endTimestampUtc") DateTime endTimestampUtc, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.workloadmonitor.v2020-01-13-preview.MonitorStateChanges listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get history of a monitor of a resource (with optional filter).
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;MonitorStateChangeInner&gt; object if successful.
     */
    public PagedList<MonitorStateChangeInner> list(final String subscriptionId, final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName, final String monitorId) {
        ServiceResponse<Page<MonitorStateChangeInner>> response = listSinglePageAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId).toBlocking().single();
        return new PagedList<MonitorStateChangeInner>(response.body()) {
            @Override
            public Page<MonitorStateChangeInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get history of a monitor of a resource (with optional filter).
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<MonitorStateChangeInner>> listAsync(final String subscriptionId, final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName, final String monitorId, final ListOperationCallback<MonitorStateChangeInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId),
            new Func1<String, Observable<ServiceResponse<Page<MonitorStateChangeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MonitorStateChangeInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get history of a monitor of a resource (with optional filter).
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MonitorStateChangeInner&gt; object
     */
    public Observable<Page<MonitorStateChangeInner>> listAsync(final String subscriptionId, final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName, final String monitorId) {
        return listWithServiceResponseAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId)
            .map(new Func1<ServiceResponse<Page<MonitorStateChangeInner>>, Page<MonitorStateChangeInner>>() {
                @Override
                public Page<MonitorStateChangeInner> call(ServiceResponse<Page<MonitorStateChangeInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get history of a monitor of a resource (with optional filter).
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MonitorStateChangeInner&gt; object
     */
    public Observable<ServiceResponse<Page<MonitorStateChangeInner>>> listWithServiceResponseAsync(final String subscriptionId, final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName, final String monitorId) {
        return listSinglePageAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId)
            .concatMap(new Func1<ServiceResponse<Page<MonitorStateChangeInner>>, Observable<ServiceResponse<Page<MonitorStateChangeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MonitorStateChangeInner>>> call(ServiceResponse<Page<MonitorStateChangeInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get history of a monitor of a resource (with optional filter).
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;MonitorStateChangeInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<MonitorStateChangeInner>>> listSinglePageAsync(final String subscriptionId, final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName, final String monitorId) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceNamespace == null) {
            throw new IllegalArgumentException("Parameter resourceNamespace is required and cannot be null.");
        }
        if (resourceType == null) {
            throw new IllegalArgumentException("Parameter resourceType is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (monitorId == null) {
            throw new IllegalArgumentException("Parameter monitorId is required and cannot be null.");
        }
        final String filter = null;
        final String expand = null;
        final DateTime startTimestampUtc = null;
        final DateTime endTimestampUtc = null;
        return service.list(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId, this.client.apiVersion(), filter, expand, startTimestampUtc, endTimestampUtc, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<MonitorStateChangeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MonitorStateChangeInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<MonitorStateChangeInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<MonitorStateChangeInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Get history of a monitor of a resource (with optional filter).
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @param filter list example: $filter=monitorName eq 'logical-disks|C:|disk-free-space-mb'; history example: $filter=isHeartbeat eq false
     * @param expand ex: $expand=evidence,configuration
     * @param startTimestampUtc The start Timestamp for the desired history
     * @param endTimestampUtc The end Timestamp for the desired history
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;MonitorStateChangeInner&gt; object if successful.
     */
    public PagedList<MonitorStateChangeInner> list(final String subscriptionId, final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName, final String monitorId, final String filter, final String expand, final DateTime startTimestampUtc, final DateTime endTimestampUtc) {
        ServiceResponse<Page<MonitorStateChangeInner>> response = listSinglePageAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId, filter, expand, startTimestampUtc, endTimestampUtc).toBlocking().single();
        return new PagedList<MonitorStateChangeInner>(response.body()) {
            @Override
            public Page<MonitorStateChangeInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get history of a monitor of a resource (with optional filter).
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @param filter list example: $filter=monitorName eq 'logical-disks|C:|disk-free-space-mb'; history example: $filter=isHeartbeat eq false
     * @param expand ex: $expand=evidence,configuration
     * @param startTimestampUtc The start Timestamp for the desired history
     * @param endTimestampUtc The end Timestamp for the desired history
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<MonitorStateChangeInner>> listAsync(final String subscriptionId, final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName, final String monitorId, final String filter, final String expand, final DateTime startTimestampUtc, final DateTime endTimestampUtc, final ListOperationCallback<MonitorStateChangeInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId, filter, expand, startTimestampUtc, endTimestampUtc),
            new Func1<String, Observable<ServiceResponse<Page<MonitorStateChangeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MonitorStateChangeInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get history of a monitor of a resource (with optional filter).
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @param filter list example: $filter=monitorName eq 'logical-disks|C:|disk-free-space-mb'; history example: $filter=isHeartbeat eq false
     * @param expand ex: $expand=evidence,configuration
     * @param startTimestampUtc The start Timestamp for the desired history
     * @param endTimestampUtc The end Timestamp for the desired history
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MonitorStateChangeInner&gt; object
     */
    public Observable<Page<MonitorStateChangeInner>> listAsync(final String subscriptionId, final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName, final String monitorId, final String filter, final String expand, final DateTime startTimestampUtc, final DateTime endTimestampUtc) {
        return listWithServiceResponseAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId, filter, expand, startTimestampUtc, endTimestampUtc)
            .map(new Func1<ServiceResponse<Page<MonitorStateChangeInner>>, Page<MonitorStateChangeInner>>() {
                @Override
                public Page<MonitorStateChangeInner> call(ServiceResponse<Page<MonitorStateChangeInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get history of a monitor of a resource (with optional filter).
     *
     * @param subscriptionId The subscriptionId of the resource
     * @param resourceGroupName The resourceGroupName of the resource
     * @param resourceNamespace The resourceNamespace of the resource
     * @param resourceType The resourceType of the resource
     * @param resourceName The resourceType of the resource
     * @param monitorId The monitorId of the resource (url encoded)
     * @param filter list example: $filter=monitorName eq 'logical-disks|C:|disk-free-space-mb'; history example: $filter=isHeartbeat eq false
     * @param expand ex: $expand=evidence,configuration
     * @param startTimestampUtc The start Timestamp for the desired history
     * @param endTimestampUtc The end Timestamp for the desired history
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MonitorStateChangeInner&gt; object
     */
    public Observable<ServiceResponse<Page<MonitorStateChangeInner>>> listWithServiceResponseAsync(final String subscriptionId, final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName, final String monitorId, final String filter, final String expand, final DateTime startTimestampUtc, final DateTime endTimestampUtc) {
        return listSinglePageAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId, filter, expand, startTimestampUtc, endTimestampUtc)
            .concatMap(new Func1<ServiceResponse<Page<MonitorStateChangeInner>>, Observable<ServiceResponse<Page<MonitorStateChangeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MonitorStateChangeInner>>> call(ServiceResponse<Page<MonitorStateChangeInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get history of a monitor of a resource (with optional filter).
     *
    ServiceResponse<PageImpl<MonitorStateChangeInner>> * @param subscriptionId The subscriptionId of the resource
    ServiceResponse<PageImpl<MonitorStateChangeInner>> * @param resourceGroupName The resourceGroupName of the resource
    ServiceResponse<PageImpl<MonitorStateChangeInner>> * @param resourceNamespace The resourceNamespace of the resource
    ServiceResponse<PageImpl<MonitorStateChangeInner>> * @param resourceType The resourceType of the resource
    ServiceResponse<PageImpl<MonitorStateChangeInner>> * @param resourceName The resourceType of the resource
    ServiceResponse<PageImpl<MonitorStateChangeInner>> * @param monitorId The monitorId of the resource (url encoded)
    ServiceResponse<PageImpl<MonitorStateChangeInner>> * @param filter list example: $filter=monitorName eq 'logical-disks|C:|disk-free-space-mb'; history example: $filter=isHeartbeat eq false
    ServiceResponse<PageImpl<MonitorStateChangeInner>> * @param expand ex: $expand=evidence,configuration
    ServiceResponse<PageImpl<MonitorStateChangeInner>> * @param startTimestampUtc The start Timestamp for the desired history
    ServiceResponse<PageImpl<MonitorStateChangeInner>> * @param endTimestampUtc The end Timestamp for the desired history
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;MonitorStateChangeInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<MonitorStateChangeInner>>> listSinglePageAsync(final String subscriptionId, final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName, final String monitorId, final String filter, final String expand, final DateTime startTimestampUtc, final DateTime endTimestampUtc) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceNamespace == null) {
            throw new IllegalArgumentException("Parameter resourceNamespace is required and cannot be null.");
        }
        if (resourceType == null) {
            throw new IllegalArgumentException("Parameter resourceType is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (monitorId == null) {
            throw new IllegalArgumentException("Parameter monitorId is required and cannot be null.");
        }
        return service.list(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId, this.client.apiVersion(), filter, expand, startTimestampUtc, endTimestampUtc, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<MonitorStateChangeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MonitorStateChangeInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<MonitorStateChangeInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<MonitorStateChangeInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<MonitorStateChangeInner>> listDelegate(Response<ResponseBody> response) throws DefaultErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<MonitorStateChangeInner>, DefaultErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<MonitorStateChangeInner>>() { }.getType())
                .registerError(DefaultErrorException.class)
                .build(response);
    }

    /**
     * Get history of a monitor of a resource (with optional filter).
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;MonitorStateChangeInner&gt; object if successful.
     */
    public PagedList<MonitorStateChangeInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<MonitorStateChangeInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<MonitorStateChangeInner>(response.body()) {
            @Override
            public Page<MonitorStateChangeInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get history of a monitor of a resource (with optional filter).
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<MonitorStateChangeInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<MonitorStateChangeInner>> serviceFuture, final ListOperationCallback<MonitorStateChangeInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<MonitorStateChangeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MonitorStateChangeInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get history of a monitor of a resource (with optional filter).
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MonitorStateChangeInner&gt; object
     */
    public Observable<Page<MonitorStateChangeInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<MonitorStateChangeInner>>, Page<MonitorStateChangeInner>>() {
                @Override
                public Page<MonitorStateChangeInner> call(ServiceResponse<Page<MonitorStateChangeInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get history of a monitor of a resource (with optional filter).
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MonitorStateChangeInner&gt; object
     */
    public Observable<ServiceResponse<Page<MonitorStateChangeInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<MonitorStateChangeInner>>, Observable<ServiceResponse<Page<MonitorStateChangeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MonitorStateChangeInner>>> call(ServiceResponse<Page<MonitorStateChangeInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get history of a monitor of a resource (with optional filter).
     *
    ServiceResponse<PageImpl<MonitorStateChangeInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;MonitorStateChangeInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<MonitorStateChangeInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<MonitorStateChangeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MonitorStateChangeInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<MonitorStateChangeInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<MonitorStateChangeInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<MonitorStateChangeInner>> listNextDelegate(Response<ResponseBody> response) throws DefaultErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<MonitorStateChangeInner>, DefaultErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<MonitorStateChangeInner>>() { }.getType())
                .registerError(DefaultErrorException.class)
                .build(response);
    }

}
