/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.workloadmonitor.v2020-01-13-preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.workloadmonitor.v2020-01-13-preview.Monitors;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.workloadmonitor.v2020-01-13-preview.Monitor;

class MonitorsImpl extends WrapperImpl<MonitorsInner> implements Monitors {
    private final WorkloadMonitorManager manager;

    MonitorsImpl(WorkloadMonitorManager manager) {
        super(manager.inner().monitors());
        this.manager = manager;
    }

    public WorkloadMonitorManager manager() {
        return this.manager;
    }

    @Override
    public Observable<Monitor> listAsync(final String subscriptionId, final String resourceGroupName, final String resourceNamespace, final String resourceType, final String resourceName) {
        MonitorsInner client = this.inner();
        return client.listAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName)
        .flatMapIterable(new Func1<Page<MonitorInner>, Iterable<MonitorInner>>() {
            @Override
            public Iterable<MonitorInner> call(Page<MonitorInner> page) {
                return page.items();
            }
        })
        .map(new Func1<MonitorInner, Monitor>() {
            @Override
            public Monitor call(MonitorInner inner) {
                return new MonitorImpl(inner, manager());
            }
        });
    }

}
