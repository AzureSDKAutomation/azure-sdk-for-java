// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mixedreality.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.mixedreality.models.ObjectAnchorsAccountIdentity;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** ObjectAnchorsAccount Response. */
@JsonFlatten
@Fluent
public class ObjectAnchorsAccountInner extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ObjectAnchorsAccountInner.class);

    /*
     * The identity property.
     */
    @JsonProperty(value = "identity")
    private ObjectAnchorsAccountIdentity identity;

    /*
     * The system metadata related to an object anchors account.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /*
     * The name of the storage account associated with this accountId
     */
    @JsonProperty(value = "properties.storageAccountName")
    private String storageAccountName;

    /*
     * unique id of certain account.
     */
    @JsonProperty(value = "properties.accountId", access = JsonProperty.Access.WRITE_ONLY)
    private String accountId;

    /*
     * Correspond domain name of certain Spatial Anchors Account
     */
    @JsonProperty(value = "properties.accountDomain", access = JsonProperty.Access.WRITE_ONLY)
    private String accountDomain;

    /**
     * Get the identity property: The identity property.
     *
     * @return the identity value.
     */
    public ObjectAnchorsAccountIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: The identity property.
     *
     * @param identity the identity value to set.
     * @return the ObjectAnchorsAccountInner object itself.
     */
    public ObjectAnchorsAccountInner withIdentity(ObjectAnchorsAccountIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the systemData property: The system metadata related to an object anchors account.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the storageAccountName property: The name of the storage account associated with this accountId.
     *
     * @return the storageAccountName value.
     */
    public String storageAccountName() {
        return this.storageAccountName;
    }

    /**
     * Set the storageAccountName property: The name of the storage account associated with this accountId.
     *
     * @param storageAccountName the storageAccountName value to set.
     * @return the ObjectAnchorsAccountInner object itself.
     */
    public ObjectAnchorsAccountInner withStorageAccountName(String storageAccountName) {
        this.storageAccountName = storageAccountName;
        return this;
    }

    /**
     * Get the accountId property: unique id of certain account.
     *
     * @return the accountId value.
     */
    public String accountId() {
        return this.accountId;
    }

    /**
     * Get the accountDomain property: Correspond domain name of certain Spatial Anchors Account.
     *
     * @return the accountDomain value.
     */
    public String accountDomain() {
        return this.accountDomain;
    }

    /** {@inheritDoc} */
    @Override
    public ObjectAnchorsAccountInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ObjectAnchorsAccountInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (identity() != null) {
            identity().validate();
        }
    }
}
