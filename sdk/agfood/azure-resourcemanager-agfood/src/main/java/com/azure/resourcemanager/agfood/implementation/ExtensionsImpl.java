// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.agfood.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.agfood.fluent.ExtensionsClient;
import com.azure.resourcemanager.agfood.fluent.models.ExtensionInner;
import com.azure.resourcemanager.agfood.models.Extension;
import com.azure.resourcemanager.agfood.models.Extensions;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ExtensionsImpl implements Extensions {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ExtensionsImpl.class);

    private final ExtensionsClient innerClient;

    private final com.azure.resourcemanager.agfood.AgfoodManager serviceManager;

    public ExtensionsImpl(ExtensionsClient innerClient, com.azure.resourcemanager.agfood.AgfoodManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Extension create(String extensionId, String farmBeatsResourceName, String resourceGroupName) {
        ExtensionInner inner = this.serviceClient().create(extensionId, farmBeatsResourceName, resourceGroupName);
        if (inner != null) {
            return new ExtensionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Extension> createWithResponse(
        String extensionId, String farmBeatsResourceName, String resourceGroupName, Context context) {
        Response<ExtensionInner> inner =
            this.serviceClient().createWithResponse(extensionId, farmBeatsResourceName, resourceGroupName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ExtensionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Extension get(String extensionId, String farmBeatsResourceName, String resourceGroupName) {
        ExtensionInner inner = this.serviceClient().get(extensionId, farmBeatsResourceName, resourceGroupName);
        if (inner != null) {
            return new ExtensionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Extension> getWithResponse(
        String extensionId, String farmBeatsResourceName, String resourceGroupName, Context context) {
        Response<ExtensionInner> inner =
            this.serviceClient().getWithResponse(extensionId, farmBeatsResourceName, resourceGroupName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ExtensionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Extension update(String extensionId, String farmBeatsResourceName, String resourceGroupName) {
        ExtensionInner inner = this.serviceClient().update(extensionId, farmBeatsResourceName, resourceGroupName);
        if (inner != null) {
            return new ExtensionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Extension> updateWithResponse(
        String extensionId, String farmBeatsResourceName, String resourceGroupName, Context context) {
        Response<ExtensionInner> inner =
            this.serviceClient().updateWithResponse(extensionId, farmBeatsResourceName, resourceGroupName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ExtensionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String extensionId, String farmBeatsResourceName, String resourceGroupName) {
        this.serviceClient().delete(extensionId, farmBeatsResourceName, resourceGroupName);
    }

    public Response<Void> deleteWithResponse(
        String extensionId, String farmBeatsResourceName, String resourceGroupName, Context context) {
        return this.serviceClient().deleteWithResponse(extensionId, farmBeatsResourceName, resourceGroupName, context);
    }

    public PagedIterable<Extension> listByFarmBeats(String resourceGroupName, String farmBeatsResourceName) {
        PagedIterable<ExtensionInner> inner =
            this.serviceClient().listByFarmBeats(resourceGroupName, farmBeatsResourceName);
        return Utils.mapPage(inner, inner1 -> new ExtensionImpl(inner1, this.manager()));
    }

    public PagedIterable<Extension> listByFarmBeats(
        String resourceGroupName,
        String farmBeatsResourceName,
        String extensionId,
        String extensionCategory,
        Integer maxPageSize,
        String skipToken,
        Context context) {
        PagedIterable<ExtensionInner> inner =
            this
                .serviceClient()
                .listByFarmBeats(
                    resourceGroupName,
                    farmBeatsResourceName,
                    extensionId,
                    extensionCategory,
                    maxPageSize,
                    skipToken,
                    context);
        return Utils.mapPage(inner, inner1 -> new ExtensionImpl(inner1, this.manager()));
    }

    private ExtensionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.agfood.AgfoodManager manager() {
        return this.serviceManager;
    }
}
