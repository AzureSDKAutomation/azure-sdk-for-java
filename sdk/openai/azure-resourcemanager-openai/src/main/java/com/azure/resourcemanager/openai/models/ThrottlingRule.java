// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.openai.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The quota limit rules. */
@Fluent
public final class ThrottlingRule {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ThrottlingRule.class);

    /*
     * The rule key that uniquely identify the throttling rule.
     */
    @JsonProperty(value = "key")
    private String key;

    /*
     * The renewal period in seconds of call rate limit or quota limit.
     */
    @JsonProperty(value = "renewalPeriod")
    private Float renewalPeriod;

    /*
     * The count value of call rate limit or quota limit.
     */
    @JsonProperty(value = "count")
    private Float count;

    /*
     * The minimal count value of call rate limit or quota limit.
     */
    @JsonProperty(value = "minCount")
    private Float minCount;

    /*
     * A flag indicates if dynamical throttling is enabled.
     */
    @JsonProperty(value = "dynamicThrottlingEnabled")
    private Boolean dynamicThrottlingEnabled;

    /*
     * The patterns for matching the requests that need to apply this rule.
     */
    @JsonProperty(value = "matchPatterns")
    private List<RequestMatchPattern> matchPatterns;

    /**
     * Get the key property: The rule key that uniquely identify the throttling rule.
     *
     * @return the key value.
     */
    public String key() {
        return this.key;
    }

    /**
     * Set the key property: The rule key that uniquely identify the throttling rule.
     *
     * @param key the key value to set.
     * @return the ThrottlingRule object itself.
     */
    public ThrottlingRule withKey(String key) {
        this.key = key;
        return this;
    }

    /**
     * Get the renewalPeriod property: The renewal period in seconds of call rate limit or quota limit.
     *
     * @return the renewalPeriod value.
     */
    public Float renewalPeriod() {
        return this.renewalPeriod;
    }

    /**
     * Set the renewalPeriod property: The renewal period in seconds of call rate limit or quota limit.
     *
     * @param renewalPeriod the renewalPeriod value to set.
     * @return the ThrottlingRule object itself.
     */
    public ThrottlingRule withRenewalPeriod(Float renewalPeriod) {
        this.renewalPeriod = renewalPeriod;
        return this;
    }

    /**
     * Get the count property: The count value of call rate limit or quota limit.
     *
     * @return the count value.
     */
    public Float count() {
        return this.count;
    }

    /**
     * Set the count property: The count value of call rate limit or quota limit.
     *
     * @param count the count value to set.
     * @return the ThrottlingRule object itself.
     */
    public ThrottlingRule withCount(Float count) {
        this.count = count;
        return this;
    }

    /**
     * Get the minCount property: The minimal count value of call rate limit or quota limit.
     *
     * @return the minCount value.
     */
    public Float minCount() {
        return this.minCount;
    }

    /**
     * Set the minCount property: The minimal count value of call rate limit or quota limit.
     *
     * @param minCount the minCount value to set.
     * @return the ThrottlingRule object itself.
     */
    public ThrottlingRule withMinCount(Float minCount) {
        this.minCount = minCount;
        return this;
    }

    /**
     * Get the dynamicThrottlingEnabled property: A flag indicates if dynamical throttling is enabled.
     *
     * @return the dynamicThrottlingEnabled value.
     */
    public Boolean dynamicThrottlingEnabled() {
        return this.dynamicThrottlingEnabled;
    }

    /**
     * Set the dynamicThrottlingEnabled property: A flag indicates if dynamical throttling is enabled.
     *
     * @param dynamicThrottlingEnabled the dynamicThrottlingEnabled value to set.
     * @return the ThrottlingRule object itself.
     */
    public ThrottlingRule withDynamicThrottlingEnabled(Boolean dynamicThrottlingEnabled) {
        this.dynamicThrottlingEnabled = dynamicThrottlingEnabled;
        return this;
    }

    /**
     * Get the matchPatterns property: The patterns for matching the requests that need to apply this rule.
     *
     * @return the matchPatterns value.
     */
    public List<RequestMatchPattern> matchPatterns() {
        return this.matchPatterns;
    }

    /**
     * Set the matchPatterns property: The patterns for matching the requests that need to apply this rule.
     *
     * @param matchPatterns the matchPatterns value to set.
     * @return the ThrottlingRule object itself.
     */
    public ThrottlingRule withMatchPatterns(List<RequestMatchPattern> matchPatterns) {
        this.matchPatterns = matchPatterns;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (matchPatterns() != null) {
            matchPatterns().forEach(e -> e.validate());
        }
    }
}
