/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * jkl
 */

package com.microsoft.azure.management.policyinsights.v2019_10_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.policyinsights.v2019_10_01.Attestations;
import rx.Completable;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.policyinsights.v2019_10_01.Attestation;

class AttestationsImpl extends WrapperImpl<AttestationsInner> implements Attestations {
    private final PolicyInsightsManager manager;

    AttestationsImpl(PolicyInsightsManager manager) {
        super(manager.inner().attestations());
        this.manager = manager;
    }

    public PolicyInsightsManager manager() {
        return this.manager;
    }

    @Override
    public AttestationImpl define(String name) {
        return wrapModel(name);
    }

    private AttestationImpl wrapModel(AttestationInner inner) {
        return  new AttestationImpl(inner, manager());
    }

    private AttestationImpl wrapModel(String name) {
        return new AttestationImpl(name, this.manager());
    }

    @Override
    public Observable<Attestation> createOrUpdateAtSubscriptionAsync(String subscriptionId, String attestationName, AttestationInner parameters) {
        AttestationsInner client = this.inner();
        return client.createOrUpdateAtSubscriptionAsync(subscriptionId, attestationName, parameters)
        .map(new Func1<AttestationInner, Attestation>() {
            @Override
            public Attestation call(AttestationInner inner) {
                return new AttestationImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<Attestation> getAtSubscriptionAsync(String subscriptionId, String attestationName) {
        AttestationsInner client = this.inner();
        return client.getAtSubscriptionAsync(subscriptionId, attestationName)
        .map(new Func1<AttestationInner, Attestation>() {
            @Override
            public Attestation call(AttestationInner inner) {
                return new AttestationImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteAtSubscriptionAsync(String subscriptionId, String attestationName) {
        AttestationsInner client = this.inner();
        return client.deleteAtSubscriptionAsync(subscriptionId, attestationName).toCompletable();
    }

    @Override
    public Observable<Attestation> getByResourceGroupAsync(String subscriptionId, String resourceGroupName, String attestationName) {
        AttestationsInner client = this.inner();
        return client.getByResourceGroupAsync(subscriptionId, resourceGroupName, attestationName)
        .map(new Func1<AttestationInner, Attestation>() {
            @Override
            public Attestation call(AttestationInner inner) {
                return new AttestationImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteAtResourceGroupAsync(String subscriptionId, String resourceGroupName, String attestationName) {
        AttestationsInner client = this.inner();
        return client.deleteAtResourceGroupAsync(subscriptionId, resourceGroupName, attestationName).toCompletable();
    }

    @Override
    public Observable<Attestation> createOrUpdateAtResourceAsync(String resourceId, String attestationName, AttestationInner parameters) {
        AttestationsInner client = this.inner();
        return client.createOrUpdateAtResourceAsync(resourceId, attestationName, parameters)
        .map(new Func1<AttestationInner, Attestation>() {
            @Override
            public Attestation call(AttestationInner inner) {
                return new AttestationImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<Attestation> getAtResourceAsync(String resourceId, String attestationName) {
        AttestationsInner client = this.inner();
        return client.getAtResourceAsync(resourceId, attestationName)
        .map(new Func1<AttestationInner, Attestation>() {
            @Override
            public Attestation call(AttestationInner inner) {
                return new AttestationImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteAtResourceAsync(String resourceId, String attestationName) {
        AttestationsInner client = this.inner();
        return client.deleteAtResourceAsync(resourceId, attestationName).toCompletable();
    }

    @Override
    public Observable<Attestation> listAsync(final String subscriptionId) {
        AttestationsInner client = this.inner();
        return client.listAsync(subscriptionId)
        .flatMapIterable(new Func1<Page<AttestationInner>, Iterable<AttestationInner>>() {
            @Override
            public Iterable<AttestationInner> call(Page<AttestationInner> page) {
                return page.items();
            }
        })
        .map(new Func1<AttestationInner, Attestation>() {
            @Override
            public Attestation call(AttestationInner inner) {
                return new AttestationImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<Attestation> listByResourceGroupAsync(final String subscriptionId, final String resourceGroupName) {
        AttestationsInner client = this.inner();
        return client.listByResourceGroupAsync(subscriptionId, resourceGroupName)
        .flatMapIterable(new Func1<Page<AttestationInner>, Iterable<AttestationInner>>() {
            @Override
            public Iterable<AttestationInner> call(Page<AttestationInner> page) {
                return page.items();
            }
        })
        .map(new Func1<AttestationInner, Attestation>() {
            @Override
            public Attestation call(AttestationInner inner) {
                return new AttestationImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<Attestation> listForResourceAsync(final String resourceId) {
        AttestationsInner client = this.inner();
        return client.listForResourceAsync(resourceId)
        .flatMapIterable(new Func1<Page<AttestationInner>, Iterable<AttestationInner>>() {
            @Override
            public Iterable<AttestationInner> call(Page<AttestationInner> page) {
                return page.items();
            }
        })
        .map(new Func1<AttestationInner, Attestation>() {
            @Override
            public Attestation call(AttestationInner inner) {
                return new AttestationImpl(inner, manager());
            }
        });
    }

}
