/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.policyinsights.v2019_10_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.policyinsights.v2019_10_01.ErrorResponseException;
import com.microsoft.azure.management.policyinsights.v2019_10_01.QueryOptions;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Attestations.
 */
public class AttestationsInner {
    /** The Retrofit service to perform REST calls. */
    private AttestationsService service;
    /** The service client containing this operation class. */
    private PolicyInsightsClientImpl client;

    /**
     * Initializes an instance of AttestationsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public AttestationsInner(Retrofit retrofit, PolicyInsightsClientImpl client) {
        this.service = retrofit.create(AttestationsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Attestations to be
     * used by Retrofit to perform actually REST calls.
     */
    interface AttestationsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.Attestations list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/attestations")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$filter") String filter, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.Attestations createOrUpdateAtSubscription" })
        @PUT("subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/attestations/{attestationName}")
        Observable<Response<ResponseBody>> createOrUpdateAtSubscription(@Path("subscriptionId") String subscriptionId, @Path("attestationName") String attestationName, @Query("api-version") String apiVersion, @Body AttestationInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.Attestations beginCreateOrUpdateAtSubscription" })
        @PUT("subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/attestations/{attestationName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdateAtSubscription(@Path("subscriptionId") String subscriptionId, @Path("attestationName") String attestationName, @Query("api-version") String apiVersion, @Body AttestationInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.Attestations getAtSubscription" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/attestations/{attestationName}")
        Observable<Response<ResponseBody>> getAtSubscription(@Path("subscriptionId") String subscriptionId, @Path("attestationName") String attestationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.Attestations deleteAtSubscription" })
        @HTTP(path = "subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/attestations/{attestationName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteAtSubscription(@Path("subscriptionId") String subscriptionId, @Path("attestationName") String attestationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.Attestations listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/attestations")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$filter") String filter, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.Attestations createOrUpdateAtResourceGroup" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/attestations/{attestationName}")
        Observable<Response<ResponseBody>> createOrUpdateAtResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("attestationName") String attestationName, @Query("api-version") String apiVersion, @Body AttestationInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.Attestations beginCreateOrUpdateAtResourceGroup" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/attestations/{attestationName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdateAtResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("attestationName") String attestationName, @Query("api-version") String apiVersion, @Body AttestationInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.Attestations getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/attestations/{attestationName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("attestationName") String attestationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.Attestations deleteAtResourceGroup" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/attestations/{attestationName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteAtResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("attestationName") String attestationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.Attestations listForResource" })
        @GET("{resourceId}/providers/Microsoft.PolicyInsights/attestations")
        Observable<Response<ResponseBody>> listForResource(@Path(value = "resourceId", encoded = true) String resourceId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$filter") String filter, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.Attestations createOrUpdateAtResource" })
        @PUT("{resourceId}/providers/Microsoft.PolicyInsights/attestations/{attestationName}")
        Observable<Response<ResponseBody>> createOrUpdateAtResource(@Path(value = "resourceId", encoded = true) String resourceId, @Path("attestationName") String attestationName, @Query("api-version") String apiVersion, @Body AttestationInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.Attestations beginCreateOrUpdateAtResource" })
        @PUT("{resourceId}/providers/Microsoft.PolicyInsights/attestations/{attestationName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdateAtResource(@Path(value = "resourceId", encoded = true) String resourceId, @Path("attestationName") String attestationName, @Query("api-version") String apiVersion, @Body AttestationInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.Attestations getAtResource" })
        @GET("{resourceId}/providers/Microsoft.PolicyInsights/attestations/{attestationName}")
        Observable<Response<ResponseBody>> getAtResource(@Path(value = "resourceId", encoded = true) String resourceId, @Path("attestationName") String attestationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.Attestations deleteAtResource" })
        @HTTP(path = "{resourceId}/providers/Microsoft.PolicyInsights/attestations/{attestationName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteAtResource(@Path(value = "resourceId", encoded = true) String resourceId, @Path("attestationName") String attestationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.Attestations listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.Attestations listByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.Attestations listForResourceNext" })
        @GET
        Observable<Response<ResponseBody>> listForResourceNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets all attestations for the subscription.
     *
     * @param subscriptionId The ID of the target subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;AttestationInner&gt; object if successful.
     */
    public PagedList<AttestationInner> list(final String subscriptionId) {
        ServiceResponse<Page<AttestationInner>> response = listSinglePageAsync(subscriptionId).toBlocking().single();
        return new PagedList<AttestationInner>(response.body()) {
            @Override
            public Page<AttestationInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all attestations for the subscription.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<AttestationInner>> listAsync(final String subscriptionId, final ListOperationCallback<AttestationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(subscriptionId),
            new Func1<String, Observable<ServiceResponse<Page<AttestationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AttestationInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all attestations for the subscription.
     *
     * @param subscriptionId The ID of the target subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AttestationInner&gt; object
     */
    public Observable<Page<AttestationInner>> listAsync(final String subscriptionId) {
        return listWithServiceResponseAsync(subscriptionId)
            .map(new Func1<ServiceResponse<Page<AttestationInner>>, Page<AttestationInner>>() {
                @Override
                public Page<AttestationInner> call(ServiceResponse<Page<AttestationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all attestations for the subscription.
     *
     * @param subscriptionId The ID of the target subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AttestationInner&gt; object
     */
    public Observable<ServiceResponse<Page<AttestationInner>>> listWithServiceResponseAsync(final String subscriptionId) {
        return listSinglePageAsync(subscriptionId)
            .concatMap(new Func1<ServiceResponse<Page<AttestationInner>>, Observable<ServiceResponse<Page<AttestationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AttestationInner>>> call(ServiceResponse<Page<AttestationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all attestations for the subscription.
     *
     * @param subscriptionId The ID of the target subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;AttestationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<AttestationInner>>> listSinglePageAsync(final String subscriptionId) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        final String apiVersion = "2019-10-01";
        final QueryOptions queryOptions = null;
        Integer top = null;
        String filter = null;
        return service.list(subscriptionId, apiVersion, this.client.acceptLanguage(), top, filter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<AttestationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AttestationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<AttestationInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<AttestationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets all attestations for the subscription.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;AttestationInner&gt; object if successful.
     */
    public PagedList<AttestationInner> list(final String subscriptionId, final QueryOptions queryOptions) {
        ServiceResponse<Page<AttestationInner>> response = listSinglePageAsync(subscriptionId, queryOptions).toBlocking().single();
        return new PagedList<AttestationInner>(response.body()) {
            @Override
            public Page<AttestationInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all attestations for the subscription.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<AttestationInner>> listAsync(final String subscriptionId, final QueryOptions queryOptions, final ListOperationCallback<AttestationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(subscriptionId, queryOptions),
            new Func1<String, Observable<ServiceResponse<Page<AttestationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AttestationInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all attestations for the subscription.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AttestationInner&gt; object
     */
    public Observable<Page<AttestationInner>> listAsync(final String subscriptionId, final QueryOptions queryOptions) {
        return listWithServiceResponseAsync(subscriptionId, queryOptions)
            .map(new Func1<ServiceResponse<Page<AttestationInner>>, Page<AttestationInner>>() {
                @Override
                public Page<AttestationInner> call(ServiceResponse<Page<AttestationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all attestations for the subscription.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AttestationInner&gt; object
     */
    public Observable<ServiceResponse<Page<AttestationInner>>> listWithServiceResponseAsync(final String subscriptionId, final QueryOptions queryOptions) {
        return listSinglePageAsync(subscriptionId, queryOptions)
            .concatMap(new Func1<ServiceResponse<Page<AttestationInner>>, Observable<ServiceResponse<Page<AttestationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AttestationInner>>> call(ServiceResponse<Page<AttestationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all attestations for the subscription.
     *
    ServiceResponse<PageImpl<AttestationInner>> * @param subscriptionId The ID of the target subscription.
    ServiceResponse<PageImpl<AttestationInner>> * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;AttestationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<AttestationInner>>> listSinglePageAsync(final String subscriptionId, final QueryOptions queryOptions) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String apiVersion = "2019-10-01";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        return service.list(subscriptionId, apiVersion, this.client.acceptLanguage(), top, filter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<AttestationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AttestationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<AttestationInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<AttestationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<AttestationInner>> listDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<AttestationInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<AttestationInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Creates or updates an attestation at subscription scope.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AttestationInner object if successful.
     */
    public AttestationInner createOrUpdateAtSubscription(String subscriptionId, String attestationName, AttestationInner parameters) {
        return createOrUpdateAtSubscriptionWithServiceResponseAsync(subscriptionId, attestationName, parameters).toBlocking().last().body();
    }

    /**
     * Creates or updates an attestation at subscription scope.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AttestationInner> createOrUpdateAtSubscriptionAsync(String subscriptionId, String attestationName, AttestationInner parameters, final ServiceCallback<AttestationInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateAtSubscriptionWithServiceResponseAsync(subscriptionId, attestationName, parameters), serviceCallback);
    }

    /**
     * Creates or updates an attestation at subscription scope.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<AttestationInner> createOrUpdateAtSubscriptionAsync(String subscriptionId, String attestationName, AttestationInner parameters) {
        return createOrUpdateAtSubscriptionWithServiceResponseAsync(subscriptionId, attestationName, parameters).map(new Func1<ServiceResponse<AttestationInner>, AttestationInner>() {
            @Override
            public AttestationInner call(ServiceResponse<AttestationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates an attestation at subscription scope.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<AttestationInner>> createOrUpdateAtSubscriptionWithServiceResponseAsync(String subscriptionId, String attestationName, AttestationInner parameters) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (attestationName == null) {
            throw new IllegalArgumentException("Parameter attestationName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2019-10-01";
        Observable<Response<ResponseBody>> observable = service.createOrUpdateAtSubscription(subscriptionId, attestationName, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<AttestationInner>() { }.getType());
    }

    /**
     * Creates or updates an attestation at subscription scope.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AttestationInner object if successful.
     */
    public AttestationInner beginCreateOrUpdateAtSubscription(String subscriptionId, String attestationName, AttestationInner parameters) {
        return beginCreateOrUpdateAtSubscriptionWithServiceResponseAsync(subscriptionId, attestationName, parameters).toBlocking().single().body();
    }

    /**
     * Creates or updates an attestation at subscription scope.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AttestationInner> beginCreateOrUpdateAtSubscriptionAsync(String subscriptionId, String attestationName, AttestationInner parameters, final ServiceCallback<AttestationInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateAtSubscriptionWithServiceResponseAsync(subscriptionId, attestationName, parameters), serviceCallback);
    }

    /**
     * Creates or updates an attestation at subscription scope.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AttestationInner object
     */
    public Observable<AttestationInner> beginCreateOrUpdateAtSubscriptionAsync(String subscriptionId, String attestationName, AttestationInner parameters) {
        return beginCreateOrUpdateAtSubscriptionWithServiceResponseAsync(subscriptionId, attestationName, parameters).map(new Func1<ServiceResponse<AttestationInner>, AttestationInner>() {
            @Override
            public AttestationInner call(ServiceResponse<AttestationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates an attestation at subscription scope.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AttestationInner object
     */
    public Observable<ServiceResponse<AttestationInner>> beginCreateOrUpdateAtSubscriptionWithServiceResponseAsync(String subscriptionId, String attestationName, AttestationInner parameters) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (attestationName == null) {
            throw new IllegalArgumentException("Parameter attestationName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2019-10-01";
        return service.beginCreateOrUpdateAtSubscription(subscriptionId, attestationName, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AttestationInner>>>() {
                @Override
                public Observable<ServiceResponse<AttestationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AttestationInner> clientResponse = beginCreateOrUpdateAtSubscriptionDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AttestationInner> beginCreateOrUpdateAtSubscriptionDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AttestationInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AttestationInner>() { }.getType())
                .register(201, new TypeToken<AttestationInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets an existing attestation at subscription scope.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param attestationName The name of the attestation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AttestationInner object if successful.
     */
    public AttestationInner getAtSubscription(String subscriptionId, String attestationName) {
        return getAtSubscriptionWithServiceResponseAsync(subscriptionId, attestationName).toBlocking().single().body();
    }

    /**
     * Gets an existing attestation at subscription scope.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param attestationName The name of the attestation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AttestationInner> getAtSubscriptionAsync(String subscriptionId, String attestationName, final ServiceCallback<AttestationInner> serviceCallback) {
        return ServiceFuture.fromResponse(getAtSubscriptionWithServiceResponseAsync(subscriptionId, attestationName), serviceCallback);
    }

    /**
     * Gets an existing attestation at subscription scope.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param attestationName The name of the attestation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AttestationInner object
     */
    public Observable<AttestationInner> getAtSubscriptionAsync(String subscriptionId, String attestationName) {
        return getAtSubscriptionWithServiceResponseAsync(subscriptionId, attestationName).map(new Func1<ServiceResponse<AttestationInner>, AttestationInner>() {
            @Override
            public AttestationInner call(ServiceResponse<AttestationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets an existing attestation at subscription scope.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param attestationName The name of the attestation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AttestationInner object
     */
    public Observable<ServiceResponse<AttestationInner>> getAtSubscriptionWithServiceResponseAsync(String subscriptionId, String attestationName) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (attestationName == null) {
            throw new IllegalArgumentException("Parameter attestationName is required and cannot be null.");
        }
        final String apiVersion = "2019-10-01";
        return service.getAtSubscription(subscriptionId, attestationName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AttestationInner>>>() {
                @Override
                public Observable<ServiceResponse<AttestationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AttestationInner> clientResponse = getAtSubscriptionDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AttestationInner> getAtSubscriptionDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AttestationInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AttestationInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Deletes an existing attestation at subscription scope.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param attestationName The name of the attestation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void deleteAtSubscription(String subscriptionId, String attestationName) {
        deleteAtSubscriptionWithServiceResponseAsync(subscriptionId, attestationName).toBlocking().single().body();
    }

    /**
     * Deletes an existing attestation at subscription scope.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param attestationName The name of the attestation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAtSubscriptionAsync(String subscriptionId, String attestationName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteAtSubscriptionWithServiceResponseAsync(subscriptionId, attestationName), serviceCallback);
    }

    /**
     * Deletes an existing attestation at subscription scope.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param attestationName The name of the attestation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAtSubscriptionAsync(String subscriptionId, String attestationName) {
        return deleteAtSubscriptionWithServiceResponseAsync(subscriptionId, attestationName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes an existing attestation at subscription scope.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param attestationName The name of the attestation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteAtSubscriptionWithServiceResponseAsync(String subscriptionId, String attestationName) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (attestationName == null) {
            throw new IllegalArgumentException("Parameter attestationName is required and cannot be null.");
        }
        final String apiVersion = "2019-10-01";
        return service.deleteAtSubscription(subscriptionId, attestationName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteAtSubscriptionDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteAtSubscriptionDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets all attestations for the resource group.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;AttestationInner&gt; object if successful.
     */
    public PagedList<AttestationInner> listByResourceGroup(final String subscriptionId, final String resourceGroupName) {
        ServiceResponse<Page<AttestationInner>> response = listByResourceGroupSinglePageAsync(subscriptionId, resourceGroupName).toBlocking().single();
        return new PagedList<AttestationInner>(response.body()) {
            @Override
            public Page<AttestationInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all attestations for the resource group.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<AttestationInner>> listByResourceGroupAsync(final String subscriptionId, final String resourceGroupName, final ListOperationCallback<AttestationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(subscriptionId, resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<AttestationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AttestationInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all attestations for the resource group.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AttestationInner&gt; object
     */
    public Observable<Page<AttestationInner>> listByResourceGroupAsync(final String subscriptionId, final String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName)
            .map(new Func1<ServiceResponse<Page<AttestationInner>>, Page<AttestationInner>>() {
                @Override
                public Page<AttestationInner> call(ServiceResponse<Page<AttestationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all attestations for the resource group.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AttestationInner&gt; object
     */
    public Observable<ServiceResponse<Page<AttestationInner>>> listByResourceGroupWithServiceResponseAsync(final String subscriptionId, final String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(subscriptionId, resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<AttestationInner>>, Observable<ServiceResponse<Page<AttestationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AttestationInner>>> call(ServiceResponse<Page<AttestationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all attestations for the resource group.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;AttestationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<AttestationInner>>> listByResourceGroupSinglePageAsync(final String subscriptionId, final String resourceGroupName) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        final String apiVersion = "2019-10-01";
        final QueryOptions queryOptions = null;
        Integer top = null;
        String filter = null;
        return service.listByResourceGroup(subscriptionId, resourceGroupName, apiVersion, this.client.acceptLanguage(), top, filter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<AttestationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AttestationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<AttestationInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<AttestationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets all attestations for the resource group.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;AttestationInner&gt; object if successful.
     */
    public PagedList<AttestationInner> listByResourceGroup(final String subscriptionId, final String resourceGroupName, final QueryOptions queryOptions) {
        ServiceResponse<Page<AttestationInner>> response = listByResourceGroupSinglePageAsync(subscriptionId, resourceGroupName, queryOptions).toBlocking().single();
        return new PagedList<AttestationInner>(response.body()) {
            @Override
            public Page<AttestationInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all attestations for the resource group.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<AttestationInner>> listByResourceGroupAsync(final String subscriptionId, final String resourceGroupName, final QueryOptions queryOptions, final ListOperationCallback<AttestationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(subscriptionId, resourceGroupName, queryOptions),
            new Func1<String, Observable<ServiceResponse<Page<AttestationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AttestationInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all attestations for the resource group.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AttestationInner&gt; object
     */
    public Observable<Page<AttestationInner>> listByResourceGroupAsync(final String subscriptionId, final String resourceGroupName, final QueryOptions queryOptions) {
        return listByResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName, queryOptions)
            .map(new Func1<ServiceResponse<Page<AttestationInner>>, Page<AttestationInner>>() {
                @Override
                public Page<AttestationInner> call(ServiceResponse<Page<AttestationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all attestations for the resource group.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AttestationInner&gt; object
     */
    public Observable<ServiceResponse<Page<AttestationInner>>> listByResourceGroupWithServiceResponseAsync(final String subscriptionId, final String resourceGroupName, final QueryOptions queryOptions) {
        return listByResourceGroupSinglePageAsync(subscriptionId, resourceGroupName, queryOptions)
            .concatMap(new Func1<ServiceResponse<Page<AttestationInner>>, Observable<ServiceResponse<Page<AttestationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AttestationInner>>> call(ServiceResponse<Page<AttestationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all attestations for the resource group.
     *
    ServiceResponse<PageImpl<AttestationInner>> * @param subscriptionId The ID of the target subscription.
    ServiceResponse<PageImpl<AttestationInner>> * @param resourceGroupName The name of the resource group. The name is case insensitive.
    ServiceResponse<PageImpl<AttestationInner>> * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;AttestationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<AttestationInner>>> listByResourceGroupSinglePageAsync(final String subscriptionId, final String resourceGroupName, final QueryOptions queryOptions) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String apiVersion = "2019-10-01";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        return service.listByResourceGroup(subscriptionId, resourceGroupName, apiVersion, this.client.acceptLanguage(), top, filter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<AttestationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AttestationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<AttestationInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<AttestationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<AttestationInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<AttestationInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<AttestationInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Creates or updates an attestation at resource group scope.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AttestationInner object if successful.
     */
    public AttestationInner createOrUpdateAtResourceGroup(String subscriptionId, String resourceGroupName, String attestationName, AttestationInner parameters) {
        return createOrUpdateAtResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName, attestationName, parameters).toBlocking().last().body();
    }

    /**
     * Creates or updates an attestation at resource group scope.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AttestationInner> createOrUpdateAtResourceGroupAsync(String subscriptionId, String resourceGroupName, String attestationName, AttestationInner parameters, final ServiceCallback<AttestationInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateAtResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName, attestationName, parameters), serviceCallback);
    }

    /**
     * Creates or updates an attestation at resource group scope.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<AttestationInner> createOrUpdateAtResourceGroupAsync(String subscriptionId, String resourceGroupName, String attestationName, AttestationInner parameters) {
        return createOrUpdateAtResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName, attestationName, parameters).map(new Func1<ServiceResponse<AttestationInner>, AttestationInner>() {
            @Override
            public AttestationInner call(ServiceResponse<AttestationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates an attestation at resource group scope.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<AttestationInner>> createOrUpdateAtResourceGroupWithServiceResponseAsync(String subscriptionId, String resourceGroupName, String attestationName, AttestationInner parameters) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (attestationName == null) {
            throw new IllegalArgumentException("Parameter attestationName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2019-10-01";
        Observable<Response<ResponseBody>> observable = service.createOrUpdateAtResourceGroup(subscriptionId, resourceGroupName, attestationName, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<AttestationInner>() { }.getType());
    }

    /**
     * Creates or updates an attestation at resource group scope.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AttestationInner object if successful.
     */
    public AttestationInner beginCreateOrUpdateAtResourceGroup(String subscriptionId, String resourceGroupName, String attestationName, AttestationInner parameters) {
        return beginCreateOrUpdateAtResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName, attestationName, parameters).toBlocking().single().body();
    }

    /**
     * Creates or updates an attestation at resource group scope.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AttestationInner> beginCreateOrUpdateAtResourceGroupAsync(String subscriptionId, String resourceGroupName, String attestationName, AttestationInner parameters, final ServiceCallback<AttestationInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateAtResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName, attestationName, parameters), serviceCallback);
    }

    /**
     * Creates or updates an attestation at resource group scope.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AttestationInner object
     */
    public Observable<AttestationInner> beginCreateOrUpdateAtResourceGroupAsync(String subscriptionId, String resourceGroupName, String attestationName, AttestationInner parameters) {
        return beginCreateOrUpdateAtResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName, attestationName, parameters).map(new Func1<ServiceResponse<AttestationInner>, AttestationInner>() {
            @Override
            public AttestationInner call(ServiceResponse<AttestationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates an attestation at resource group scope.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AttestationInner object
     */
    public Observable<ServiceResponse<AttestationInner>> beginCreateOrUpdateAtResourceGroupWithServiceResponseAsync(String subscriptionId, String resourceGroupName, String attestationName, AttestationInner parameters) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (attestationName == null) {
            throw new IllegalArgumentException("Parameter attestationName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2019-10-01";
        return service.beginCreateOrUpdateAtResourceGroup(subscriptionId, resourceGroupName, attestationName, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AttestationInner>>>() {
                @Override
                public Observable<ServiceResponse<AttestationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AttestationInner> clientResponse = beginCreateOrUpdateAtResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AttestationInner> beginCreateOrUpdateAtResourceGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AttestationInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AttestationInner>() { }.getType())
                .register(201, new TypeToken<AttestationInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets an existing attestation at resource group scope.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param attestationName The name of the attestation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AttestationInner object if successful.
     */
    public AttestationInner getByResourceGroup(String subscriptionId, String resourceGroupName, String attestationName) {
        return getByResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName, attestationName).toBlocking().single().body();
    }

    /**
     * Gets an existing attestation at resource group scope.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param attestationName The name of the attestation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AttestationInner> getByResourceGroupAsync(String subscriptionId, String resourceGroupName, String attestationName, final ServiceCallback<AttestationInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName, attestationName), serviceCallback);
    }

    /**
     * Gets an existing attestation at resource group scope.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param attestationName The name of the attestation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AttestationInner object
     */
    public Observable<AttestationInner> getByResourceGroupAsync(String subscriptionId, String resourceGroupName, String attestationName) {
        return getByResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName, attestationName).map(new Func1<ServiceResponse<AttestationInner>, AttestationInner>() {
            @Override
            public AttestationInner call(ServiceResponse<AttestationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets an existing attestation at resource group scope.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param attestationName The name of the attestation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AttestationInner object
     */
    public Observable<ServiceResponse<AttestationInner>> getByResourceGroupWithServiceResponseAsync(String subscriptionId, String resourceGroupName, String attestationName) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (attestationName == null) {
            throw new IllegalArgumentException("Parameter attestationName is required and cannot be null.");
        }
        final String apiVersion = "2019-10-01";
        return service.getByResourceGroup(subscriptionId, resourceGroupName, attestationName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AttestationInner>>>() {
                @Override
                public Observable<ServiceResponse<AttestationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AttestationInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AttestationInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AttestationInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AttestationInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Deletes an existing attestation at resource group scope.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param attestationName The name of the attestation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void deleteAtResourceGroup(String subscriptionId, String resourceGroupName, String attestationName) {
        deleteAtResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName, attestationName).toBlocking().single().body();
    }

    /**
     * Deletes an existing attestation at resource group scope.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param attestationName The name of the attestation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAtResourceGroupAsync(String subscriptionId, String resourceGroupName, String attestationName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteAtResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName, attestationName), serviceCallback);
    }

    /**
     * Deletes an existing attestation at resource group scope.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param attestationName The name of the attestation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAtResourceGroupAsync(String subscriptionId, String resourceGroupName, String attestationName) {
        return deleteAtResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName, attestationName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes an existing attestation at resource group scope.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param attestationName The name of the attestation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteAtResourceGroupWithServiceResponseAsync(String subscriptionId, String resourceGroupName, String attestationName) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (attestationName == null) {
            throw new IllegalArgumentException("Parameter attestationName is required and cannot be null.");
        }
        final String apiVersion = "2019-10-01";
        return service.deleteAtResourceGroup(subscriptionId, resourceGroupName, attestationName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteAtResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteAtResourceGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets all attestations for a resource.
     *
     * @param resourceId Resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;AttestationInner&gt; object if successful.
     */
    public PagedList<AttestationInner> listForResource(final String resourceId) {
        ServiceResponse<Page<AttestationInner>> response = listForResourceSinglePageAsync(resourceId).toBlocking().single();
        return new PagedList<AttestationInner>(response.body()) {
            @Override
            public Page<AttestationInner> nextPage(String nextPageLink) {
                return listForResourceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all attestations for a resource.
     *
     * @param resourceId Resource ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<AttestationInner>> listForResourceAsync(final String resourceId, final ListOperationCallback<AttestationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listForResourceSinglePageAsync(resourceId),
            new Func1<String, Observable<ServiceResponse<Page<AttestationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AttestationInner>>> call(String nextPageLink) {
                    return listForResourceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all attestations for a resource.
     *
     * @param resourceId Resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AttestationInner&gt; object
     */
    public Observable<Page<AttestationInner>> listForResourceAsync(final String resourceId) {
        return listForResourceWithServiceResponseAsync(resourceId)
            .map(new Func1<ServiceResponse<Page<AttestationInner>>, Page<AttestationInner>>() {
                @Override
                public Page<AttestationInner> call(ServiceResponse<Page<AttestationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all attestations for a resource.
     *
     * @param resourceId Resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AttestationInner&gt; object
     */
    public Observable<ServiceResponse<Page<AttestationInner>>> listForResourceWithServiceResponseAsync(final String resourceId) {
        return listForResourceSinglePageAsync(resourceId)
            .concatMap(new Func1<ServiceResponse<Page<AttestationInner>>, Observable<ServiceResponse<Page<AttestationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AttestationInner>>> call(ServiceResponse<Page<AttestationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listForResourceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all attestations for a resource.
     *
     * @param resourceId Resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;AttestationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<AttestationInner>>> listForResourceSinglePageAsync(final String resourceId) {
        if (resourceId == null) {
            throw new IllegalArgumentException("Parameter resourceId is required and cannot be null.");
        }
        final String apiVersion = "2019-10-01";
        final QueryOptions queryOptions = null;
        Integer top = null;
        String filter = null;
        return service.listForResource(resourceId, apiVersion, this.client.acceptLanguage(), top, filter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<AttestationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AttestationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<AttestationInner>> result = listForResourceDelegate(response);
                        return Observable.just(new ServiceResponse<Page<AttestationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets all attestations for a resource.
     *
     * @param resourceId Resource ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;AttestationInner&gt; object if successful.
     */
    public PagedList<AttestationInner> listForResource(final String resourceId, final QueryOptions queryOptions) {
        ServiceResponse<Page<AttestationInner>> response = listForResourceSinglePageAsync(resourceId, queryOptions).toBlocking().single();
        return new PagedList<AttestationInner>(response.body()) {
            @Override
            public Page<AttestationInner> nextPage(String nextPageLink) {
                return listForResourceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all attestations for a resource.
     *
     * @param resourceId Resource ID.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<AttestationInner>> listForResourceAsync(final String resourceId, final QueryOptions queryOptions, final ListOperationCallback<AttestationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listForResourceSinglePageAsync(resourceId, queryOptions),
            new Func1<String, Observable<ServiceResponse<Page<AttestationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AttestationInner>>> call(String nextPageLink) {
                    return listForResourceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all attestations for a resource.
     *
     * @param resourceId Resource ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AttestationInner&gt; object
     */
    public Observable<Page<AttestationInner>> listForResourceAsync(final String resourceId, final QueryOptions queryOptions) {
        return listForResourceWithServiceResponseAsync(resourceId, queryOptions)
            .map(new Func1<ServiceResponse<Page<AttestationInner>>, Page<AttestationInner>>() {
                @Override
                public Page<AttestationInner> call(ServiceResponse<Page<AttestationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all attestations for a resource.
     *
     * @param resourceId Resource ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AttestationInner&gt; object
     */
    public Observable<ServiceResponse<Page<AttestationInner>>> listForResourceWithServiceResponseAsync(final String resourceId, final QueryOptions queryOptions) {
        return listForResourceSinglePageAsync(resourceId, queryOptions)
            .concatMap(new Func1<ServiceResponse<Page<AttestationInner>>, Observable<ServiceResponse<Page<AttestationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AttestationInner>>> call(ServiceResponse<Page<AttestationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listForResourceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all attestations for a resource.
     *
    ServiceResponse<PageImpl<AttestationInner>> * @param resourceId Resource ID.
    ServiceResponse<PageImpl<AttestationInner>> * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;AttestationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<AttestationInner>>> listForResourceSinglePageAsync(final String resourceId, final QueryOptions queryOptions) {
        if (resourceId == null) {
            throw new IllegalArgumentException("Parameter resourceId is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String apiVersion = "2019-10-01";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        return service.listForResource(resourceId, apiVersion, this.client.acceptLanguage(), top, filter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<AttestationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AttestationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<AttestationInner>> result = listForResourceDelegate(response);
                        return Observable.just(new ServiceResponse<Page<AttestationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<AttestationInner>> listForResourceDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<AttestationInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<AttestationInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Creates or updates an attestation at resource scope.
     *
     * @param resourceId Resource ID.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AttestationInner object if successful.
     */
    public AttestationInner createOrUpdateAtResource(String resourceId, String attestationName, AttestationInner parameters) {
        return createOrUpdateAtResourceWithServiceResponseAsync(resourceId, attestationName, parameters).toBlocking().last().body();
    }

    /**
     * Creates or updates an attestation at resource scope.
     *
     * @param resourceId Resource ID.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AttestationInner> createOrUpdateAtResourceAsync(String resourceId, String attestationName, AttestationInner parameters, final ServiceCallback<AttestationInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateAtResourceWithServiceResponseAsync(resourceId, attestationName, parameters), serviceCallback);
    }

    /**
     * Creates or updates an attestation at resource scope.
     *
     * @param resourceId Resource ID.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<AttestationInner> createOrUpdateAtResourceAsync(String resourceId, String attestationName, AttestationInner parameters) {
        return createOrUpdateAtResourceWithServiceResponseAsync(resourceId, attestationName, parameters).map(new Func1<ServiceResponse<AttestationInner>, AttestationInner>() {
            @Override
            public AttestationInner call(ServiceResponse<AttestationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates an attestation at resource scope.
     *
     * @param resourceId Resource ID.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<AttestationInner>> createOrUpdateAtResourceWithServiceResponseAsync(String resourceId, String attestationName, AttestationInner parameters) {
        if (resourceId == null) {
            throw new IllegalArgumentException("Parameter resourceId is required and cannot be null.");
        }
        if (attestationName == null) {
            throw new IllegalArgumentException("Parameter attestationName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2019-10-01";
        Observable<Response<ResponseBody>> observable = service.createOrUpdateAtResource(resourceId, attestationName, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<AttestationInner>() { }.getType());
    }

    /**
     * Creates or updates an attestation at resource scope.
     *
     * @param resourceId Resource ID.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AttestationInner object if successful.
     */
    public AttestationInner beginCreateOrUpdateAtResource(String resourceId, String attestationName, AttestationInner parameters) {
        return beginCreateOrUpdateAtResourceWithServiceResponseAsync(resourceId, attestationName, parameters).toBlocking().single().body();
    }

    /**
     * Creates or updates an attestation at resource scope.
     *
     * @param resourceId Resource ID.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AttestationInner> beginCreateOrUpdateAtResourceAsync(String resourceId, String attestationName, AttestationInner parameters, final ServiceCallback<AttestationInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateAtResourceWithServiceResponseAsync(resourceId, attestationName, parameters), serviceCallback);
    }

    /**
     * Creates or updates an attestation at resource scope.
     *
     * @param resourceId Resource ID.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AttestationInner object
     */
    public Observable<AttestationInner> beginCreateOrUpdateAtResourceAsync(String resourceId, String attestationName, AttestationInner parameters) {
        return beginCreateOrUpdateAtResourceWithServiceResponseAsync(resourceId, attestationName, parameters).map(new Func1<ServiceResponse<AttestationInner>, AttestationInner>() {
            @Override
            public AttestationInner call(ServiceResponse<AttestationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates an attestation at resource scope.
     *
     * @param resourceId Resource ID.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AttestationInner object
     */
    public Observable<ServiceResponse<AttestationInner>> beginCreateOrUpdateAtResourceWithServiceResponseAsync(String resourceId, String attestationName, AttestationInner parameters) {
        if (resourceId == null) {
            throw new IllegalArgumentException("Parameter resourceId is required and cannot be null.");
        }
        if (attestationName == null) {
            throw new IllegalArgumentException("Parameter attestationName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2019-10-01";
        return service.beginCreateOrUpdateAtResource(resourceId, attestationName, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AttestationInner>>>() {
                @Override
                public Observable<ServiceResponse<AttestationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AttestationInner> clientResponse = beginCreateOrUpdateAtResourceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AttestationInner> beginCreateOrUpdateAtResourceDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AttestationInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AttestationInner>() { }.getType())
                .register(201, new TypeToken<AttestationInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets an existing attestation at resource scope.
     *
     * @param resourceId Resource ID.
     * @param attestationName The name of the attestation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AttestationInner object if successful.
     */
    public AttestationInner getAtResource(String resourceId, String attestationName) {
        return getAtResourceWithServiceResponseAsync(resourceId, attestationName).toBlocking().single().body();
    }

    /**
     * Gets an existing attestation at resource scope.
     *
     * @param resourceId Resource ID.
     * @param attestationName The name of the attestation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AttestationInner> getAtResourceAsync(String resourceId, String attestationName, final ServiceCallback<AttestationInner> serviceCallback) {
        return ServiceFuture.fromResponse(getAtResourceWithServiceResponseAsync(resourceId, attestationName), serviceCallback);
    }

    /**
     * Gets an existing attestation at resource scope.
     *
     * @param resourceId Resource ID.
     * @param attestationName The name of the attestation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AttestationInner object
     */
    public Observable<AttestationInner> getAtResourceAsync(String resourceId, String attestationName) {
        return getAtResourceWithServiceResponseAsync(resourceId, attestationName).map(new Func1<ServiceResponse<AttestationInner>, AttestationInner>() {
            @Override
            public AttestationInner call(ServiceResponse<AttestationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets an existing attestation at resource scope.
     *
     * @param resourceId Resource ID.
     * @param attestationName The name of the attestation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AttestationInner object
     */
    public Observable<ServiceResponse<AttestationInner>> getAtResourceWithServiceResponseAsync(String resourceId, String attestationName) {
        if (resourceId == null) {
            throw new IllegalArgumentException("Parameter resourceId is required and cannot be null.");
        }
        if (attestationName == null) {
            throw new IllegalArgumentException("Parameter attestationName is required and cannot be null.");
        }
        final String apiVersion = "2019-10-01";
        return service.getAtResource(resourceId, attestationName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AttestationInner>>>() {
                @Override
                public Observable<ServiceResponse<AttestationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AttestationInner> clientResponse = getAtResourceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AttestationInner> getAtResourceDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AttestationInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AttestationInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Deletes an existing attestation at individual resource scope.
     *
     * @param resourceId Resource ID.
     * @param attestationName The name of the attestation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void deleteAtResource(String resourceId, String attestationName) {
        deleteAtResourceWithServiceResponseAsync(resourceId, attestationName).toBlocking().single().body();
    }

    /**
     * Deletes an existing attestation at individual resource scope.
     *
     * @param resourceId Resource ID.
     * @param attestationName The name of the attestation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAtResourceAsync(String resourceId, String attestationName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteAtResourceWithServiceResponseAsync(resourceId, attestationName), serviceCallback);
    }

    /**
     * Deletes an existing attestation at individual resource scope.
     *
     * @param resourceId Resource ID.
     * @param attestationName The name of the attestation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAtResourceAsync(String resourceId, String attestationName) {
        return deleteAtResourceWithServiceResponseAsync(resourceId, attestationName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes an existing attestation at individual resource scope.
     *
     * @param resourceId Resource ID.
     * @param attestationName The name of the attestation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteAtResourceWithServiceResponseAsync(String resourceId, String attestationName) {
        if (resourceId == null) {
            throw new IllegalArgumentException("Parameter resourceId is required and cannot be null.");
        }
        if (attestationName == null) {
            throw new IllegalArgumentException("Parameter attestationName is required and cannot be null.");
        }
        final String apiVersion = "2019-10-01";
        return service.deleteAtResource(resourceId, attestationName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteAtResourceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteAtResourceDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets all attestations for the subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;AttestationInner&gt; object if successful.
     */
    public PagedList<AttestationInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<AttestationInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<AttestationInner>(response.body()) {
            @Override
            public Page<AttestationInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all attestations for the subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<AttestationInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<AttestationInner>> serviceFuture, final ListOperationCallback<AttestationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<AttestationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AttestationInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all attestations for the subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AttestationInner&gt; object
     */
    public Observable<Page<AttestationInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<AttestationInner>>, Page<AttestationInner>>() {
                @Override
                public Page<AttestationInner> call(ServiceResponse<Page<AttestationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all attestations for the subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AttestationInner&gt; object
     */
    public Observable<ServiceResponse<Page<AttestationInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<AttestationInner>>, Observable<ServiceResponse<Page<AttestationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AttestationInner>>> call(ServiceResponse<Page<AttestationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all attestations for the subscription.
     *
    ServiceResponse<PageImpl<AttestationInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;AttestationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<AttestationInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<AttestationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AttestationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<AttestationInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<AttestationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<AttestationInner>> listNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<AttestationInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<AttestationInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets all attestations for the resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;AttestationInner&gt; object if successful.
     */
    public PagedList<AttestationInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<AttestationInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<AttestationInner>(response.body()) {
            @Override
            public Page<AttestationInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all attestations for the resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<AttestationInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<AttestationInner>> serviceFuture, final ListOperationCallback<AttestationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<AttestationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AttestationInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all attestations for the resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AttestationInner&gt; object
     */
    public Observable<Page<AttestationInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<AttestationInner>>, Page<AttestationInner>>() {
                @Override
                public Page<AttestationInner> call(ServiceResponse<Page<AttestationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all attestations for the resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AttestationInner&gt; object
     */
    public Observable<ServiceResponse<Page<AttestationInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<AttestationInner>>, Observable<ServiceResponse<Page<AttestationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AttestationInner>>> call(ServiceResponse<Page<AttestationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all attestations for the resource group.
     *
    ServiceResponse<PageImpl<AttestationInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;AttestationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<AttestationInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<AttestationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AttestationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<AttestationInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<AttestationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<AttestationInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<AttestationInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<AttestationInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets all attestations for a resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;AttestationInner&gt; object if successful.
     */
    public PagedList<AttestationInner> listForResourceNext(final String nextPageLink) {
        ServiceResponse<Page<AttestationInner>> response = listForResourceNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<AttestationInner>(response.body()) {
            @Override
            public Page<AttestationInner> nextPage(String nextPageLink) {
                return listForResourceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all attestations for a resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<AttestationInner>> listForResourceNextAsync(final String nextPageLink, final ServiceFuture<List<AttestationInner>> serviceFuture, final ListOperationCallback<AttestationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listForResourceNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<AttestationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AttestationInner>>> call(String nextPageLink) {
                    return listForResourceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all attestations for a resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AttestationInner&gt; object
     */
    public Observable<Page<AttestationInner>> listForResourceNextAsync(final String nextPageLink) {
        return listForResourceNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<AttestationInner>>, Page<AttestationInner>>() {
                @Override
                public Page<AttestationInner> call(ServiceResponse<Page<AttestationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all attestations for a resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AttestationInner&gt; object
     */
    public Observable<ServiceResponse<Page<AttestationInner>>> listForResourceNextWithServiceResponseAsync(final String nextPageLink) {
        return listForResourceNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<AttestationInner>>, Observable<ServiceResponse<Page<AttestationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AttestationInner>>> call(ServiceResponse<Page<AttestationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listForResourceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all attestations for a resource.
     *
    ServiceResponse<PageImpl<AttestationInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;AttestationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<AttestationInner>>> listForResourceNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listForResourceNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<AttestationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AttestationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<AttestationInner>> result = listForResourceNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<AttestationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<AttestationInner>> listForResourceNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<AttestationInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<AttestationInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
