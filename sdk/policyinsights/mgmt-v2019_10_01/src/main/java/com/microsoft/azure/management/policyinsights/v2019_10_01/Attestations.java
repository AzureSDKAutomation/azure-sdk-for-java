/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.policyinsights.v2019_10_01;

import com.microsoft.azure.arm.collection.SupportsCreating;
import rx.Completable;
import rx.Observable;
import com.microsoft.azure.management.policyinsights.v2019_10_01.implementation.AttestationInner;
import com.microsoft.azure.management.policyinsights.v2019_10_01.implementation.AttestationsInner;
import com.microsoft.azure.arm.model.HasInner;

/**
 * Type representing Attestations.
 */
public interface Attestations extends SupportsCreating<Attestation.DefinitionStages.Blank>, HasInner<AttestationsInner> {
    /**
     * Creates or updates an attestation at subscription scope.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Attestation> createOrUpdateAtSubscriptionAsync(String subscriptionId, String attestationName, AttestationInner parameters);

    /**
     * Gets an existing attestation at subscription scope.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param attestationName The name of the attestation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Attestation> getAtSubscriptionAsync(String subscriptionId, String attestationName);

    /**
     * Deletes an existing attestation at subscription scope.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param attestationName The name of the attestation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteAtSubscriptionAsync(String subscriptionId, String attestationName);

    /**
     * Gets an existing attestation at resource group scope.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param attestationName The name of the attestation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Attestation> getByResourceGroupAsync(String subscriptionId, String resourceGroupName, String attestationName);

    /**
     * Deletes an existing attestation at resource group scope.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param attestationName The name of the attestation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteAtResourceGroupAsync(String subscriptionId, String resourceGroupName, String attestationName);

    /**
     * Creates or updates an attestation at resource scope.
     *
     * @param resourceId Resource ID.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Attestation> createOrUpdateAtResourceAsync(String resourceId, String attestationName, AttestationInner parameters);

    /**
     * Gets an existing attestation at resource scope.
     *
     * @param resourceId Resource ID.
     * @param attestationName The name of the attestation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Attestation> getAtResourceAsync(String resourceId, String attestationName);

    /**
     * Deletes an existing attestation at individual resource scope.
     *
     * @param resourceId Resource ID.
     * @param attestationName The name of the attestation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteAtResourceAsync(String resourceId, String attestationName);

    /**
     * Gets all attestations for the subscription.
     *
     * @param subscriptionId The ID of the target subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Attestation> listAsync(final String subscriptionId);

    /**
     * Gets all attestations for the resource group.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Attestation> listByResourceGroupAsync(final String subscriptionId, final String resourceGroupName);

    /**
     * Gets all attestations for a resource.
     *
     * @param resourceId Resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Attestation> listForResourceAsync(final String resourceId);

}
