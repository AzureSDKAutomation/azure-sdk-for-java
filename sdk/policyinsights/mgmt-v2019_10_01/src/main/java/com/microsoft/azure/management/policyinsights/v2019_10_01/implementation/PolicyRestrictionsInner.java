/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.policyinsights.v2019_10_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.policyinsights.v2019_10_01.CheckRestrictionsRequest;
import com.microsoft.azure.management.policyinsights.v2019_10_01.ErrorResponseException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in PolicyRestrictions.
 */
public class PolicyRestrictionsInner {
    /** The Retrofit service to perform REST calls. */
    private PolicyRestrictionsService service;
    /** The service client containing this operation class. */
    private PolicyInsightsClientImpl client;

    /**
     * Initializes an instance of PolicyRestrictionsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public PolicyRestrictionsInner(Retrofit retrofit, PolicyInsightsClientImpl client) {
        this.service = retrofit.create(PolicyRestrictionsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for PolicyRestrictions to be
     * used by Retrofit to perform actually REST calls.
     */
    interface PolicyRestrictionsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyRestrictions checkAtSubscriptionScope" })
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/checkPolicyRestrictions")
        Observable<Response<ResponseBody>> checkAtSubscriptionScope(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Body CheckRestrictionsRequest parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyRestrictions checkAtResourceGroupScope" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/checkPolicyRestrictions")
        Observable<Response<ResponseBody>> checkAtResourceGroupScope(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Body CheckRestrictionsRequest parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Checks what restrictions Azure Policy will place on a resource within a subscription.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param parameters The check policy restrictions parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CheckRestrictionsResultInner object if successful.
     */
    public CheckRestrictionsResultInner checkAtSubscriptionScope(String subscriptionId, CheckRestrictionsRequest parameters) {
        return checkAtSubscriptionScopeWithServiceResponseAsync(subscriptionId, parameters).toBlocking().single().body();
    }

    /**
     * Checks what restrictions Azure Policy will place on a resource within a subscription.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param parameters The check policy restrictions parameters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CheckRestrictionsResultInner> checkAtSubscriptionScopeAsync(String subscriptionId, CheckRestrictionsRequest parameters, final ServiceCallback<CheckRestrictionsResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(checkAtSubscriptionScopeWithServiceResponseAsync(subscriptionId, parameters), serviceCallback);
    }

    /**
     * Checks what restrictions Azure Policy will place on a resource within a subscription.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param parameters The check policy restrictions parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CheckRestrictionsResultInner object
     */
    public Observable<CheckRestrictionsResultInner> checkAtSubscriptionScopeAsync(String subscriptionId, CheckRestrictionsRequest parameters) {
        return checkAtSubscriptionScopeWithServiceResponseAsync(subscriptionId, parameters).map(new Func1<ServiceResponse<CheckRestrictionsResultInner>, CheckRestrictionsResultInner>() {
            @Override
            public CheckRestrictionsResultInner call(ServiceResponse<CheckRestrictionsResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Checks what restrictions Azure Policy will place on a resource within a subscription.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param parameters The check policy restrictions parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CheckRestrictionsResultInner object
     */
    public Observable<ServiceResponse<CheckRestrictionsResultInner>> checkAtSubscriptionScopeWithServiceResponseAsync(String subscriptionId, CheckRestrictionsRequest parameters) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2020-07-01";
        return service.checkAtSubscriptionScope(subscriptionId, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CheckRestrictionsResultInner>>>() {
                @Override
                public Observable<ServiceResponse<CheckRestrictionsResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CheckRestrictionsResultInner> clientResponse = checkAtSubscriptionScopeDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CheckRestrictionsResultInner> checkAtSubscriptionScopeDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CheckRestrictionsResultInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CheckRestrictionsResultInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Checks what restrictions Azure Policy will place on a resource within a resource group. Use this when the resource group the resource will be created in is already known.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param parameters The check policy restrictions parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CheckRestrictionsResultInner object if successful.
     */
    public CheckRestrictionsResultInner checkAtResourceGroupScope(String subscriptionId, String resourceGroupName, CheckRestrictionsRequest parameters) {
        return checkAtResourceGroupScopeWithServiceResponseAsync(subscriptionId, resourceGroupName, parameters).toBlocking().single().body();
    }

    /**
     * Checks what restrictions Azure Policy will place on a resource within a resource group. Use this when the resource group the resource will be created in is already known.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param parameters The check policy restrictions parameters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CheckRestrictionsResultInner> checkAtResourceGroupScopeAsync(String subscriptionId, String resourceGroupName, CheckRestrictionsRequest parameters, final ServiceCallback<CheckRestrictionsResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(checkAtResourceGroupScopeWithServiceResponseAsync(subscriptionId, resourceGroupName, parameters), serviceCallback);
    }

    /**
     * Checks what restrictions Azure Policy will place on a resource within a resource group. Use this when the resource group the resource will be created in is already known.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param parameters The check policy restrictions parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CheckRestrictionsResultInner object
     */
    public Observable<CheckRestrictionsResultInner> checkAtResourceGroupScopeAsync(String subscriptionId, String resourceGroupName, CheckRestrictionsRequest parameters) {
        return checkAtResourceGroupScopeWithServiceResponseAsync(subscriptionId, resourceGroupName, parameters).map(new Func1<ServiceResponse<CheckRestrictionsResultInner>, CheckRestrictionsResultInner>() {
            @Override
            public CheckRestrictionsResultInner call(ServiceResponse<CheckRestrictionsResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Checks what restrictions Azure Policy will place on a resource within a resource group. Use this when the resource group the resource will be created in is already known.
     *
     * @param subscriptionId The ID of the target subscription.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param parameters The check policy restrictions parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CheckRestrictionsResultInner object
     */
    public Observable<ServiceResponse<CheckRestrictionsResultInner>> checkAtResourceGroupScopeWithServiceResponseAsync(String subscriptionId, String resourceGroupName, CheckRestrictionsRequest parameters) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2020-07-01";
        return service.checkAtResourceGroupScope(subscriptionId, resourceGroupName, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CheckRestrictionsResultInner>>>() {
                @Override
                public Observable<ServiceResponse<CheckRestrictionsResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CheckRestrictionsResultInner> clientResponse = checkAtResourceGroupScopeDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CheckRestrictionsResultInner> checkAtResourceGroupScopeDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CheckRestrictionsResultInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CheckRestrictionsResultInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
