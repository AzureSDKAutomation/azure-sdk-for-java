// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.authorization.generated.models.PolicyProperties;
import com.azure.resourcemanager.authorization.generated.models.Principal;
import com.azure.resourcemanager.authorization.generated.models.RoleManagementPolicyRule;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/** Role management policy. */
@JsonFlatten
@Fluent
public class RoleManagementPolicyInner {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(RoleManagementPolicyInner.class);

    /*
     * The role management policy Id.
     */
    @JsonProperty(value = "id", access = JsonProperty.Access.WRITE_ONLY)
    private String id;

    /*
     * The role management policy name.
     */
    @JsonProperty(value = "name", access = JsonProperty.Access.WRITE_ONLY)
    private String name;

    /*
     * The role management policy type.
     */
    @JsonProperty(value = "type", access = JsonProperty.Access.WRITE_ONLY)
    private String type;

    /*
     * The role management policy scope.
     */
    @JsonProperty(value = "properties.scope")
    private String scope;

    /*
     * The role management policy display name.
     */
    @JsonProperty(value = "properties.displayName")
    private String displayName;

    /*
     * The role management policy description.
     */
    @JsonProperty(value = "properties.description")
    private String description;

    /*
     * The role management policy is default policy.
     */
    @JsonProperty(value = "properties.isOrganizationDefault")
    private Boolean isOrganizationDefault;

    /*
     * The name of the entity last modified it
     */
    @JsonProperty(value = "properties.lastModifiedBy", access = JsonProperty.Access.WRITE_ONLY)
    private Principal lastModifiedBy;

    /*
     * The last modified date time.
     */
    @JsonProperty(value = "properties.lastModifiedDateTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastModifiedDateTime;

    /*
     * The rule applied to the policy.
     */
    @JsonProperty(value = "properties.rules")
    private List<RoleManagementPolicyRule> rules;

    /*
     * The readonly computed rule applied to the policy.
     */
    @JsonProperty(value = "properties.effectiveRules", access = JsonProperty.Access.WRITE_ONLY)
    private List<RoleManagementPolicyRule> effectiveRules;

    /*
     * Additional properties of scope
     */
    @JsonProperty(value = "properties.policyProperties", access = JsonProperty.Access.WRITE_ONLY)
    private PolicyProperties policyProperties;

    /**
     * Get the id property: The role management policy Id.
     *
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: The role management policy name.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the type property: The role management policy type.
     *
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Get the scope property: The role management policy scope.
     *
     * @return the scope value.
     */
    public String scope() {
        return this.scope;
    }

    /**
     * Set the scope property: The role management policy scope.
     *
     * @param scope the scope value to set.
     * @return the RoleManagementPolicyInner object itself.
     */
    public RoleManagementPolicyInner withScope(String scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Get the displayName property: The role management policy display name.
     *
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The role management policy display name.
     *
     * @param displayName the displayName value to set.
     * @return the RoleManagementPolicyInner object itself.
     */
    public RoleManagementPolicyInner withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the description property: The role management policy description.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The role management policy description.
     *
     * @param description the description value to set.
     * @return the RoleManagementPolicyInner object itself.
     */
    public RoleManagementPolicyInner withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the isOrganizationDefault property: The role management policy is default policy.
     *
     * @return the isOrganizationDefault value.
     */
    public Boolean isOrganizationDefault() {
        return this.isOrganizationDefault;
    }

    /**
     * Set the isOrganizationDefault property: The role management policy is default policy.
     *
     * @param isOrganizationDefault the isOrganizationDefault value to set.
     * @return the RoleManagementPolicyInner object itself.
     */
    public RoleManagementPolicyInner withIsOrganizationDefault(Boolean isOrganizationDefault) {
        this.isOrganizationDefault = isOrganizationDefault;
        return this;
    }

    /**
     * Get the lastModifiedBy property: The name of the entity last modified it.
     *
     * @return the lastModifiedBy value.
     */
    public Principal lastModifiedBy() {
        return this.lastModifiedBy;
    }

    /**
     * Get the lastModifiedDateTime property: The last modified date time.
     *
     * @return the lastModifiedDateTime value.
     */
    public OffsetDateTime lastModifiedDateTime() {
        return this.lastModifiedDateTime;
    }

    /**
     * Get the rules property: The rule applied to the policy.
     *
     * @return the rules value.
     */
    public List<RoleManagementPolicyRule> rules() {
        return this.rules;
    }

    /**
     * Set the rules property: The rule applied to the policy.
     *
     * @param rules the rules value to set.
     * @return the RoleManagementPolicyInner object itself.
     */
    public RoleManagementPolicyInner withRules(List<RoleManagementPolicyRule> rules) {
        this.rules = rules;
        return this;
    }

    /**
     * Get the effectiveRules property: The readonly computed rule applied to the policy.
     *
     * @return the effectiveRules value.
     */
    public List<RoleManagementPolicyRule> effectiveRules() {
        return this.effectiveRules;
    }

    /**
     * Get the policyProperties property: Additional properties of scope.
     *
     * @return the policyProperties value.
     */
    public PolicyProperties policyProperties() {
        return this.policyProperties;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (lastModifiedBy() != null) {
            lastModifiedBy().validate();
        }
        if (rules() != null) {
            rules().forEach(e -> e.validate());
        }
        if (effectiveRules() != null) {
            effectiveRules().forEach(e -> e.validate());
        }
        if (policyProperties() != null) {
            policyProperties().validate();
        }
    }
}
