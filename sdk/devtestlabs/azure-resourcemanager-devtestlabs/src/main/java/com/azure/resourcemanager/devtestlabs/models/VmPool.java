// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.models;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.devtestlabs.fluent.models.VmPoolInner;
import java.util.Map;

/** An immutable client-side representation of VmPool. */
public interface VmPool {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the vmScalesetComputeId property: The resource identifier (Microsoft.Compute) of the virtual machine scale
     * set.
     *
     * @return the vmScalesetComputeId value.
     */
    String vmScalesetComputeId();

    /**
     * Gets the username property: The user name of the virtual machines in the vitual machine scale set.
     *
     * @return the username value.
     */
    String username();

    /**
     * Gets the password property: The administrator password of the virtual machines in the virtual machine scale set.
     *
     * @return the password value.
     */
    String password();

    /**
     * Gets the galleryImageReference property: The Microsoft Azure Marketplace image reference of the virtual machines
     * in the scale set.
     *
     * @return the galleryImageReference value.
     */
    GalleryImageReference galleryImageReference();

    /**
     * Gets the instanceCount property: The number of instances in the virtual machine scale set.
     *
     * @return the instanceCount value.
     */
    Integer instanceCount();

    /**
     * Gets the customImageId property: The custom image used as a base for the virtual machines in the scale set.
     *
     * @return the customImageId value.
     */
    String customImageId();

    /**
     * Gets the storageType property: Storage account type used with custom image.
     *
     * @return the storageType value.
     */
    StorageType storageType();

    /**
     * Gets the size property: The size of the virtual machines in the scale set.
     *
     * @return the size value.
     */
    String size();

    /**
     * Gets the labSubnetName property: The lab subnet name of the virtual machines in the scale set.
     *
     * @return the labSubnetName value.
     */
    String labSubnetName();

    /**
     * Gets the labVirtualNetworkId property: The lab virtual network identifier of the virtual machines in the scale
     * set.
     *
     * @return the labVirtualNetworkId value.
     */
    String labVirtualNetworkId();

    /**
     * Gets the provisioningState property: The provisioning status of the resource.
     *
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * Gets the uniqueIdentifier property: The unique immutable identifier of a resource (Guid).
     *
     * @return the uniqueIdentifier value.
     */
    String uniqueIdentifier();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.devtestlabs.fluent.models.VmPoolInner object.
     *
     * @return the inner object.
     */
    VmPoolInner innerModel();

    /** The entirety of the VmPool definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithParentResource,
            DefinitionStages.WithCreate {
    }
    /** The VmPool definition stages. */
    interface DefinitionStages {
        /** The first stage of the VmPool definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the VmPool definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(String location);
        }
        /** The stage of the VmPool definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, labName.
             *
             * @param resourceGroupName The name of the resource group.
             * @param labName The name of the lab.
             * @return the next definition stage.
             */
            WithCreate withExistingLab(String resourceGroupName, String labName);
        }
        /**
         * The stage of the VmPool definition which contains all the minimum required properties for the resource to be
         * created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithUsername,
                DefinitionStages.WithPassword,
                DefinitionStages.WithGalleryImageReference,
                DefinitionStages.WithInstanceCount,
                DefinitionStages.WithCustomImageId,
                DefinitionStages.WithStorageType,
                DefinitionStages.WithSize,
                DefinitionStages.WithLabSubnetName,
                DefinitionStages.WithLabVirtualNetworkId {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            VmPool create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            VmPool create(Context context);
        }
        /** The stage of the VmPool definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the VmPool definition allowing to specify username. */
        interface WithUsername {
            /**
             * Specifies the username property: The user name of the virtual machines in the vitual machine scale set.
             *
             * @param username The user name of the virtual machines in the vitual machine scale set.
             * @return the next definition stage.
             */
            WithCreate withUsername(String username);
        }
        /** The stage of the VmPool definition allowing to specify password. */
        interface WithPassword {
            /**
             * Specifies the password property: The administrator password of the virtual machines in the virtual
             * machine scale set.
             *
             * @param password The administrator password of the virtual machines in the virtual machine scale set.
             * @return the next definition stage.
             */
            WithCreate withPassword(String password);
        }
        /** The stage of the VmPool definition allowing to specify galleryImageReference. */
        interface WithGalleryImageReference {
            /**
             * Specifies the galleryImageReference property: The Microsoft Azure Marketplace image reference of the
             * virtual machines in the scale set.
             *
             * @param galleryImageReference The Microsoft Azure Marketplace image reference of the virtual machines in
             *     the scale set.
             * @return the next definition stage.
             */
            WithCreate withGalleryImageReference(GalleryImageReference galleryImageReference);
        }
        /** The stage of the VmPool definition allowing to specify instanceCount. */
        interface WithInstanceCount {
            /**
             * Specifies the instanceCount property: The number of instances in the virtual machine scale set.
             *
             * @param instanceCount The number of instances in the virtual machine scale set.
             * @return the next definition stage.
             */
            WithCreate withInstanceCount(Integer instanceCount);
        }
        /** The stage of the VmPool definition allowing to specify customImageId. */
        interface WithCustomImageId {
            /**
             * Specifies the customImageId property: The custom image used as a base for the virtual machines in the
             * scale set.
             *
             * @param customImageId The custom image used as a base for the virtual machines in the scale set.
             * @return the next definition stage.
             */
            WithCreate withCustomImageId(String customImageId);
        }
        /** The stage of the VmPool definition allowing to specify storageType. */
        interface WithStorageType {
            /**
             * Specifies the storageType property: Storage account type used with custom image..
             *
             * @param storageType Storage account type used with custom image.
             * @return the next definition stage.
             */
            WithCreate withStorageType(StorageType storageType);
        }
        /** The stage of the VmPool definition allowing to specify size. */
        interface WithSize {
            /**
             * Specifies the size property: The size of the virtual machines in the scale set.
             *
             * @param size The size of the virtual machines in the scale set.
             * @return the next definition stage.
             */
            WithCreate withSize(String size);
        }
        /** The stage of the VmPool definition allowing to specify labSubnetName. */
        interface WithLabSubnetName {
            /**
             * Specifies the labSubnetName property: The lab subnet name of the virtual machines in the scale set.
             *
             * @param labSubnetName The lab subnet name of the virtual machines in the scale set.
             * @return the next definition stage.
             */
            WithCreate withLabSubnetName(String labSubnetName);
        }
        /** The stage of the VmPool definition allowing to specify labVirtualNetworkId. */
        interface WithLabVirtualNetworkId {
            /**
             * Specifies the labVirtualNetworkId property: The lab virtual network identifier of the virtual machines in
             * the scale set.
             *
             * @param labVirtualNetworkId The lab virtual network identifier of the virtual machines in the scale set.
             * @return the next definition stage.
             */
            WithCreate withLabVirtualNetworkId(String labVirtualNetworkId);
        }
    }
    /**
     * Begins update for the VmPool resource.
     *
     * @return the stage of resource update.
     */
    VmPool.Update update();

    /** The template for VmPool update. */
    interface Update extends UpdateStages.WithTags {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        VmPool apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        VmPool apply(Context context);
    }
    /** The VmPool update stages. */
    interface UpdateStages {
        /** The stage of the VmPool update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: The tags of the resource..
             *
             * @param tags The tags of the resource.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    VmPool refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    VmPool refresh(Context context);
}
