// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.devtestlabs.fluent.models.VmPoolInner;
import com.azure.resourcemanager.devtestlabs.models.GalleryImageReference;
import com.azure.resourcemanager.devtestlabs.models.StorageType;
import com.azure.resourcemanager.devtestlabs.models.VmPool;
import com.azure.resourcemanager.devtestlabs.models.VmPoolFragment;
import java.util.Collections;
import java.util.Map;

public final class VmPoolImpl implements VmPool, VmPool.Definition, VmPool.Update {
    private VmPoolInner innerObject;

    private final com.azure.resourcemanager.devtestlabs.DevTestLabsManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String vmScalesetComputeId() {
        return this.innerModel().vmScalesetComputeId();
    }

    public String username() {
        return this.innerModel().username();
    }

    public String password() {
        return this.innerModel().password();
    }

    public GalleryImageReference galleryImageReference() {
        return this.innerModel().galleryImageReference();
    }

    public Integer instanceCount() {
        return this.innerModel().instanceCount();
    }

    public String customImageId() {
        return this.innerModel().customImageId();
    }

    public StorageType storageType() {
        return this.innerModel().storageType();
    }

    public String size() {
        return this.innerModel().size();
    }

    public String labSubnetName() {
        return this.innerModel().labSubnetName();
    }

    public String labVirtualNetworkId() {
        return this.innerModel().labVirtualNetworkId();
    }

    public String provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String uniqueIdentifier() {
        return this.innerModel().uniqueIdentifier();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public VmPoolInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.devtestlabs.DevTestLabsManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String labName;

    private String name;

    private VmPoolFragment updateVmPool;

    public VmPoolImpl withExistingLab(String resourceGroupName, String labName) {
        this.resourceGroupName = resourceGroupName;
        this.labName = labName;
        return this;
    }

    public VmPool create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getVmPools()
                .createOrUpdate(resourceGroupName, labName, name, this.innerModel(), Context.NONE);
        return this;
    }

    public VmPool create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getVmPools()
                .createOrUpdate(resourceGroupName, labName, name, this.innerModel(), context);
        return this;
    }

    VmPoolImpl(String name, com.azure.resourcemanager.devtestlabs.DevTestLabsManager serviceManager) {
        this.innerObject = new VmPoolInner();
        this.serviceManager = serviceManager;
        this.name = name;
    }

    public VmPoolImpl update() {
        this.updateVmPool = new VmPoolFragment();
        return this;
    }

    public VmPool apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getVmPools()
                .updateWithResponse(resourceGroupName, labName, name, updateVmPool, Context.NONE)
                .getValue();
        return this;
    }

    public VmPool apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getVmPools()
                .updateWithResponse(resourceGroupName, labName, name, updateVmPool, context)
                .getValue();
        return this;
    }

    VmPoolImpl(VmPoolInner innerObject, com.azure.resourcemanager.devtestlabs.DevTestLabsManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.labName = Utils.getValueFromIdByName(innerObject.id(), "labs");
        this.name = Utils.getValueFromIdByName(innerObject.id(), "vmpools");
    }

    public VmPool refresh() {
        String localExpand = null;
        this.innerObject =
            serviceManager
                .serviceClient()
                .getVmPools()
                .getWithResponse(resourceGroupName, labName, name, localExpand, Context.NONE)
                .getValue();
        return this;
    }

    public VmPool refresh(Context context) {
        String localExpand = null;
        this.innerObject =
            serviceManager
                .serviceClient()
                .getVmPools()
                .getWithResponse(resourceGroupName, labName, name, localExpand, context)
                .getValue();
        return this;
    }

    public VmPoolImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public VmPoolImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public VmPoolImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateVmPool.withTags(tags);
            return this;
        }
    }

    public VmPoolImpl withUsername(String username) {
        this.innerModel().withUsername(username);
        return this;
    }

    public VmPoolImpl withPassword(String password) {
        this.innerModel().withPassword(password);
        return this;
    }

    public VmPoolImpl withGalleryImageReference(GalleryImageReference galleryImageReference) {
        this.innerModel().withGalleryImageReference(galleryImageReference);
        return this;
    }

    public VmPoolImpl withInstanceCount(Integer instanceCount) {
        this.innerModel().withInstanceCount(instanceCount);
        return this;
    }

    public VmPoolImpl withCustomImageId(String customImageId) {
        this.innerModel().withCustomImageId(customImageId);
        return this;
    }

    public VmPoolImpl withStorageType(StorageType storageType) {
        this.innerModel().withStorageType(storageType);
        return this;
    }

    public VmPoolImpl withSize(String size) {
        this.innerModel().withSize(size);
        return this;
    }

    public VmPoolImpl withLabSubnetName(String labSubnetName) {
        this.innerModel().withLabSubnetName(labSubnetName);
        return this;
    }

    public VmPoolImpl withLabVirtualNetworkId(String labVirtualNetworkId) {
        this.innerModel().withLabVirtualNetworkId(labVirtualNetworkId);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
