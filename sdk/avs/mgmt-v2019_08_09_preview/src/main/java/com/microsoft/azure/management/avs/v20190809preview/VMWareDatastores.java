/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.avs.v2019_08_09_preview;

import com.microsoft.azure.management.avs.v20190809preview.models.ApiErrorException;
import com.microsoft.azure.ProxyResource;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in VMWareDatastores.
 */
public interface VMWareDatastores {
    /**
     * Create a datastore for the private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param vmwareDatastoreBackingName Name of the datastore backing (eg. remote NFS/iSCSI volumes) which is used for datastores in the private cloud
     * @param vmwareDatastoreName Name of the VMWare datastore which serves as a container for storing VM files
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Resource object if successful.
     */
    Resource create(String resourceGroupName, String privateCloudName, String clusterName, String vmwareDatastoreBackingName, String vmwareDatastoreName);

    /**
     * Create a datastore for the private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param vmwareDatastoreBackingName Name of the datastore backing (eg. remote NFS/iSCSI volumes) which is used for datastores in the private cloud
     * @param vmwareDatastoreName Name of the VMWare datastore which serves as a container for storing VM files
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Resource> createAsync(String resourceGroupName, String privateCloudName, String clusterName, String vmwareDatastoreBackingName, String vmwareDatastoreName, final ServiceCallback<Resource> serviceCallback);

    /**
     * Create a datastore for the private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param vmwareDatastoreBackingName Name of the datastore backing (eg. remote NFS/iSCSI volumes) which is used for datastores in the private cloud
     * @param vmwareDatastoreName Name of the VMWare datastore which serves as a container for storing VM files
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Resource object
     */
    Observable<Resource> createAsync(String resourceGroupName, String privateCloudName, String clusterName, String vmwareDatastoreBackingName, String vmwareDatastoreName);

    /**
     * Create a datastore for the private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param vmwareDatastoreBackingName Name of the datastore backing (eg. remote NFS/iSCSI volumes) which is used for datastores in the private cloud
     * @param vmwareDatastoreName Name of the VMWare datastore which serves as a container for storing VM files
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Resource object
     */
    Observable<ServiceResponse<Resource>> createWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String clusterName, String vmwareDatastoreBackingName, String vmwareDatastoreName);

    /**
     * Create a datastore for the private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param vmwareDatastoreBackingName Name of the datastore backing (eg. remote NFS/iSCSI volumes) which is used for datastores in the private cloud
     * @param vmwareDatastoreName Name of the VMWare datastore which serves as a container for storing VM files
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Resource object if successful.
     */
    Resource beginCreate(String resourceGroupName, String privateCloudName, String clusterName, String vmwareDatastoreBackingName, String vmwareDatastoreName);

    /**
     * Create a datastore for the private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param vmwareDatastoreBackingName Name of the datastore backing (eg. remote NFS/iSCSI volumes) which is used for datastores in the private cloud
     * @param vmwareDatastoreName Name of the VMWare datastore which serves as a container for storing VM files
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Resource> beginCreateAsync(String resourceGroupName, String privateCloudName, String clusterName, String vmwareDatastoreBackingName, String vmwareDatastoreName, final ServiceCallback<Resource> serviceCallback);

    /**
     * Create a datastore for the private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param vmwareDatastoreBackingName Name of the datastore backing (eg. remote NFS/iSCSI volumes) which is used for datastores in the private cloud
     * @param vmwareDatastoreName Name of the VMWare datastore which serves as a container for storing VM files
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Resource object
     */
    Observable<Resource> beginCreateAsync(String resourceGroupName, String privateCloudName, String clusterName, String vmwareDatastoreBackingName, String vmwareDatastoreName);

    /**
     * Create a datastore for the private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param clusterName Name of the cluster in the private cloud
     * @param vmwareDatastoreBackingName Name of the datastore backing (eg. remote NFS/iSCSI volumes) which is used for datastores in the private cloud
     * @param vmwareDatastoreName Name of the VMWare datastore which serves as a container for storing VM files
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Resource object
     */
    Observable<ServiceResponse<Resource>> beginCreateWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String clusterName, String vmwareDatastoreBackingName, String vmwareDatastoreName);

}
