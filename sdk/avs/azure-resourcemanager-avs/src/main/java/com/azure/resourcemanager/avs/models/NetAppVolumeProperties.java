// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** A model which holds properties of an Azure NetApp Files volume of Microsoft.NetApp provider. */
@Fluent
public final class NetAppVolumeProperties {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(NetAppVolumeProperties.class);

    /*
     * IP address of the NFS provider
     */
    @JsonProperty(value = "nfsProviderIp")
    private String nfsProviderIp;

    /*
     * File path through which the NFS volume is exposed by the provider
     */
    @JsonProperty(value = "nfsFilePath")
    private String nfsFilePath;

    /**
     * Get the nfsProviderIp property: IP address of the NFS provider.
     *
     * @return the nfsProviderIp value.
     */
    public String nfsProviderIp() {
        return this.nfsProviderIp;
    }

    /**
     * Set the nfsProviderIp property: IP address of the NFS provider.
     *
     * @param nfsProviderIp the nfsProviderIp value to set.
     * @return the NetAppVolumeProperties object itself.
     */
    public NetAppVolumeProperties withNfsProviderIp(String nfsProviderIp) {
        this.nfsProviderIp = nfsProviderIp;
        return this;
    }

    /**
     * Get the nfsFilePath property: File path through which the NFS volume is exposed by the provider.
     *
     * @return the nfsFilePath value.
     */
    public String nfsFilePath() {
        return this.nfsFilePath;
    }

    /**
     * Set the nfsFilePath property: File path through which the NFS volume is exposed by the provider.
     *
     * @param nfsFilePath the nfsFilePath value to set.
     * @return the NetAppVolumeProperties object itself.
     */
    public NetAppVolumeProperties withNfsFilePath(String nfsFilePath) {
        this.nfsFilePath = nfsFilePath;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
