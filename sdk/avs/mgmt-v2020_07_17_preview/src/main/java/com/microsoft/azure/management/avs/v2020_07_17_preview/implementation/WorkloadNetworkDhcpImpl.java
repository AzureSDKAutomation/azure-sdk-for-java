/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.avs.v2020_07_17_preview.implementation;

import com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworkDhcp;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import java.util.List;
import com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworkDhcpProvisioningState;

class WorkloadNetworkDhcpImpl extends CreatableUpdatableImpl<WorkloadNetworkDhcp, WorkloadNetworkDhcpInner, WorkloadNetworkDhcpImpl> implements WorkloadNetworkDhcp, WorkloadNetworkDhcp.Definition, WorkloadNetworkDhcp.Update {
    private final AVSManager manager;
    private String resourceGroupName;
    private String privateCloudName;
    private String dhcpId;

    WorkloadNetworkDhcpImpl(String name, AVSManager manager) {
        super(name, new WorkloadNetworkDhcpInner());
        this.manager = manager;
        // Set resource name
        this.dhcpId = name;
        //
    }

    WorkloadNetworkDhcpImpl(WorkloadNetworkDhcpInner inner, AVSManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.dhcpId = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.privateCloudName = IdParsingUtils.getValueFromIdByName(inner.id(), "privateClouds");
        this.dhcpId = IdParsingUtils.getValueFromIdByName(inner.id(), "dhcpConfigurations");
        //
    }

    @Override
    public AVSManager manager() {
        return this.manager;
    }

    @Override
    public Observable<WorkloadNetworkDhcp> createResourceAsync() {
        WorkloadNetworksInner client = this.manager().inner().workloadNetworks();
        return client.createDhcpAsync(this.resourceGroupName, this.privateCloudName, this.dhcpId, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<WorkloadNetworkDhcp> updateResourceAsync() {
        WorkloadNetworksInner client = this.manager().inner().workloadNetworks();
        return client.updateDhcpAsync(this.resourceGroupName, this.privateCloudName, this.dhcpId, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<WorkloadNetworkDhcpInner> getInnerAsync() {
        WorkloadNetworksInner client = this.manager().inner().workloadNetworks();
        return null; // NOP getInnerAsync implementation as get is not supported
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String displayName() {
        return this.inner().displayName();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public WorkloadNetworkDhcpProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public Long revision() {
        return this.inner().revision();
    }

    @Override
    public List<String> segments() {
        return this.inner().segments();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public WorkloadNetworkDhcpImpl withExistingWorkloadNetwork(String resourceGroupName, String privateCloudName) {
        this.resourceGroupName = resourceGroupName;
        this.privateCloudName = privateCloudName;
        return this;
    }

    @Override
    public WorkloadNetworkDhcpImpl withDisplayName(String displayName) {
        this.inner().withDisplayName(displayName);
        return this;
    }

    @Override
    public WorkloadNetworkDhcpImpl withRevision(Long revision) {
        this.inner().withRevision(revision);
        return this;
    }

}
