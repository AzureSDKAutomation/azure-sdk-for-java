/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.avs.v2020_07_17_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks;
import rx.Completable;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworkSegment;
import com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworkDhcp;
import com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworkGateway;
import com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworkPortMirroring;
import com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworkVMGroup;
import com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworkVirtualMachine;

class WorkloadNetworksImpl extends WrapperImpl<WorkloadNetworksInner> implements WorkloadNetworks {
    private final AVSManager manager;

    WorkloadNetworksImpl(AVSManager manager) {
        super(manager.inner().workloadNetworks());
        this.manager = manager;
    }

    public AVSManager manager() {
        return this.manager;
    }

    @Override
    public WorkloadNetworkSegmentImpl defineSegment(String name) {
        return wrapSegmentModel(name);
    }

    @Override
    public WorkloadNetworkDhcpImpl defineDhcpConfiguration(String name) {
        return wrapDhcpConfigurationModel(name);
    }

    @Override
    public WorkloadNetworkPortMirroringImpl definePortMirroringProfile(String name) {
        return wrapPortMirroringProfileModel(name);
    }

    @Override
    public WorkloadNetworkVMGroupImpl defineVmGroup(String name) {
        return wrapVmGroupModel(name);
    }

    private WorkloadNetworkSegmentImpl wrapSegmentModel(String name) {
        return new WorkloadNetworkSegmentImpl(name, this.manager());
    }

    private WorkloadNetworkDhcpImpl wrapDhcpConfigurationModel(String name) {
        return new WorkloadNetworkDhcpImpl(name, this.manager());
    }

    private WorkloadNetworkPortMirroringImpl wrapPortMirroringProfileModel(String name) {
        return new WorkloadNetworkPortMirroringImpl(name, this.manager());
    }

    private WorkloadNetworkVMGroupImpl wrapVmGroupModel(String name) {
        return new WorkloadNetworkVMGroupImpl(name, this.manager());
    }

    private WorkloadNetworkSegmentImpl wrapWorkloadNetworkSegmentModel(WorkloadNetworkSegmentInner inner) {
        return  new WorkloadNetworkSegmentImpl(inner, manager());
    }

    private WorkloadNetworkDhcpImpl wrapWorkloadNetworkDhcpModel(WorkloadNetworkDhcpInner inner) {
        return  new WorkloadNetworkDhcpImpl(inner, manager());
    }

    private WorkloadNetworkPortMirroringImpl wrapWorkloadNetworkPortMirroringModel(WorkloadNetworkPortMirroringInner inner) {
        return  new WorkloadNetworkPortMirroringImpl(inner, manager());
    }

    private WorkloadNetworkVMGroupImpl wrapWorkloadNetworkVMGroupModel(WorkloadNetworkVMGroupInner inner) {
        return  new WorkloadNetworkVMGroupImpl(inner, manager());
    }

    @Override
    public Observable<WorkloadNetworkSegment> listSegmentsAsync(final String resourceGroupName, final String privateCloudName) {
        WorkloadNetworksInner client = this.inner();
        return client.listSegmentsAsync(resourceGroupName, privateCloudName)
        .flatMapIterable(new Func1<Page<WorkloadNetworkSegmentInner>, Iterable<WorkloadNetworkSegmentInner>>() {
            @Override
            public Iterable<WorkloadNetworkSegmentInner> call(Page<WorkloadNetworkSegmentInner> page) {
                return page.items();
            }
        })
        .map(new Func1<WorkloadNetworkSegmentInner, WorkloadNetworkSegment>() {
            @Override
            public WorkloadNetworkSegment call(WorkloadNetworkSegmentInner inner) {
                return new WorkloadNetworkSegmentImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<WorkloadNetworkSegment> getSegmentAsync(String resourceGroupName, String privateCloudName, String segmentId) {
        WorkloadNetworksInner client = this.inner();
        return client.getSegmentAsync(resourceGroupName, privateCloudName, segmentId)
        .map(new Func1<WorkloadNetworkSegmentInner, WorkloadNetworkSegment>() {
            @Override
            public WorkloadNetworkSegment call(WorkloadNetworkSegmentInner inner) {
                return new WorkloadNetworkSegmentImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteSegmentAsync(String resourceGroupName, String privateCloudName, String segmentId) {
        WorkloadNetworksInner client = this.inner();
        return client.deleteSegmentAsync(resourceGroupName, privateCloudName, segmentId).toCompletable();
    }

    @Override
    public Observable<WorkloadNetworkDhcp> listDhcpAsync(final String resourceGroupName, final String privateCloudName) {
        WorkloadNetworksInner client = this.inner();
        return client.listDhcpAsync(resourceGroupName, privateCloudName)
        .flatMapIterable(new Func1<Page<WorkloadNetworkDhcpInner>, Iterable<WorkloadNetworkDhcpInner>>() {
            @Override
            public Iterable<WorkloadNetworkDhcpInner> call(Page<WorkloadNetworkDhcpInner> page) {
                return page.items();
            }
        })
        .map(new Func1<WorkloadNetworkDhcpInner, WorkloadNetworkDhcp>() {
            @Override
            public WorkloadNetworkDhcp call(WorkloadNetworkDhcpInner inner) {
                return new WorkloadNetworkDhcpImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<WorkloadNetworkDhcp> getDhcpAsync(String resourceGroupName, String dhcpId, String privateCloudName) {
        WorkloadNetworksInner client = this.inner();
        return client.getDhcpAsync(resourceGroupName, dhcpId, privateCloudName)
        .map(new Func1<WorkloadNetworkDhcpInner, WorkloadNetworkDhcp>() {
            @Override
            public WorkloadNetworkDhcp call(WorkloadNetworkDhcpInner inner) {
                return new WorkloadNetworkDhcpImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteDhcpAsync(String resourceGroupName, String privateCloudName, String dhcpId) {
        WorkloadNetworksInner client = this.inner();
        return client.deleteDhcpAsync(resourceGroupName, privateCloudName, dhcpId).toCompletable();
    }

    @Override
    public Observable<WorkloadNetworkGateway> listGatewaysAsync(final String resourceGroupName, final String privateCloudName) {
        WorkloadNetworksInner client = this.inner();
        return client.listGatewaysAsync(resourceGroupName, privateCloudName)
        .flatMapIterable(new Func1<Page<WorkloadNetworkGatewayInner>, Iterable<WorkloadNetworkGatewayInner>>() {
            @Override
            public Iterable<WorkloadNetworkGatewayInner> call(Page<WorkloadNetworkGatewayInner> page) {
                return page.items();
            }
        })
        .map(new Func1<WorkloadNetworkGatewayInner, WorkloadNetworkGateway>() {
            @Override
            public WorkloadNetworkGateway call(WorkloadNetworkGatewayInner inner) {
                return new WorkloadNetworkGatewayImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<WorkloadNetworkGateway> getGatewayAsync(String resourceGroupName, String privateCloudName, String gatewayId) {
        WorkloadNetworksInner client = this.inner();
        return client.getGatewayAsync(resourceGroupName, privateCloudName, gatewayId)
        .map(new Func1<WorkloadNetworkGatewayInner, WorkloadNetworkGateway>() {
            @Override
            public WorkloadNetworkGateway call(WorkloadNetworkGatewayInner inner) {
                return new WorkloadNetworkGatewayImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<WorkloadNetworkPortMirroring> listPortMirroringAsync(final String resourceGroupName, final String privateCloudName) {
        WorkloadNetworksInner client = this.inner();
        return client.listPortMirroringAsync(resourceGroupName, privateCloudName)
        .flatMapIterable(new Func1<Page<WorkloadNetworkPortMirroringInner>, Iterable<WorkloadNetworkPortMirroringInner>>() {
            @Override
            public Iterable<WorkloadNetworkPortMirroringInner> call(Page<WorkloadNetworkPortMirroringInner> page) {
                return page.items();
            }
        })
        .map(new Func1<WorkloadNetworkPortMirroringInner, WorkloadNetworkPortMirroring>() {
            @Override
            public WorkloadNetworkPortMirroring call(WorkloadNetworkPortMirroringInner inner) {
                return new WorkloadNetworkPortMirroringImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<WorkloadNetworkPortMirroring> getPortMirroringAsync(String resourceGroupName, String privateCloudName, String portMirroringId) {
        WorkloadNetworksInner client = this.inner();
        return client.getPortMirroringAsync(resourceGroupName, privateCloudName, portMirroringId)
        .map(new Func1<WorkloadNetworkPortMirroringInner, WorkloadNetworkPortMirroring>() {
            @Override
            public WorkloadNetworkPortMirroring call(WorkloadNetworkPortMirroringInner inner) {
                return new WorkloadNetworkPortMirroringImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deletePortMirroringAsync(String resourceGroupName, String portMirroringId, String privateCloudName) {
        WorkloadNetworksInner client = this.inner();
        return client.deletePortMirroringAsync(resourceGroupName, portMirroringId, privateCloudName).toCompletable();
    }

    @Override
    public Observable<WorkloadNetworkVMGroup> listVMGroupsAsync(final String resourceGroupName, final String privateCloudName) {
        WorkloadNetworksInner client = this.inner();
        return client.listVMGroupsAsync(resourceGroupName, privateCloudName)
        .flatMapIterable(new Func1<Page<WorkloadNetworkVMGroupInner>, Iterable<WorkloadNetworkVMGroupInner>>() {
            @Override
            public Iterable<WorkloadNetworkVMGroupInner> call(Page<WorkloadNetworkVMGroupInner> page) {
                return page.items();
            }
        })
        .map(new Func1<WorkloadNetworkVMGroupInner, WorkloadNetworkVMGroup>() {
            @Override
            public WorkloadNetworkVMGroup call(WorkloadNetworkVMGroupInner inner) {
                return new WorkloadNetworkVMGroupImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<WorkloadNetworkVMGroup> getVMGroupAsync(String resourceGroupName, String privateCloudName, String vmGroupId) {
        WorkloadNetworksInner client = this.inner();
        return client.getVMGroupAsync(resourceGroupName, privateCloudName, vmGroupId)
        .map(new Func1<WorkloadNetworkVMGroupInner, WorkloadNetworkVMGroup>() {
            @Override
            public WorkloadNetworkVMGroup call(WorkloadNetworkVMGroupInner inner) {
                return new WorkloadNetworkVMGroupImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteVMGroupAsync(String resourceGroupName, String vmGroupId, String privateCloudName) {
        WorkloadNetworksInner client = this.inner();
        return client.deleteVMGroupAsync(resourceGroupName, vmGroupId, privateCloudName).toCompletable();
    }

    @Override
    public Observable<WorkloadNetworkVirtualMachine> listVirtualMachinesAsync(final String resourceGroupName, final String privateCloudName) {
        WorkloadNetworksInner client = this.inner();
        return client.listVirtualMachinesAsync(resourceGroupName, privateCloudName)
        .flatMapIterable(new Func1<Page<WorkloadNetworkVirtualMachineInner>, Iterable<WorkloadNetworkVirtualMachineInner>>() {
            @Override
            public Iterable<WorkloadNetworkVirtualMachineInner> call(Page<WorkloadNetworkVirtualMachineInner> page) {
                return page.items();
            }
        })
        .map(new Func1<WorkloadNetworkVirtualMachineInner, WorkloadNetworkVirtualMachine>() {
            @Override
            public WorkloadNetworkVirtualMachine call(WorkloadNetworkVirtualMachineInner inner) {
                return new WorkloadNetworkVirtualMachineImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<WorkloadNetworkVirtualMachine> getVirtualMachineAsync(String resourceGroupName, String privateCloudName, String virtualMachineId) {
        WorkloadNetworksInner client = this.inner();
        return client.getVirtualMachineAsync(resourceGroupName, privateCloudName, virtualMachineId)
        .map(new Func1<WorkloadNetworkVirtualMachineInner, WorkloadNetworkVirtualMachine>() {
            @Override
            public WorkloadNetworkVirtualMachine call(WorkloadNetworkVirtualMachineInner inner) {
                return new WorkloadNetworkVirtualMachineImpl(inner, manager());
            }
        });
    }

}
