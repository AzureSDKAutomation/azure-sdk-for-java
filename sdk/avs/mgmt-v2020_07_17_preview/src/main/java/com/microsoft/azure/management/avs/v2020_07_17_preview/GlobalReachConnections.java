/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.avs.v2020_07_17_preview;

import com.microsoft.azure.arm.collection.SupportsCreating;
import rx.Completable;
import rx.Observable;
import com.microsoft.azure.management.avs.v2020_07_17_preview.implementation.GlobalReachConnectionsInner;
import com.microsoft.azure.arm.model.HasInner;

/**
 * Type representing GlobalReachConnections.
 */
public interface GlobalReachConnections extends SupportsCreating<GlobalReachConnection.DefinitionStages.Blank>, HasInner<GlobalReachConnectionsInner> {
    /**
     * Get a global reach connection by name in a private cloud.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param globalReachConnectionName Name of the global reach connection in the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<GlobalReachConnection> getAsync(String resourceGroupName, String privateCloudName, String globalReachConnectionName);

    /**
     * List global reach connections in a private cloud.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<GlobalReachConnection> listAsync(final String resourceGroupName, final String privateCloudName);

    /**
     * Delete a global reach connection in a private cloud.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param globalReachConnectionName Name of the global reach connection in the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteAsync(String resourceGroupName, String privateCloudName, String globalReachConnectionName);

}
