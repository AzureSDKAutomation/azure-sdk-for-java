/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.avs.v2020_07_17_preview.implementation;

import com.microsoft.azure.management.avs.v2020_07_17_preview.GlobalReachConnection;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.avs.v2020_07_17_preview.GlobalReachConnectionProvisioningState;
import com.microsoft.azure.management.avs.v2020_07_17_preview.GlobalReachConnectionStatus;

class GlobalReachConnectionImpl extends CreatableUpdatableImpl<GlobalReachConnection, GlobalReachConnectionInner, GlobalReachConnectionImpl> implements GlobalReachConnection, GlobalReachConnection.Definition, GlobalReachConnection.Update {
    private final AVSManager manager;
    private String resourceGroupName;
    private String privateCloudName;
    private String globalReachConnectionName;

    GlobalReachConnectionImpl(String name, AVSManager manager) {
        super(name, new GlobalReachConnectionInner());
        this.manager = manager;
        // Set resource name
        this.globalReachConnectionName = name;
        //
    }

    GlobalReachConnectionImpl(GlobalReachConnectionInner inner, AVSManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.globalReachConnectionName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.privateCloudName = IdParsingUtils.getValueFromIdByName(inner.id(), "privateClouds");
        this.globalReachConnectionName = IdParsingUtils.getValueFromIdByName(inner.id(), "globalReachConnections");
        //
    }

    @Override
    public AVSManager manager() {
        return this.manager;
    }

    @Override
    public Observable<GlobalReachConnection> createResourceAsync() {
        GlobalReachConnectionsInner client = this.manager().inner().globalReachConnections();
        return client.createOrUpdateAsync(this.resourceGroupName, this.privateCloudName, this.globalReachConnectionName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<GlobalReachConnection> updateResourceAsync() {
        GlobalReachConnectionsInner client = this.manager().inner().globalReachConnections();
        return client.createOrUpdateAsync(this.resourceGroupName, this.privateCloudName, this.globalReachConnectionName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<GlobalReachConnectionInner> getInnerAsync() {
        GlobalReachConnectionsInner client = this.manager().inner().globalReachConnections();
        return client.getAsync(this.resourceGroupName, this.privateCloudName, this.globalReachConnectionName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String addressPrefix() {
        return this.inner().addressPrefix();
    }

    @Override
    public String authorizationKey() {
        return this.inner().authorizationKey();
    }

    @Override
    public GlobalReachConnectionStatus circuitConnectionStatus() {
        return this.inner().circuitConnectionStatus();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String peerExpressRouteCircuit() {
        return this.inner().peerExpressRouteCircuit();
    }

    @Override
    public GlobalReachConnectionProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public GlobalReachConnectionImpl withExistingPrivateCloud(String resourceGroupName, String privateCloudName) {
        this.resourceGroupName = resourceGroupName;
        this.privateCloudName = privateCloudName;
        return this;
    }

    @Override
    public GlobalReachConnectionImpl withAuthorizationKey(String authorizationKey) {
        this.inner().withAuthorizationKey(authorizationKey);
        return this;
    }

    @Override
    public GlobalReachConnectionImpl withPeerExpressRouteCircuit(String peerExpressRouteCircuit) {
        this.inner().withPeerExpressRouteCircuit(peerExpressRouteCircuit);
        return this;
    }

}
