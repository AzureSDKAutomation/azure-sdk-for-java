/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.avs.v2020_07_17_preview;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.avs.v2020_07_17_preview.implementation.WorkloadNetworkPortMirroringInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.avs.v2020_07_17_preview.implementation.AVSManager;

/**
 * Type representing WorkloadNetworkPortMirroring.
 */
public interface WorkloadNetworkPortMirroring extends HasInner<WorkloadNetworkPortMirroringInner>, Indexable, Updatable<WorkloadNetworkPortMirroring.Update>, HasManager<AVSManager> {
    /**
     * @return the destination value.
     */
    String destination();

    /**
     * @return the direction value.
     */
    PortMirroringDirectionEnum direction();

    /**
     * @return the displayName value.
     */
    String displayName();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the provisioningState value.
     */
    WorkloadNetworkPortMirroringProvisioningState provisioningState();

    /**
     * @return the revision value.
     */
    Long revision();

    /**
     * @return the source value.
     */
    String source();

    /**
     * @return the status value.
     */
    PortMirroringStatusEnum status();

    /**
     * @return the type value.
     */
    String type();

    /**
     * The entirety of the WorkloadNetworkPortMirroring definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithWorkloadNetwork, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of WorkloadNetworkPortMirroring definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a WorkloadNetworkPortMirroring definition.
         */
        interface Blank extends WithWorkloadNetwork {
        }

        /**
         * The stage of the workloadnetworkportmirroring definition allowing to specify WorkloadNetwork.
         */
        interface WithWorkloadNetwork {
           /**
            * Specifies resourceGroupName, privateCloudName.
            * @param resourceGroupName The name of the resource group. The name is case insensitive
            * @param privateCloudName Name of the private cloud
            * @return the next definition stage
            */
            WithCreate withExistingWorkloadNetwork(String resourceGroupName, String privateCloudName);
        }

        /**
         * The stage of the workloadnetworkportmirroring definition allowing to specify Destination.
         */
        interface WithDestination {
            /**
             * Specifies destination.
             * @param destination Destination VM Group
             * @return the next definition stage
             */
            WithCreate withDestination(String destination);
        }

        /**
         * The stage of the workloadnetworkportmirroring definition allowing to specify Direction.
         */
        interface WithDirection {
            /**
             * Specifies direction.
             * @param direction Direction of port mirroring profile. Possible values include: 'INGRESS, EGRESS, BIDIRECTIONAL'
             * @return the next definition stage
             */
            WithCreate withDirection(PortMirroringDirectionEnum direction);
        }

        /**
         * The stage of the workloadnetworkportmirroring definition allowing to specify DisplayName.
         */
        interface WithDisplayName {
            /**
             * Specifies displayName.
             * @param displayName Display name of the port mirroring profile
             * @return the next definition stage
             */
            WithCreate withDisplayName(String displayName);
        }

        /**
         * The stage of the workloadnetworkportmirroring definition allowing to specify Revision.
         */
        interface WithRevision {
            /**
             * Specifies revision.
             * @param revision NSX revision number
             * @return the next definition stage
             */
            WithCreate withRevision(Long revision);
        }

        /**
         * The stage of the workloadnetworkportmirroring definition allowing to specify Source.
         */
        interface WithSource {
            /**
             * Specifies source.
             * @param source Source VM Group
             * @return the next definition stage
             */
            WithCreate withSource(String source);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<WorkloadNetworkPortMirroring>, DefinitionStages.WithDestination, DefinitionStages.WithDirection, DefinitionStages.WithDisplayName, DefinitionStages.WithRevision, DefinitionStages.WithSource {
        }
    }
    /**
     * The template for a WorkloadNetworkPortMirroring update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<WorkloadNetworkPortMirroring>, UpdateStages.WithDestination, UpdateStages.WithDirection, UpdateStages.WithDisplayName, UpdateStages.WithRevision, UpdateStages.WithSource {
    }

    /**
     * Grouping of WorkloadNetworkPortMirroring update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the workloadnetworkportmirroring update allowing to specify Destination.
         */
        interface WithDestination {
            /**
             * Specifies destination.
             * @param destination Destination VM Group
             * @return the next update stage
             */
            Update withDestination(String destination);
        }

        /**
         * The stage of the workloadnetworkportmirroring update allowing to specify Direction.
         */
        interface WithDirection {
            /**
             * Specifies direction.
             * @param direction Direction of port mirroring profile. Possible values include: 'INGRESS, EGRESS, BIDIRECTIONAL'
             * @return the next update stage
             */
            Update withDirection(PortMirroringDirectionEnum direction);
        }

        /**
         * The stage of the workloadnetworkportmirroring update allowing to specify DisplayName.
         */
        interface WithDisplayName {
            /**
             * Specifies displayName.
             * @param displayName Display name of the port mirroring profile
             * @return the next update stage
             */
            Update withDisplayName(String displayName);
        }

        /**
         * The stage of the workloadnetworkportmirroring update allowing to specify Revision.
         */
        interface WithRevision {
            /**
             * Specifies revision.
             * @param revision NSX revision number
             * @return the next update stage
             */
            Update withRevision(Long revision);
        }

        /**
         * The stage of the workloadnetworkportmirroring update allowing to specify Source.
         */
        interface WithSource {
            /**
             * Specifies source.
             * @param source Source VM Group
             * @return the next update stage
             */
            Update withSource(String source);
        }

    }
}
