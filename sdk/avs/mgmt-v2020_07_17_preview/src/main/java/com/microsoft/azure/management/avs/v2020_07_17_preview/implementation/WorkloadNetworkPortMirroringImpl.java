/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.avs.v2020_07_17_preview.implementation;

import com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworkPortMirroring;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.avs.v2020_07_17_preview.PortMirroringDirectionEnum;
import com.microsoft.azure.management.avs.v2020_07_17_preview.PortMirroringStatusEnum;
import com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworkPortMirroringProvisioningState;

class WorkloadNetworkPortMirroringImpl extends CreatableUpdatableImpl<WorkloadNetworkPortMirroring, WorkloadNetworkPortMirroringInner, WorkloadNetworkPortMirroringImpl> implements WorkloadNetworkPortMirroring, WorkloadNetworkPortMirroring.Definition, WorkloadNetworkPortMirroring.Update {
    private final AVSManager manager;
    private String resourceGroupName;
    private String privateCloudName;
    private String portMirroringId;

    WorkloadNetworkPortMirroringImpl(String name, AVSManager manager) {
        super(name, new WorkloadNetworkPortMirroringInner());
        this.manager = manager;
        // Set resource name
        this.portMirroringId = name;
        //
    }

    WorkloadNetworkPortMirroringImpl(WorkloadNetworkPortMirroringInner inner, AVSManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.portMirroringId = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.privateCloudName = IdParsingUtils.getValueFromIdByName(inner.id(), "privateClouds");
        this.portMirroringId = IdParsingUtils.getValueFromIdByName(inner.id(), "portMirroringProfiles");
        //
    }

    @Override
    public AVSManager manager() {
        return this.manager;
    }

    @Override
    public Observable<WorkloadNetworkPortMirroring> createResourceAsync() {
        WorkloadNetworksInner client = this.manager().inner().workloadNetworks();
        return client.createPortMirroringAsync(this.resourceGroupName, this.privateCloudName, this.portMirroringId, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<WorkloadNetworkPortMirroring> updateResourceAsync() {
        WorkloadNetworksInner client = this.manager().inner().workloadNetworks();
        return client.updatePortMirroringAsync(this.resourceGroupName, this.privateCloudName, this.portMirroringId, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<WorkloadNetworkPortMirroringInner> getInnerAsync() {
        WorkloadNetworksInner client = this.manager().inner().workloadNetworks();
        return null; // NOP getInnerAsync implementation as get is not supported
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String destination() {
        return this.inner().destination();
    }

    @Override
    public PortMirroringDirectionEnum direction() {
        return this.inner().direction();
    }

    @Override
    public String displayName() {
        return this.inner().displayName();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public WorkloadNetworkPortMirroringProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public Long revision() {
        return this.inner().revision();
    }

    @Override
    public String source() {
        return this.inner().source();
    }

    @Override
    public PortMirroringStatusEnum status() {
        return this.inner().status();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public WorkloadNetworkPortMirroringImpl withExistingWorkloadNetwork(String resourceGroupName, String privateCloudName) {
        this.resourceGroupName = resourceGroupName;
        this.privateCloudName = privateCloudName;
        return this;
    }

    @Override
    public WorkloadNetworkPortMirroringImpl withDestination(String destination) {
        this.inner().withDestination(destination);
        return this;
    }

    @Override
    public WorkloadNetworkPortMirroringImpl withDirection(PortMirroringDirectionEnum direction) {
        this.inner().withDirection(direction);
        return this;
    }

    @Override
    public WorkloadNetworkPortMirroringImpl withDisplayName(String displayName) {
        this.inner().withDisplayName(displayName);
        return this;
    }

    @Override
    public WorkloadNetworkPortMirroringImpl withRevision(Long revision) {
        this.inner().withRevision(revision);
        return this;
    }

    @Override
    public WorkloadNetworkPortMirroringImpl withSource(String source) {
        this.inner().withSource(source);
        return this;
    }

}
