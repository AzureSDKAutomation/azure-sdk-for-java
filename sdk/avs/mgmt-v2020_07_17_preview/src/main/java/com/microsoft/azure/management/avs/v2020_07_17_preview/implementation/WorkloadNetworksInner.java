/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.avs.v2020_07_17_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in WorkloadNetworks.
 */
public class WorkloadNetworksInner {
    /** The Retrofit service to perform REST calls. */
    private WorkloadNetworksService service;
    /** The service client containing this operation class. */
    private AvsClientImpl client;

    /**
     * Initializes an instance of WorkloadNetworksInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public WorkloadNetworksInner(Retrofit retrofit, AvsClientImpl client) {
        this.service = retrofit.create(WorkloadNetworksService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for WorkloadNetworks to be
     * used by Retrofit to perform actually REST calls.
     */
    interface WorkloadNetworksService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks listSegments" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/segments")
        Observable<Response<ResponseBody>> listSegments(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks getSegment" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/segments/{segmentId}")
        Observable<Response<ResponseBody>> getSegment(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("segmentId") String segmentId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks createSegments" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/segments/{segmentId}")
        Observable<Response<ResponseBody>> createSegments(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("segmentId") String segmentId, @Query("api-version") String apiVersion, @Body WorkloadNetworkSegmentInner workloadNetworkSegment, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks beginCreateSegments" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/segments/{segmentId}")
        Observable<Response<ResponseBody>> beginCreateSegments(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("segmentId") String segmentId, @Query("api-version") String apiVersion, @Body WorkloadNetworkSegmentInner workloadNetworkSegment, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks updateSegments" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/segments/{segmentId}")
        Observable<Response<ResponseBody>> updateSegments(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("segmentId") String segmentId, @Query("api-version") String apiVersion, @Body WorkloadNetworkSegmentInner workloadNetworkSegment, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks beginUpdateSegments" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/segments/{segmentId}")
        Observable<Response<ResponseBody>> beginUpdateSegments(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("segmentId") String segmentId, @Query("api-version") String apiVersion, @Body WorkloadNetworkSegmentInner workloadNetworkSegment, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks deleteSegment" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/segments/{segmentId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteSegment(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("segmentId") String segmentId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks beginDeleteSegment" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/segments/{segmentId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDeleteSegment(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("segmentId") String segmentId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks listDhcp" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/dhcpConfigurations")
        Observable<Response<ResponseBody>> listDhcp(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks getDhcp" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/dhcpConfigurations/{dhcpId}")
        Observable<Response<ResponseBody>> getDhcp(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dhcpId") String dhcpId, @Path("privateCloudName") String privateCloudName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks createDhcp" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/dhcpConfigurations/{dhcpId}")
        Observable<Response<ResponseBody>> createDhcp(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("dhcpId") String dhcpId, @Query("api-version") String apiVersion, @Body WorkloadNetworkDhcpInner workloadNetworkDhcp, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks beginCreateDhcp" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/dhcpConfigurations/{dhcpId}")
        Observable<Response<ResponseBody>> beginCreateDhcp(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("dhcpId") String dhcpId, @Query("api-version") String apiVersion, @Body WorkloadNetworkDhcpInner workloadNetworkDhcp, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks updateDhcp" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/dhcpConfigurations/{dhcpId}")
        Observable<Response<ResponseBody>> updateDhcp(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("dhcpId") String dhcpId, @Query("api-version") String apiVersion, @Body WorkloadNetworkDhcpInner workloadNetworkDhcp, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks beginUpdateDhcp" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/dhcpConfigurations/{dhcpId}")
        Observable<Response<ResponseBody>> beginUpdateDhcp(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("dhcpId") String dhcpId, @Query("api-version") String apiVersion, @Body WorkloadNetworkDhcpInner workloadNetworkDhcp, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks deleteDhcp" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/dhcpConfigurations/{dhcpId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteDhcp(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("dhcpId") String dhcpId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks beginDeleteDhcp" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/dhcpConfigurations/{dhcpId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDeleteDhcp(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("dhcpId") String dhcpId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks listGateways" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/gateways")
        Observable<Response<ResponseBody>> listGateways(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks getGateway" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/gateways/{gatewayId}")
        Observable<Response<ResponseBody>> getGateway(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("gatewayId") String gatewayId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks listPortMirroring" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/portMirroringProfiles")
        Observable<Response<ResponseBody>> listPortMirroring(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks getPortMirroring" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/portMirroringProfiles/{portMirroringId}")
        Observable<Response<ResponseBody>> getPortMirroring(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("portMirroringId") String portMirroringId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks createPortMirroring" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/portMirroringProfiles/{portMirroringId}")
        Observable<Response<ResponseBody>> createPortMirroring(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("portMirroringId") String portMirroringId, @Query("api-version") String apiVersion, @Body WorkloadNetworkPortMirroringInner workloadNetworkPortMirroring, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks beginCreatePortMirroring" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/portMirroringProfiles/{portMirroringId}")
        Observable<Response<ResponseBody>> beginCreatePortMirroring(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("portMirroringId") String portMirroringId, @Query("api-version") String apiVersion, @Body WorkloadNetworkPortMirroringInner workloadNetworkPortMirroring, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks updatePortMirroring" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/portMirroringProfiles/{portMirroringId}")
        Observable<Response<ResponseBody>> updatePortMirroring(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("portMirroringId") String portMirroringId, @Query("api-version") String apiVersion, @Body WorkloadNetworkPortMirroringInner workloadNetworkPortMirroring, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks beginUpdatePortMirroring" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/portMirroringProfiles/{portMirroringId}")
        Observable<Response<ResponseBody>> beginUpdatePortMirroring(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("portMirroringId") String portMirroringId, @Query("api-version") String apiVersion, @Body WorkloadNetworkPortMirroringInner workloadNetworkPortMirroring, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks deletePortMirroring" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/portMirroringProfiles/{portMirroringId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deletePortMirroring(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("portMirroringId") String portMirroringId, @Path("privateCloudName") String privateCloudName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks beginDeletePortMirroring" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/portMirroringProfiles/{portMirroringId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDeletePortMirroring(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("portMirroringId") String portMirroringId, @Path("privateCloudName") String privateCloudName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks listVMGroups" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/vmGroups")
        Observable<Response<ResponseBody>> listVMGroups(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks getVMGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/vmGroups/{vmGroupId}")
        Observable<Response<ResponseBody>> getVMGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("vmGroupId") String vmGroupId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks createVMGroup" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/vmGroups/{vmGroupId}")
        Observable<Response<ResponseBody>> createVMGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("vmGroupId") String vmGroupId, @Query("api-version") String apiVersion, @Body WorkloadNetworkVMGroupInner workloadNetworkVMGroup, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks beginCreateVMGroup" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/vmGroups/{vmGroupId}")
        Observable<Response<ResponseBody>> beginCreateVMGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("vmGroupId") String vmGroupId, @Query("api-version") String apiVersion, @Body WorkloadNetworkVMGroupInner workloadNetworkVMGroup, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks updateVMGroup" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/vmGroups/{vmGroupId}")
        Observable<Response<ResponseBody>> updateVMGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("vmGroupId") String vmGroupId, @Query("api-version") String apiVersion, @Body WorkloadNetworkVMGroupInner workloadNetworkVMGroup, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks beginUpdateVMGroup" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/vmGroups/{vmGroupId}")
        Observable<Response<ResponseBody>> beginUpdateVMGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("vmGroupId") String vmGroupId, @Query("api-version") String apiVersion, @Body WorkloadNetworkVMGroupInner workloadNetworkVMGroup, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks deleteVMGroup" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/vmGroups/{vmGroupId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteVMGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("vmGroupId") String vmGroupId, @Path("privateCloudName") String privateCloudName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks beginDeleteVMGroup" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/vmGroups/{vmGroupId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDeleteVMGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("vmGroupId") String vmGroupId, @Path("privateCloudName") String privateCloudName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks listVirtualMachines" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/virtualMachines")
        Observable<Response<ResponseBody>> listVirtualMachines(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks getVirtualMachine" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/virtualMachines/{virtualMachineId}")
        Observable<Response<ResponseBody>> getVirtualMachine(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("virtualMachineId") String virtualMachineId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks listDnsServices" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/dnsServices")
        Observable<Response<ResponseBody>> listDnsServices(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks getDnsService" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/dnsServices/{dnsServiceId}")
        Observable<Response<ResponseBody>> getDnsService(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("dnsServiceId") String dnsServiceId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks createDnsService" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/dnsServices/{dnsServiceId}")
        Observable<Response<ResponseBody>> createDnsService(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("dnsServiceId") String dnsServiceId, @Query("api-version") String apiVersion, @Body WorkloadNetworkDnsServiceInner workloadNetworkDnsService, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks beginCreateDnsService" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/dnsServices/{dnsServiceId}")
        Observable<Response<ResponseBody>> beginCreateDnsService(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("dnsServiceId") String dnsServiceId, @Query("api-version") String apiVersion, @Body WorkloadNetworkDnsServiceInner workloadNetworkDnsService, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks updateDnsService" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/dnsServices/{dnsServiceId}")
        Observable<Response<ResponseBody>> updateDnsService(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("dnsServiceId") String dnsServiceId, @Query("api-version") String apiVersion, @Body WorkloadNetworkDnsServiceInner workloadNetworkDnsService, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks beginUpdateDnsService" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/dnsServices/{dnsServiceId}")
        Observable<Response<ResponseBody>> beginUpdateDnsService(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("dnsServiceId") String dnsServiceId, @Query("api-version") String apiVersion, @Body WorkloadNetworkDnsServiceInner workloadNetworkDnsService, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks deleteDnsService" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/dnsServices/{dnsServiceId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteDnsService(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dnsServiceId") String dnsServiceId, @Path("privateCloudName") String privateCloudName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks beginDeleteDnsService" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/dnsServices/{dnsServiceId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDeleteDnsService(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dnsServiceId") String dnsServiceId, @Path("privateCloudName") String privateCloudName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks listDnsZones" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/dnsZones")
        Observable<Response<ResponseBody>> listDnsZones(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks getDnsZone" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/dnsZones/{dnsZoneId}")
        Observable<Response<ResponseBody>> getDnsZone(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("dnsZoneId") String dnsZoneId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks createDnsZone" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/dnsZones/{dnsZoneId}")
        Observable<Response<ResponseBody>> createDnsZone(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("dnsZoneId") String dnsZoneId, @Query("api-version") String apiVersion, @Body WorkloadNetworkDnsZoneInner workloadNetworkDnsZone, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks beginCreateDnsZone" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/dnsZones/{dnsZoneId}")
        Observable<Response<ResponseBody>> beginCreateDnsZone(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("dnsZoneId") String dnsZoneId, @Query("api-version") String apiVersion, @Body WorkloadNetworkDnsZoneInner workloadNetworkDnsZone, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks updateDnsZone" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/dnsZones/{dnsZoneId}")
        Observable<Response<ResponseBody>> updateDnsZone(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("dnsZoneId") String dnsZoneId, @Query("api-version") String apiVersion, @Body WorkloadNetworkDnsZoneInner workloadNetworkDnsZone, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks beginUpdateDnsZone" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/dnsZones/{dnsZoneId}")
        Observable<Response<ResponseBody>> beginUpdateDnsZone(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("dnsZoneId") String dnsZoneId, @Query("api-version") String apiVersion, @Body WorkloadNetworkDnsZoneInner workloadNetworkDnsZone, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks deleteDnsZone" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/dnsZones/{dnsZoneId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteDnsZone(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dnsZoneId") String dnsZoneId, @Path("privateCloudName") String privateCloudName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks beginDeleteDnsZone" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/dnsZones/{dnsZoneId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDeleteDnsZone(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dnsZoneId") String dnsZoneId, @Path("privateCloudName") String privateCloudName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks listSegmentsNext" })
        @GET
        Observable<Response<ResponseBody>> listSegmentsNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks listDhcpNext" })
        @GET
        Observable<Response<ResponseBody>> listDhcpNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks listGatewaysNext" })
        @GET
        Observable<Response<ResponseBody>> listGatewaysNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks listPortMirroringNext" })
        @GET
        Observable<Response<ResponseBody>> listPortMirroringNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks listVMGroupsNext" })
        @GET
        Observable<Response<ResponseBody>> listVMGroupsNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks listVirtualMachinesNext" })
        @GET
        Observable<Response<ResponseBody>> listVirtualMachinesNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks listDnsServicesNext" })
        @GET
        Observable<Response<ResponseBody>> listDnsServicesNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2020_07_17_preview.WorkloadNetworks listDnsZonesNext" })
        @GET
        Observable<Response<ResponseBody>> listDnsZonesNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * List of segments in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkSegmentInner&gt; object if successful.
     */
    public PagedList<WorkloadNetworkSegmentInner> listSegments(final String resourceGroupName, final String privateCloudName) {
        ServiceResponse<Page<WorkloadNetworkSegmentInner>> response = listSegmentsSinglePageAsync(resourceGroupName, privateCloudName).toBlocking().single();
        return new PagedList<WorkloadNetworkSegmentInner>(response.body()) {
            @Override
            public Page<WorkloadNetworkSegmentInner> nextPage(String nextPageLink) {
                return listSegmentsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List of segments in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<WorkloadNetworkSegmentInner>> listSegmentsAsync(final String resourceGroupName, final String privateCloudName, final ListOperationCallback<WorkloadNetworkSegmentInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSegmentsSinglePageAsync(resourceGroupName, privateCloudName),
            new Func1<String, Observable<ServiceResponse<Page<WorkloadNetworkSegmentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkSegmentInner>>> call(String nextPageLink) {
                    return listSegmentsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List of segments in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkSegmentInner&gt; object
     */
    public Observable<Page<WorkloadNetworkSegmentInner>> listSegmentsAsync(final String resourceGroupName, final String privateCloudName) {
        return listSegmentsWithServiceResponseAsync(resourceGroupName, privateCloudName)
            .map(new Func1<ServiceResponse<Page<WorkloadNetworkSegmentInner>>, Page<WorkloadNetworkSegmentInner>>() {
                @Override
                public Page<WorkloadNetworkSegmentInner> call(ServiceResponse<Page<WorkloadNetworkSegmentInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List of segments in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkSegmentInner&gt; object
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkSegmentInner>>> listSegmentsWithServiceResponseAsync(final String resourceGroupName, final String privateCloudName) {
        return listSegmentsSinglePageAsync(resourceGroupName, privateCloudName)
            .concatMap(new Func1<ServiceResponse<Page<WorkloadNetworkSegmentInner>>, Observable<ServiceResponse<Page<WorkloadNetworkSegmentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkSegmentInner>>> call(ServiceResponse<Page<WorkloadNetworkSegmentInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listSegmentsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List of segments in a private cloud workload network.
     *
    ServiceResponse<PageImpl<WorkloadNetworkSegmentInner>> * @param resourceGroupName The name of the resource group. The name is case insensitive.
    ServiceResponse<PageImpl<WorkloadNetworkSegmentInner>> * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;WorkloadNetworkSegmentInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkSegmentInner>>> listSegmentsSinglePageAsync(final String resourceGroupName, final String privateCloudName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listSegments(this.client.subscriptionId(), resourceGroupName, privateCloudName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<WorkloadNetworkSegmentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkSegmentInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<WorkloadNetworkSegmentInner>> result = listSegmentsDelegate(response);
                        return Observable.just(new ServiceResponse<Page<WorkloadNetworkSegmentInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<WorkloadNetworkSegmentInner>> listSegmentsDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<WorkloadNetworkSegmentInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<WorkloadNetworkSegmentInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkSegmentInner object if successful.
     */
    public WorkloadNetworkSegmentInner getSegment(String resourceGroupName, String privateCloudName, String segmentId) {
        return getSegmentWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId).toBlocking().single().body();
    }

    /**
     * Get a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkSegmentInner> getSegmentAsync(String resourceGroupName, String privateCloudName, String segmentId, final ServiceCallback<WorkloadNetworkSegmentInner> serviceCallback) {
        return ServiceFuture.fromResponse(getSegmentWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId), serviceCallback);
    }

    /**
     * Get a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkSegmentInner object
     */
    public Observable<WorkloadNetworkSegmentInner> getSegmentAsync(String resourceGroupName, String privateCloudName, String segmentId) {
        return getSegmentWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId).map(new Func1<ServiceResponse<WorkloadNetworkSegmentInner>, WorkloadNetworkSegmentInner>() {
            @Override
            public WorkloadNetworkSegmentInner call(ServiceResponse<WorkloadNetworkSegmentInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkSegmentInner object
     */
    public Observable<ServiceResponse<WorkloadNetworkSegmentInner>> getSegmentWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String segmentId) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (segmentId == null) {
            throw new IllegalArgumentException("Parameter segmentId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getSegment(this.client.subscriptionId(), resourceGroupName, privateCloudName, segmentId, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WorkloadNetworkSegmentInner>>>() {
                @Override
                public Observable<ServiceResponse<WorkloadNetworkSegmentInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WorkloadNetworkSegmentInner> clientResponse = getSegmentDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WorkloadNetworkSegmentInner> getSegmentDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WorkloadNetworkSegmentInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WorkloadNetworkSegmentInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkSegmentInner object if successful.
     */
    public WorkloadNetworkSegmentInner createSegments(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegmentInner workloadNetworkSegment) {
        return createSegmentsWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId, workloadNetworkSegment).toBlocking().last().body();
    }

    /**
     * Create a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkSegmentInner> createSegmentsAsync(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegmentInner workloadNetworkSegment, final ServiceCallback<WorkloadNetworkSegmentInner> serviceCallback) {
        return ServiceFuture.fromResponse(createSegmentsWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId, workloadNetworkSegment), serviceCallback);
    }

    /**
     * Create a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<WorkloadNetworkSegmentInner> createSegmentsAsync(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegmentInner workloadNetworkSegment) {
        return createSegmentsWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId, workloadNetworkSegment).map(new Func1<ServiceResponse<WorkloadNetworkSegmentInner>, WorkloadNetworkSegmentInner>() {
            @Override
            public WorkloadNetworkSegmentInner call(ServiceResponse<WorkloadNetworkSegmentInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<WorkloadNetworkSegmentInner>> createSegmentsWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegmentInner workloadNetworkSegment) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (segmentId == null) {
            throw new IllegalArgumentException("Parameter segmentId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkSegment == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkSegment is required and cannot be null.");
        }
        Validator.validate(workloadNetworkSegment);
        Observable<Response<ResponseBody>> observable = service.createSegments(this.client.subscriptionId(), resourceGroupName, privateCloudName, segmentId, this.client.apiVersion(), workloadNetworkSegment, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<WorkloadNetworkSegmentInner>() { }.getType());
    }

    /**
     * Create a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkSegmentInner object if successful.
     */
    public WorkloadNetworkSegmentInner beginCreateSegments(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegmentInner workloadNetworkSegment) {
        return beginCreateSegmentsWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId, workloadNetworkSegment).toBlocking().single().body();
    }

    /**
     * Create a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkSegmentInner> beginCreateSegmentsAsync(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegmentInner workloadNetworkSegment, final ServiceCallback<WorkloadNetworkSegmentInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateSegmentsWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId, workloadNetworkSegment), serviceCallback);
    }

    /**
     * Create a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkSegmentInner object
     */
    public Observable<WorkloadNetworkSegmentInner> beginCreateSegmentsAsync(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegmentInner workloadNetworkSegment) {
        return beginCreateSegmentsWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId, workloadNetworkSegment).map(new Func1<ServiceResponse<WorkloadNetworkSegmentInner>, WorkloadNetworkSegmentInner>() {
            @Override
            public WorkloadNetworkSegmentInner call(ServiceResponse<WorkloadNetworkSegmentInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkSegmentInner object
     */
    public Observable<ServiceResponse<WorkloadNetworkSegmentInner>> beginCreateSegmentsWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegmentInner workloadNetworkSegment) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (segmentId == null) {
            throw new IllegalArgumentException("Parameter segmentId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkSegment == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkSegment is required and cannot be null.");
        }
        Validator.validate(workloadNetworkSegment);
        return service.beginCreateSegments(this.client.subscriptionId(), resourceGroupName, privateCloudName, segmentId, this.client.apiVersion(), workloadNetworkSegment, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WorkloadNetworkSegmentInner>>>() {
                @Override
                public Observable<ServiceResponse<WorkloadNetworkSegmentInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WorkloadNetworkSegmentInner> clientResponse = beginCreateSegmentsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WorkloadNetworkSegmentInner> beginCreateSegmentsDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WorkloadNetworkSegmentInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WorkloadNetworkSegmentInner>() { }.getType())
                .register(201, new TypeToken<WorkloadNetworkSegmentInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create or update a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkSegmentInner object if successful.
     */
    public WorkloadNetworkSegmentInner updateSegments(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegmentInner workloadNetworkSegment) {
        return updateSegmentsWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId, workloadNetworkSegment).toBlocking().last().body();
    }

    /**
     * Create or update a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkSegmentInner> updateSegmentsAsync(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegmentInner workloadNetworkSegment, final ServiceCallback<WorkloadNetworkSegmentInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateSegmentsWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId, workloadNetworkSegment), serviceCallback);
    }

    /**
     * Create or update a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<WorkloadNetworkSegmentInner> updateSegmentsAsync(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegmentInner workloadNetworkSegment) {
        return updateSegmentsWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId, workloadNetworkSegment).map(new Func1<ServiceResponse<WorkloadNetworkSegmentInner>, WorkloadNetworkSegmentInner>() {
            @Override
            public WorkloadNetworkSegmentInner call(ServiceResponse<WorkloadNetworkSegmentInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<WorkloadNetworkSegmentInner>> updateSegmentsWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegmentInner workloadNetworkSegment) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (segmentId == null) {
            throw new IllegalArgumentException("Parameter segmentId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkSegment == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkSegment is required and cannot be null.");
        }
        Validator.validate(workloadNetworkSegment);
        Observable<Response<ResponseBody>> observable = service.updateSegments(this.client.subscriptionId(), resourceGroupName, privateCloudName, segmentId, this.client.apiVersion(), workloadNetworkSegment, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<WorkloadNetworkSegmentInner>() { }.getType());
    }

    /**
     * Create or update a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkSegmentInner object if successful.
     */
    public WorkloadNetworkSegmentInner beginUpdateSegments(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegmentInner workloadNetworkSegment) {
        return beginUpdateSegmentsWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId, workloadNetworkSegment).toBlocking().single().body();
    }

    /**
     * Create or update a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkSegmentInner> beginUpdateSegmentsAsync(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegmentInner workloadNetworkSegment, final ServiceCallback<WorkloadNetworkSegmentInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateSegmentsWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId, workloadNetworkSegment), serviceCallback);
    }

    /**
     * Create or update a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkSegmentInner object
     */
    public Observable<WorkloadNetworkSegmentInner> beginUpdateSegmentsAsync(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegmentInner workloadNetworkSegment) {
        return beginUpdateSegmentsWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId, workloadNetworkSegment).map(new Func1<ServiceResponse<WorkloadNetworkSegmentInner>, WorkloadNetworkSegmentInner>() {
            @Override
            public WorkloadNetworkSegmentInner call(ServiceResponse<WorkloadNetworkSegmentInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkSegmentInner object
     */
    public Observable<ServiceResponse<WorkloadNetworkSegmentInner>> beginUpdateSegmentsWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegmentInner workloadNetworkSegment) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (segmentId == null) {
            throw new IllegalArgumentException("Parameter segmentId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkSegment == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkSegment is required and cannot be null.");
        }
        Validator.validate(workloadNetworkSegment);
        return service.beginUpdateSegments(this.client.subscriptionId(), resourceGroupName, privateCloudName, segmentId, this.client.apiVersion(), workloadNetworkSegment, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WorkloadNetworkSegmentInner>>>() {
                @Override
                public Observable<ServiceResponse<WorkloadNetworkSegmentInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WorkloadNetworkSegmentInner> clientResponse = beginUpdateSegmentsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WorkloadNetworkSegmentInner> beginUpdateSegmentsDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WorkloadNetworkSegmentInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WorkloadNetworkSegmentInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Delete a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void deleteSegment(String resourceGroupName, String privateCloudName, String segmentId) {
        deleteSegmentWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId).toBlocking().last().body();
    }

    /**
     * Delete a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteSegmentAsync(String resourceGroupName, String privateCloudName, String segmentId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteSegmentWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId), serviceCallback);
    }

    /**
     * Delete a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteSegmentAsync(String resourceGroupName, String privateCloudName, String segmentId) {
        return deleteSegmentWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteSegmentWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String segmentId) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (segmentId == null) {
            throw new IllegalArgumentException("Parameter segmentId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.deleteSegment(this.client.subscriptionId(), resourceGroupName, privateCloudName, segmentId, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Delete a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDeleteSegment(String resourceGroupName, String privateCloudName, String segmentId) {
        beginDeleteSegmentWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId).toBlocking().single().body();
    }

    /**
     * Delete a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteSegmentAsync(String resourceGroupName, String privateCloudName, String segmentId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteSegmentWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId), serviceCallback);
    }

    /**
     * Delete a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteSegmentAsync(String resourceGroupName, String privateCloudName, String segmentId) {
        return beginDeleteSegmentWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteSegmentWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String segmentId) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (segmentId == null) {
            throw new IllegalArgumentException("Parameter segmentId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDeleteSegment(this.client.subscriptionId(), resourceGroupName, privateCloudName, segmentId, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteSegmentDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteSegmentDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List dhcp in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkDhcpInner&gt; object if successful.
     */
    public PagedList<WorkloadNetworkDhcpInner> listDhcp(final String resourceGroupName, final String privateCloudName) {
        ServiceResponse<Page<WorkloadNetworkDhcpInner>> response = listDhcpSinglePageAsync(resourceGroupName, privateCloudName).toBlocking().single();
        return new PagedList<WorkloadNetworkDhcpInner>(response.body()) {
            @Override
            public Page<WorkloadNetworkDhcpInner> nextPage(String nextPageLink) {
                return listDhcpNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List dhcp in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<WorkloadNetworkDhcpInner>> listDhcpAsync(final String resourceGroupName, final String privateCloudName, final ListOperationCallback<WorkloadNetworkDhcpInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listDhcpSinglePageAsync(resourceGroupName, privateCloudName),
            new Func1<String, Observable<ServiceResponse<Page<WorkloadNetworkDhcpInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkDhcpInner>>> call(String nextPageLink) {
                    return listDhcpNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List dhcp in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkDhcpInner&gt; object
     */
    public Observable<Page<WorkloadNetworkDhcpInner>> listDhcpAsync(final String resourceGroupName, final String privateCloudName) {
        return listDhcpWithServiceResponseAsync(resourceGroupName, privateCloudName)
            .map(new Func1<ServiceResponse<Page<WorkloadNetworkDhcpInner>>, Page<WorkloadNetworkDhcpInner>>() {
                @Override
                public Page<WorkloadNetworkDhcpInner> call(ServiceResponse<Page<WorkloadNetworkDhcpInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List dhcp in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkDhcpInner&gt; object
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkDhcpInner>>> listDhcpWithServiceResponseAsync(final String resourceGroupName, final String privateCloudName) {
        return listDhcpSinglePageAsync(resourceGroupName, privateCloudName)
            .concatMap(new Func1<ServiceResponse<Page<WorkloadNetworkDhcpInner>>, Observable<ServiceResponse<Page<WorkloadNetworkDhcpInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkDhcpInner>>> call(ServiceResponse<Page<WorkloadNetworkDhcpInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listDhcpNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List dhcp in a private cloud workload network.
     *
    ServiceResponse<PageImpl<WorkloadNetworkDhcpInner>> * @param resourceGroupName The name of the resource group. The name is case insensitive.
    ServiceResponse<PageImpl<WorkloadNetworkDhcpInner>> * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;WorkloadNetworkDhcpInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkDhcpInner>>> listDhcpSinglePageAsync(final String resourceGroupName, final String privateCloudName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listDhcp(this.client.subscriptionId(), resourceGroupName, privateCloudName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<WorkloadNetworkDhcpInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkDhcpInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<WorkloadNetworkDhcpInner>> result = listDhcpDelegate(response);
                        return Observable.just(new ServiceResponse<Page<WorkloadNetworkDhcpInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<WorkloadNetworkDhcpInner>> listDhcpDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<WorkloadNetworkDhcpInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<WorkloadNetworkDhcpInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkDhcpInner object if successful.
     */
    public WorkloadNetworkDhcpInner getDhcp(String resourceGroupName, String dhcpId, String privateCloudName) {
        return getDhcpWithServiceResponseAsync(resourceGroupName, dhcpId, privateCloudName).toBlocking().single().body();
    }

    /**
     * Get dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkDhcpInner> getDhcpAsync(String resourceGroupName, String dhcpId, String privateCloudName, final ServiceCallback<WorkloadNetworkDhcpInner> serviceCallback) {
        return ServiceFuture.fromResponse(getDhcpWithServiceResponseAsync(resourceGroupName, dhcpId, privateCloudName), serviceCallback);
    }

    /**
     * Get dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkDhcpInner object
     */
    public Observable<WorkloadNetworkDhcpInner> getDhcpAsync(String resourceGroupName, String dhcpId, String privateCloudName) {
        return getDhcpWithServiceResponseAsync(resourceGroupName, dhcpId, privateCloudName).map(new Func1<ServiceResponse<WorkloadNetworkDhcpInner>, WorkloadNetworkDhcpInner>() {
            @Override
            public WorkloadNetworkDhcpInner call(ServiceResponse<WorkloadNetworkDhcpInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkDhcpInner object
     */
    public Observable<ServiceResponse<WorkloadNetworkDhcpInner>> getDhcpWithServiceResponseAsync(String resourceGroupName, String dhcpId, String privateCloudName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dhcpId == null) {
            throw new IllegalArgumentException("Parameter dhcpId is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getDhcp(this.client.subscriptionId(), resourceGroupName, dhcpId, privateCloudName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WorkloadNetworkDhcpInner>>>() {
                @Override
                public Observable<ServiceResponse<WorkloadNetworkDhcpInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WorkloadNetworkDhcpInner> clientResponse = getDhcpDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WorkloadNetworkDhcpInner> getDhcpDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WorkloadNetworkDhcpInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WorkloadNetworkDhcpInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkDhcpInner object if successful.
     */
    public WorkloadNetworkDhcpInner createDhcp(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcpInner workloadNetworkDhcp) {
        return createDhcpWithServiceResponseAsync(resourceGroupName, privateCloudName, dhcpId, workloadNetworkDhcp).toBlocking().last().body();
    }

    /**
     * Create dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkDhcpInner> createDhcpAsync(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcpInner workloadNetworkDhcp, final ServiceCallback<WorkloadNetworkDhcpInner> serviceCallback) {
        return ServiceFuture.fromResponse(createDhcpWithServiceResponseAsync(resourceGroupName, privateCloudName, dhcpId, workloadNetworkDhcp), serviceCallback);
    }

    /**
     * Create dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<WorkloadNetworkDhcpInner> createDhcpAsync(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcpInner workloadNetworkDhcp) {
        return createDhcpWithServiceResponseAsync(resourceGroupName, privateCloudName, dhcpId, workloadNetworkDhcp).map(new Func1<ServiceResponse<WorkloadNetworkDhcpInner>, WorkloadNetworkDhcpInner>() {
            @Override
            public WorkloadNetworkDhcpInner call(ServiceResponse<WorkloadNetworkDhcpInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<WorkloadNetworkDhcpInner>> createDhcpWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcpInner workloadNetworkDhcp) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (dhcpId == null) {
            throw new IllegalArgumentException("Parameter dhcpId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkDhcp == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkDhcp is required and cannot be null.");
        }
        Validator.validate(workloadNetworkDhcp);
        Observable<Response<ResponseBody>> observable = service.createDhcp(this.client.subscriptionId(), resourceGroupName, privateCloudName, dhcpId, this.client.apiVersion(), workloadNetworkDhcp, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<WorkloadNetworkDhcpInner>() { }.getType());
    }

    /**
     * Create dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkDhcpInner object if successful.
     */
    public WorkloadNetworkDhcpInner beginCreateDhcp(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcpInner workloadNetworkDhcp) {
        return beginCreateDhcpWithServiceResponseAsync(resourceGroupName, privateCloudName, dhcpId, workloadNetworkDhcp).toBlocking().single().body();
    }

    /**
     * Create dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkDhcpInner> beginCreateDhcpAsync(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcpInner workloadNetworkDhcp, final ServiceCallback<WorkloadNetworkDhcpInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateDhcpWithServiceResponseAsync(resourceGroupName, privateCloudName, dhcpId, workloadNetworkDhcp), serviceCallback);
    }

    /**
     * Create dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkDhcpInner object
     */
    public Observable<WorkloadNetworkDhcpInner> beginCreateDhcpAsync(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcpInner workloadNetworkDhcp) {
        return beginCreateDhcpWithServiceResponseAsync(resourceGroupName, privateCloudName, dhcpId, workloadNetworkDhcp).map(new Func1<ServiceResponse<WorkloadNetworkDhcpInner>, WorkloadNetworkDhcpInner>() {
            @Override
            public WorkloadNetworkDhcpInner call(ServiceResponse<WorkloadNetworkDhcpInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkDhcpInner object
     */
    public Observable<ServiceResponse<WorkloadNetworkDhcpInner>> beginCreateDhcpWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcpInner workloadNetworkDhcp) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (dhcpId == null) {
            throw new IllegalArgumentException("Parameter dhcpId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkDhcp == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkDhcp is required and cannot be null.");
        }
        Validator.validate(workloadNetworkDhcp);
        return service.beginCreateDhcp(this.client.subscriptionId(), resourceGroupName, privateCloudName, dhcpId, this.client.apiVersion(), workloadNetworkDhcp, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WorkloadNetworkDhcpInner>>>() {
                @Override
                public Observable<ServiceResponse<WorkloadNetworkDhcpInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WorkloadNetworkDhcpInner> clientResponse = beginCreateDhcpDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WorkloadNetworkDhcpInner> beginCreateDhcpDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WorkloadNetworkDhcpInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WorkloadNetworkDhcpInner>() { }.getType())
                .register(201, new TypeToken<WorkloadNetworkDhcpInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create or update dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkDhcpInner object if successful.
     */
    public WorkloadNetworkDhcpInner updateDhcp(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcpInner workloadNetworkDhcp) {
        return updateDhcpWithServiceResponseAsync(resourceGroupName, privateCloudName, dhcpId, workloadNetworkDhcp).toBlocking().last().body();
    }

    /**
     * Create or update dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkDhcpInner> updateDhcpAsync(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcpInner workloadNetworkDhcp, final ServiceCallback<WorkloadNetworkDhcpInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateDhcpWithServiceResponseAsync(resourceGroupName, privateCloudName, dhcpId, workloadNetworkDhcp), serviceCallback);
    }

    /**
     * Create or update dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<WorkloadNetworkDhcpInner> updateDhcpAsync(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcpInner workloadNetworkDhcp) {
        return updateDhcpWithServiceResponseAsync(resourceGroupName, privateCloudName, dhcpId, workloadNetworkDhcp).map(new Func1<ServiceResponse<WorkloadNetworkDhcpInner>, WorkloadNetworkDhcpInner>() {
            @Override
            public WorkloadNetworkDhcpInner call(ServiceResponse<WorkloadNetworkDhcpInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<WorkloadNetworkDhcpInner>> updateDhcpWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcpInner workloadNetworkDhcp) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (dhcpId == null) {
            throw new IllegalArgumentException("Parameter dhcpId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkDhcp == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkDhcp is required and cannot be null.");
        }
        Validator.validate(workloadNetworkDhcp);
        Observable<Response<ResponseBody>> observable = service.updateDhcp(this.client.subscriptionId(), resourceGroupName, privateCloudName, dhcpId, this.client.apiVersion(), workloadNetworkDhcp, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<WorkloadNetworkDhcpInner>() { }.getType());
    }

    /**
     * Create or update dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkDhcpInner object if successful.
     */
    public WorkloadNetworkDhcpInner beginUpdateDhcp(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcpInner workloadNetworkDhcp) {
        return beginUpdateDhcpWithServiceResponseAsync(resourceGroupName, privateCloudName, dhcpId, workloadNetworkDhcp).toBlocking().single().body();
    }

    /**
     * Create or update dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkDhcpInner> beginUpdateDhcpAsync(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcpInner workloadNetworkDhcp, final ServiceCallback<WorkloadNetworkDhcpInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateDhcpWithServiceResponseAsync(resourceGroupName, privateCloudName, dhcpId, workloadNetworkDhcp), serviceCallback);
    }

    /**
     * Create or update dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkDhcpInner object
     */
    public Observable<WorkloadNetworkDhcpInner> beginUpdateDhcpAsync(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcpInner workloadNetworkDhcp) {
        return beginUpdateDhcpWithServiceResponseAsync(resourceGroupName, privateCloudName, dhcpId, workloadNetworkDhcp).map(new Func1<ServiceResponse<WorkloadNetworkDhcpInner>, WorkloadNetworkDhcpInner>() {
            @Override
            public WorkloadNetworkDhcpInner call(ServiceResponse<WorkloadNetworkDhcpInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkDhcpInner object
     */
    public Observable<ServiceResponse<WorkloadNetworkDhcpInner>> beginUpdateDhcpWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcpInner workloadNetworkDhcp) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (dhcpId == null) {
            throw new IllegalArgumentException("Parameter dhcpId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkDhcp == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkDhcp is required and cannot be null.");
        }
        Validator.validate(workloadNetworkDhcp);
        return service.beginUpdateDhcp(this.client.subscriptionId(), resourceGroupName, privateCloudName, dhcpId, this.client.apiVersion(), workloadNetworkDhcp, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WorkloadNetworkDhcpInner>>>() {
                @Override
                public Observable<ServiceResponse<WorkloadNetworkDhcpInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WorkloadNetworkDhcpInner> clientResponse = beginUpdateDhcpDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WorkloadNetworkDhcpInner> beginUpdateDhcpDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WorkloadNetworkDhcpInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WorkloadNetworkDhcpInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Delete dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void deleteDhcp(String resourceGroupName, String privateCloudName, String dhcpId) {
        deleteDhcpWithServiceResponseAsync(resourceGroupName, privateCloudName, dhcpId).toBlocking().last().body();
    }

    /**
     * Delete dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteDhcpAsync(String resourceGroupName, String privateCloudName, String dhcpId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteDhcpWithServiceResponseAsync(resourceGroupName, privateCloudName, dhcpId), serviceCallback);
    }

    /**
     * Delete dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteDhcpAsync(String resourceGroupName, String privateCloudName, String dhcpId) {
        return deleteDhcpWithServiceResponseAsync(resourceGroupName, privateCloudName, dhcpId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteDhcpWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String dhcpId) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (dhcpId == null) {
            throw new IllegalArgumentException("Parameter dhcpId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.deleteDhcp(this.client.subscriptionId(), resourceGroupName, privateCloudName, dhcpId, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Delete dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDeleteDhcp(String resourceGroupName, String privateCloudName, String dhcpId) {
        beginDeleteDhcpWithServiceResponseAsync(resourceGroupName, privateCloudName, dhcpId).toBlocking().single().body();
    }

    /**
     * Delete dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteDhcpAsync(String resourceGroupName, String privateCloudName, String dhcpId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteDhcpWithServiceResponseAsync(resourceGroupName, privateCloudName, dhcpId), serviceCallback);
    }

    /**
     * Delete dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteDhcpAsync(String resourceGroupName, String privateCloudName, String dhcpId) {
        return beginDeleteDhcpWithServiceResponseAsync(resourceGroupName, privateCloudName, dhcpId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteDhcpWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String dhcpId) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (dhcpId == null) {
            throw new IllegalArgumentException("Parameter dhcpId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDeleteDhcp(this.client.subscriptionId(), resourceGroupName, privateCloudName, dhcpId, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDhcpDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDhcpDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List of gateways in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkGatewayInner&gt; object if successful.
     */
    public PagedList<WorkloadNetworkGatewayInner> listGateways(final String resourceGroupName, final String privateCloudName) {
        ServiceResponse<Page<WorkloadNetworkGatewayInner>> response = listGatewaysSinglePageAsync(resourceGroupName, privateCloudName).toBlocking().single();
        return new PagedList<WorkloadNetworkGatewayInner>(response.body()) {
            @Override
            public Page<WorkloadNetworkGatewayInner> nextPage(String nextPageLink) {
                return listGatewaysNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List of gateways in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<WorkloadNetworkGatewayInner>> listGatewaysAsync(final String resourceGroupName, final String privateCloudName, final ListOperationCallback<WorkloadNetworkGatewayInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listGatewaysSinglePageAsync(resourceGroupName, privateCloudName),
            new Func1<String, Observable<ServiceResponse<Page<WorkloadNetworkGatewayInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkGatewayInner>>> call(String nextPageLink) {
                    return listGatewaysNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List of gateways in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkGatewayInner&gt; object
     */
    public Observable<Page<WorkloadNetworkGatewayInner>> listGatewaysAsync(final String resourceGroupName, final String privateCloudName) {
        return listGatewaysWithServiceResponseAsync(resourceGroupName, privateCloudName)
            .map(new Func1<ServiceResponse<Page<WorkloadNetworkGatewayInner>>, Page<WorkloadNetworkGatewayInner>>() {
                @Override
                public Page<WorkloadNetworkGatewayInner> call(ServiceResponse<Page<WorkloadNetworkGatewayInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List of gateways in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkGatewayInner&gt; object
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkGatewayInner>>> listGatewaysWithServiceResponseAsync(final String resourceGroupName, final String privateCloudName) {
        return listGatewaysSinglePageAsync(resourceGroupName, privateCloudName)
            .concatMap(new Func1<ServiceResponse<Page<WorkloadNetworkGatewayInner>>, Observable<ServiceResponse<Page<WorkloadNetworkGatewayInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkGatewayInner>>> call(ServiceResponse<Page<WorkloadNetworkGatewayInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listGatewaysNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List of gateways in a private cloud workload network.
     *
    ServiceResponse<PageImpl<WorkloadNetworkGatewayInner>> * @param resourceGroupName The name of the resource group. The name is case insensitive.
    ServiceResponse<PageImpl<WorkloadNetworkGatewayInner>> * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;WorkloadNetworkGatewayInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkGatewayInner>>> listGatewaysSinglePageAsync(final String resourceGroupName, final String privateCloudName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listGateways(this.client.subscriptionId(), resourceGroupName, privateCloudName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<WorkloadNetworkGatewayInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkGatewayInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<WorkloadNetworkGatewayInner>> result = listGatewaysDelegate(response);
                        return Observable.just(new ServiceResponse<Page<WorkloadNetworkGatewayInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<WorkloadNetworkGatewayInner>> listGatewaysDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<WorkloadNetworkGatewayInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<WorkloadNetworkGatewayInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get a gateway by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param gatewayId NSX Gateway identifier. Generally the same as the Gateway's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkGatewayInner object if successful.
     */
    public WorkloadNetworkGatewayInner getGateway(String resourceGroupName, String privateCloudName, String gatewayId) {
        return getGatewayWithServiceResponseAsync(resourceGroupName, privateCloudName, gatewayId).toBlocking().single().body();
    }

    /**
     * Get a gateway by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param gatewayId NSX Gateway identifier. Generally the same as the Gateway's display name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkGatewayInner> getGatewayAsync(String resourceGroupName, String privateCloudName, String gatewayId, final ServiceCallback<WorkloadNetworkGatewayInner> serviceCallback) {
        return ServiceFuture.fromResponse(getGatewayWithServiceResponseAsync(resourceGroupName, privateCloudName, gatewayId), serviceCallback);
    }

    /**
     * Get a gateway by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param gatewayId NSX Gateway identifier. Generally the same as the Gateway's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkGatewayInner object
     */
    public Observable<WorkloadNetworkGatewayInner> getGatewayAsync(String resourceGroupName, String privateCloudName, String gatewayId) {
        return getGatewayWithServiceResponseAsync(resourceGroupName, privateCloudName, gatewayId).map(new Func1<ServiceResponse<WorkloadNetworkGatewayInner>, WorkloadNetworkGatewayInner>() {
            @Override
            public WorkloadNetworkGatewayInner call(ServiceResponse<WorkloadNetworkGatewayInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a gateway by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param gatewayId NSX Gateway identifier. Generally the same as the Gateway's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkGatewayInner object
     */
    public Observable<ServiceResponse<WorkloadNetworkGatewayInner>> getGatewayWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String gatewayId) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (gatewayId == null) {
            throw new IllegalArgumentException("Parameter gatewayId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getGateway(this.client.subscriptionId(), resourceGroupName, privateCloudName, gatewayId, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WorkloadNetworkGatewayInner>>>() {
                @Override
                public Observable<ServiceResponse<WorkloadNetworkGatewayInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WorkloadNetworkGatewayInner> clientResponse = getGatewayDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WorkloadNetworkGatewayInner> getGatewayDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WorkloadNetworkGatewayInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WorkloadNetworkGatewayInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List of port mirroring profiles in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkPortMirroringInner&gt; object if successful.
     */
    public PagedList<WorkloadNetworkPortMirroringInner> listPortMirroring(final String resourceGroupName, final String privateCloudName) {
        ServiceResponse<Page<WorkloadNetworkPortMirroringInner>> response = listPortMirroringSinglePageAsync(resourceGroupName, privateCloudName).toBlocking().single();
        return new PagedList<WorkloadNetworkPortMirroringInner>(response.body()) {
            @Override
            public Page<WorkloadNetworkPortMirroringInner> nextPage(String nextPageLink) {
                return listPortMirroringNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List of port mirroring profiles in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<WorkloadNetworkPortMirroringInner>> listPortMirroringAsync(final String resourceGroupName, final String privateCloudName, final ListOperationCallback<WorkloadNetworkPortMirroringInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listPortMirroringSinglePageAsync(resourceGroupName, privateCloudName),
            new Func1<String, Observable<ServiceResponse<Page<WorkloadNetworkPortMirroringInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkPortMirroringInner>>> call(String nextPageLink) {
                    return listPortMirroringNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List of port mirroring profiles in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkPortMirroringInner&gt; object
     */
    public Observable<Page<WorkloadNetworkPortMirroringInner>> listPortMirroringAsync(final String resourceGroupName, final String privateCloudName) {
        return listPortMirroringWithServiceResponseAsync(resourceGroupName, privateCloudName)
            .map(new Func1<ServiceResponse<Page<WorkloadNetworkPortMirroringInner>>, Page<WorkloadNetworkPortMirroringInner>>() {
                @Override
                public Page<WorkloadNetworkPortMirroringInner> call(ServiceResponse<Page<WorkloadNetworkPortMirroringInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List of port mirroring profiles in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkPortMirroringInner&gt; object
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkPortMirroringInner>>> listPortMirroringWithServiceResponseAsync(final String resourceGroupName, final String privateCloudName) {
        return listPortMirroringSinglePageAsync(resourceGroupName, privateCloudName)
            .concatMap(new Func1<ServiceResponse<Page<WorkloadNetworkPortMirroringInner>>, Observable<ServiceResponse<Page<WorkloadNetworkPortMirroringInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkPortMirroringInner>>> call(ServiceResponse<Page<WorkloadNetworkPortMirroringInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listPortMirroringNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List of port mirroring profiles in a private cloud workload network.
     *
    ServiceResponse<PageImpl<WorkloadNetworkPortMirroringInner>> * @param resourceGroupName The name of the resource group. The name is case insensitive.
    ServiceResponse<PageImpl<WorkloadNetworkPortMirroringInner>> * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;WorkloadNetworkPortMirroringInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkPortMirroringInner>>> listPortMirroringSinglePageAsync(final String resourceGroupName, final String privateCloudName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listPortMirroring(this.client.subscriptionId(), resourceGroupName, privateCloudName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<WorkloadNetworkPortMirroringInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkPortMirroringInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<WorkloadNetworkPortMirroringInner>> result = listPortMirroringDelegate(response);
                        return Observable.just(new ServiceResponse<Page<WorkloadNetworkPortMirroringInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<WorkloadNetworkPortMirroringInner>> listPortMirroringDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<WorkloadNetworkPortMirroringInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<WorkloadNetworkPortMirroringInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkPortMirroringInner object if successful.
     */
    public WorkloadNetworkPortMirroringInner getPortMirroring(String resourceGroupName, String privateCloudName, String portMirroringId) {
        return getPortMirroringWithServiceResponseAsync(resourceGroupName, privateCloudName, portMirroringId).toBlocking().single().body();
    }

    /**
     * Get a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkPortMirroringInner> getPortMirroringAsync(String resourceGroupName, String privateCloudName, String portMirroringId, final ServiceCallback<WorkloadNetworkPortMirroringInner> serviceCallback) {
        return ServiceFuture.fromResponse(getPortMirroringWithServiceResponseAsync(resourceGroupName, privateCloudName, portMirroringId), serviceCallback);
    }

    /**
     * Get a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkPortMirroringInner object
     */
    public Observable<WorkloadNetworkPortMirroringInner> getPortMirroringAsync(String resourceGroupName, String privateCloudName, String portMirroringId) {
        return getPortMirroringWithServiceResponseAsync(resourceGroupName, privateCloudName, portMirroringId).map(new Func1<ServiceResponse<WorkloadNetworkPortMirroringInner>, WorkloadNetworkPortMirroringInner>() {
            @Override
            public WorkloadNetworkPortMirroringInner call(ServiceResponse<WorkloadNetworkPortMirroringInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkPortMirroringInner object
     */
    public Observable<ServiceResponse<WorkloadNetworkPortMirroringInner>> getPortMirroringWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String portMirroringId) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (portMirroringId == null) {
            throw new IllegalArgumentException("Parameter portMirroringId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getPortMirroring(this.client.subscriptionId(), resourceGroupName, privateCloudName, portMirroringId, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WorkloadNetworkPortMirroringInner>>>() {
                @Override
                public Observable<ServiceResponse<WorkloadNetworkPortMirroringInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WorkloadNetworkPortMirroringInner> clientResponse = getPortMirroringDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WorkloadNetworkPortMirroringInner> getPortMirroringDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WorkloadNetworkPortMirroringInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WorkloadNetworkPortMirroringInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkPortMirroringInner object if successful.
     */
    public WorkloadNetworkPortMirroringInner createPortMirroring(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroringInner workloadNetworkPortMirroring) {
        return createPortMirroringWithServiceResponseAsync(resourceGroupName, privateCloudName, portMirroringId, workloadNetworkPortMirroring).toBlocking().last().body();
    }

    /**
     * Create a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkPortMirroringInner> createPortMirroringAsync(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroringInner workloadNetworkPortMirroring, final ServiceCallback<WorkloadNetworkPortMirroringInner> serviceCallback) {
        return ServiceFuture.fromResponse(createPortMirroringWithServiceResponseAsync(resourceGroupName, privateCloudName, portMirroringId, workloadNetworkPortMirroring), serviceCallback);
    }

    /**
     * Create a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<WorkloadNetworkPortMirroringInner> createPortMirroringAsync(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroringInner workloadNetworkPortMirroring) {
        return createPortMirroringWithServiceResponseAsync(resourceGroupName, privateCloudName, portMirroringId, workloadNetworkPortMirroring).map(new Func1<ServiceResponse<WorkloadNetworkPortMirroringInner>, WorkloadNetworkPortMirroringInner>() {
            @Override
            public WorkloadNetworkPortMirroringInner call(ServiceResponse<WorkloadNetworkPortMirroringInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<WorkloadNetworkPortMirroringInner>> createPortMirroringWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroringInner workloadNetworkPortMirroring) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (portMirroringId == null) {
            throw new IllegalArgumentException("Parameter portMirroringId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkPortMirroring == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkPortMirroring is required and cannot be null.");
        }
        Validator.validate(workloadNetworkPortMirroring);
        Observable<Response<ResponseBody>> observable = service.createPortMirroring(this.client.subscriptionId(), resourceGroupName, privateCloudName, portMirroringId, this.client.apiVersion(), workloadNetworkPortMirroring, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<WorkloadNetworkPortMirroringInner>() { }.getType());
    }

    /**
     * Create a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkPortMirroringInner object if successful.
     */
    public WorkloadNetworkPortMirroringInner beginCreatePortMirroring(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroringInner workloadNetworkPortMirroring) {
        return beginCreatePortMirroringWithServiceResponseAsync(resourceGroupName, privateCloudName, portMirroringId, workloadNetworkPortMirroring).toBlocking().single().body();
    }

    /**
     * Create a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkPortMirroringInner> beginCreatePortMirroringAsync(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroringInner workloadNetworkPortMirroring, final ServiceCallback<WorkloadNetworkPortMirroringInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreatePortMirroringWithServiceResponseAsync(resourceGroupName, privateCloudName, portMirroringId, workloadNetworkPortMirroring), serviceCallback);
    }

    /**
     * Create a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkPortMirroringInner object
     */
    public Observable<WorkloadNetworkPortMirroringInner> beginCreatePortMirroringAsync(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroringInner workloadNetworkPortMirroring) {
        return beginCreatePortMirroringWithServiceResponseAsync(resourceGroupName, privateCloudName, portMirroringId, workloadNetworkPortMirroring).map(new Func1<ServiceResponse<WorkloadNetworkPortMirroringInner>, WorkloadNetworkPortMirroringInner>() {
            @Override
            public WorkloadNetworkPortMirroringInner call(ServiceResponse<WorkloadNetworkPortMirroringInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkPortMirroringInner object
     */
    public Observable<ServiceResponse<WorkloadNetworkPortMirroringInner>> beginCreatePortMirroringWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroringInner workloadNetworkPortMirroring) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (portMirroringId == null) {
            throw new IllegalArgumentException("Parameter portMirroringId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkPortMirroring == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkPortMirroring is required and cannot be null.");
        }
        Validator.validate(workloadNetworkPortMirroring);
        return service.beginCreatePortMirroring(this.client.subscriptionId(), resourceGroupName, privateCloudName, portMirroringId, this.client.apiVersion(), workloadNetworkPortMirroring, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WorkloadNetworkPortMirroringInner>>>() {
                @Override
                public Observable<ServiceResponse<WorkloadNetworkPortMirroringInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WorkloadNetworkPortMirroringInner> clientResponse = beginCreatePortMirroringDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WorkloadNetworkPortMirroringInner> beginCreatePortMirroringDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WorkloadNetworkPortMirroringInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WorkloadNetworkPortMirroringInner>() { }.getType())
                .register(201, new TypeToken<WorkloadNetworkPortMirroringInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create or update a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkPortMirroringInner object if successful.
     */
    public WorkloadNetworkPortMirroringInner updatePortMirroring(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroringInner workloadNetworkPortMirroring) {
        return updatePortMirroringWithServiceResponseAsync(resourceGroupName, privateCloudName, portMirroringId, workloadNetworkPortMirroring).toBlocking().last().body();
    }

    /**
     * Create or update a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkPortMirroringInner> updatePortMirroringAsync(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroringInner workloadNetworkPortMirroring, final ServiceCallback<WorkloadNetworkPortMirroringInner> serviceCallback) {
        return ServiceFuture.fromResponse(updatePortMirroringWithServiceResponseAsync(resourceGroupName, privateCloudName, portMirroringId, workloadNetworkPortMirroring), serviceCallback);
    }

    /**
     * Create or update a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<WorkloadNetworkPortMirroringInner> updatePortMirroringAsync(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroringInner workloadNetworkPortMirroring) {
        return updatePortMirroringWithServiceResponseAsync(resourceGroupName, privateCloudName, portMirroringId, workloadNetworkPortMirroring).map(new Func1<ServiceResponse<WorkloadNetworkPortMirroringInner>, WorkloadNetworkPortMirroringInner>() {
            @Override
            public WorkloadNetworkPortMirroringInner call(ServiceResponse<WorkloadNetworkPortMirroringInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<WorkloadNetworkPortMirroringInner>> updatePortMirroringWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroringInner workloadNetworkPortMirroring) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (portMirroringId == null) {
            throw new IllegalArgumentException("Parameter portMirroringId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkPortMirroring == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkPortMirroring is required and cannot be null.");
        }
        Validator.validate(workloadNetworkPortMirroring);
        Observable<Response<ResponseBody>> observable = service.updatePortMirroring(this.client.subscriptionId(), resourceGroupName, privateCloudName, portMirroringId, this.client.apiVersion(), workloadNetworkPortMirroring, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<WorkloadNetworkPortMirroringInner>() { }.getType());
    }

    /**
     * Create or update a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkPortMirroringInner object if successful.
     */
    public WorkloadNetworkPortMirroringInner beginUpdatePortMirroring(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroringInner workloadNetworkPortMirroring) {
        return beginUpdatePortMirroringWithServiceResponseAsync(resourceGroupName, privateCloudName, portMirroringId, workloadNetworkPortMirroring).toBlocking().single().body();
    }

    /**
     * Create or update a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkPortMirroringInner> beginUpdatePortMirroringAsync(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroringInner workloadNetworkPortMirroring, final ServiceCallback<WorkloadNetworkPortMirroringInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdatePortMirroringWithServiceResponseAsync(resourceGroupName, privateCloudName, portMirroringId, workloadNetworkPortMirroring), serviceCallback);
    }

    /**
     * Create or update a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkPortMirroringInner object
     */
    public Observable<WorkloadNetworkPortMirroringInner> beginUpdatePortMirroringAsync(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroringInner workloadNetworkPortMirroring) {
        return beginUpdatePortMirroringWithServiceResponseAsync(resourceGroupName, privateCloudName, portMirroringId, workloadNetworkPortMirroring).map(new Func1<ServiceResponse<WorkloadNetworkPortMirroringInner>, WorkloadNetworkPortMirroringInner>() {
            @Override
            public WorkloadNetworkPortMirroringInner call(ServiceResponse<WorkloadNetworkPortMirroringInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkPortMirroringInner object
     */
    public Observable<ServiceResponse<WorkloadNetworkPortMirroringInner>> beginUpdatePortMirroringWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroringInner workloadNetworkPortMirroring) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (portMirroringId == null) {
            throw new IllegalArgumentException("Parameter portMirroringId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkPortMirroring == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkPortMirroring is required and cannot be null.");
        }
        Validator.validate(workloadNetworkPortMirroring);
        return service.beginUpdatePortMirroring(this.client.subscriptionId(), resourceGroupName, privateCloudName, portMirroringId, this.client.apiVersion(), workloadNetworkPortMirroring, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WorkloadNetworkPortMirroringInner>>>() {
                @Override
                public Observable<ServiceResponse<WorkloadNetworkPortMirroringInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WorkloadNetworkPortMirroringInner> clientResponse = beginUpdatePortMirroringDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WorkloadNetworkPortMirroringInner> beginUpdatePortMirroringDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WorkloadNetworkPortMirroringInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WorkloadNetworkPortMirroringInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Delete a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void deletePortMirroring(String resourceGroupName, String portMirroringId, String privateCloudName) {
        deletePortMirroringWithServiceResponseAsync(resourceGroupName, portMirroringId, privateCloudName).toBlocking().last().body();
    }

    /**
     * Delete a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deletePortMirroringAsync(String resourceGroupName, String portMirroringId, String privateCloudName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deletePortMirroringWithServiceResponseAsync(resourceGroupName, portMirroringId, privateCloudName), serviceCallback);
    }

    /**
     * Delete a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deletePortMirroringAsync(String resourceGroupName, String portMirroringId, String privateCloudName) {
        return deletePortMirroringWithServiceResponseAsync(resourceGroupName, portMirroringId, privateCloudName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deletePortMirroringWithServiceResponseAsync(String resourceGroupName, String portMirroringId, String privateCloudName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (portMirroringId == null) {
            throw new IllegalArgumentException("Parameter portMirroringId is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.deletePortMirroring(this.client.subscriptionId(), resourceGroupName, portMirroringId, privateCloudName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Delete a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDeletePortMirroring(String resourceGroupName, String portMirroringId, String privateCloudName) {
        beginDeletePortMirroringWithServiceResponseAsync(resourceGroupName, portMirroringId, privateCloudName).toBlocking().single().body();
    }

    /**
     * Delete a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeletePortMirroringAsync(String resourceGroupName, String portMirroringId, String privateCloudName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeletePortMirroringWithServiceResponseAsync(resourceGroupName, portMirroringId, privateCloudName), serviceCallback);
    }

    /**
     * Delete a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeletePortMirroringAsync(String resourceGroupName, String portMirroringId, String privateCloudName) {
        return beginDeletePortMirroringWithServiceResponseAsync(resourceGroupName, portMirroringId, privateCloudName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeletePortMirroringWithServiceResponseAsync(String resourceGroupName, String portMirroringId, String privateCloudName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (portMirroringId == null) {
            throw new IllegalArgumentException("Parameter portMirroringId is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDeletePortMirroring(this.client.subscriptionId(), resourceGroupName, portMirroringId, privateCloudName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeletePortMirroringDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeletePortMirroringDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List of vm groups in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkVMGroupInner&gt; object if successful.
     */
    public PagedList<WorkloadNetworkVMGroupInner> listVMGroups(final String resourceGroupName, final String privateCloudName) {
        ServiceResponse<Page<WorkloadNetworkVMGroupInner>> response = listVMGroupsSinglePageAsync(resourceGroupName, privateCloudName).toBlocking().single();
        return new PagedList<WorkloadNetworkVMGroupInner>(response.body()) {
            @Override
            public Page<WorkloadNetworkVMGroupInner> nextPage(String nextPageLink) {
                return listVMGroupsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List of vm groups in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<WorkloadNetworkVMGroupInner>> listVMGroupsAsync(final String resourceGroupName, final String privateCloudName, final ListOperationCallback<WorkloadNetworkVMGroupInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listVMGroupsSinglePageAsync(resourceGroupName, privateCloudName),
            new Func1<String, Observable<ServiceResponse<Page<WorkloadNetworkVMGroupInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkVMGroupInner>>> call(String nextPageLink) {
                    return listVMGroupsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List of vm groups in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkVMGroupInner&gt; object
     */
    public Observable<Page<WorkloadNetworkVMGroupInner>> listVMGroupsAsync(final String resourceGroupName, final String privateCloudName) {
        return listVMGroupsWithServiceResponseAsync(resourceGroupName, privateCloudName)
            .map(new Func1<ServiceResponse<Page<WorkloadNetworkVMGroupInner>>, Page<WorkloadNetworkVMGroupInner>>() {
                @Override
                public Page<WorkloadNetworkVMGroupInner> call(ServiceResponse<Page<WorkloadNetworkVMGroupInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List of vm groups in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkVMGroupInner&gt; object
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkVMGroupInner>>> listVMGroupsWithServiceResponseAsync(final String resourceGroupName, final String privateCloudName) {
        return listVMGroupsSinglePageAsync(resourceGroupName, privateCloudName)
            .concatMap(new Func1<ServiceResponse<Page<WorkloadNetworkVMGroupInner>>, Observable<ServiceResponse<Page<WorkloadNetworkVMGroupInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkVMGroupInner>>> call(ServiceResponse<Page<WorkloadNetworkVMGroupInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listVMGroupsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List of vm groups in a private cloud workload network.
     *
    ServiceResponse<PageImpl<WorkloadNetworkVMGroupInner>> * @param resourceGroupName The name of the resource group. The name is case insensitive.
    ServiceResponse<PageImpl<WorkloadNetworkVMGroupInner>> * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;WorkloadNetworkVMGroupInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkVMGroupInner>>> listVMGroupsSinglePageAsync(final String resourceGroupName, final String privateCloudName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listVMGroups(this.client.subscriptionId(), resourceGroupName, privateCloudName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<WorkloadNetworkVMGroupInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkVMGroupInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<WorkloadNetworkVMGroupInner>> result = listVMGroupsDelegate(response);
                        return Observable.just(new ServiceResponse<Page<WorkloadNetworkVMGroupInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<WorkloadNetworkVMGroupInner>> listVMGroupsDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<WorkloadNetworkVMGroupInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<WorkloadNetworkVMGroupInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkVMGroupInner object if successful.
     */
    public WorkloadNetworkVMGroupInner getVMGroup(String resourceGroupName, String privateCloudName, String vmGroupId) {
        return getVMGroupWithServiceResponseAsync(resourceGroupName, privateCloudName, vmGroupId).toBlocking().single().body();
    }

    /**
     * Get a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkVMGroupInner> getVMGroupAsync(String resourceGroupName, String privateCloudName, String vmGroupId, final ServiceCallback<WorkloadNetworkVMGroupInner> serviceCallback) {
        return ServiceFuture.fromResponse(getVMGroupWithServiceResponseAsync(resourceGroupName, privateCloudName, vmGroupId), serviceCallback);
    }

    /**
     * Get a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkVMGroupInner object
     */
    public Observable<WorkloadNetworkVMGroupInner> getVMGroupAsync(String resourceGroupName, String privateCloudName, String vmGroupId) {
        return getVMGroupWithServiceResponseAsync(resourceGroupName, privateCloudName, vmGroupId).map(new Func1<ServiceResponse<WorkloadNetworkVMGroupInner>, WorkloadNetworkVMGroupInner>() {
            @Override
            public WorkloadNetworkVMGroupInner call(ServiceResponse<WorkloadNetworkVMGroupInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkVMGroupInner object
     */
    public Observable<ServiceResponse<WorkloadNetworkVMGroupInner>> getVMGroupWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String vmGroupId) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (vmGroupId == null) {
            throw new IllegalArgumentException("Parameter vmGroupId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getVMGroup(this.client.subscriptionId(), resourceGroupName, privateCloudName, vmGroupId, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WorkloadNetworkVMGroupInner>>>() {
                @Override
                public Observable<ServiceResponse<WorkloadNetworkVMGroupInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WorkloadNetworkVMGroupInner> clientResponse = getVMGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WorkloadNetworkVMGroupInner> getVMGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WorkloadNetworkVMGroupInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WorkloadNetworkVMGroupInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkVMGroupInner object if successful.
     */
    public WorkloadNetworkVMGroupInner createVMGroup(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroupInner workloadNetworkVMGroup) {
        return createVMGroupWithServiceResponseAsync(resourceGroupName, privateCloudName, vmGroupId, workloadNetworkVMGroup).toBlocking().last().body();
    }

    /**
     * Create a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkVMGroupInner> createVMGroupAsync(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroupInner workloadNetworkVMGroup, final ServiceCallback<WorkloadNetworkVMGroupInner> serviceCallback) {
        return ServiceFuture.fromResponse(createVMGroupWithServiceResponseAsync(resourceGroupName, privateCloudName, vmGroupId, workloadNetworkVMGroup), serviceCallback);
    }

    /**
     * Create a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<WorkloadNetworkVMGroupInner> createVMGroupAsync(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroupInner workloadNetworkVMGroup) {
        return createVMGroupWithServiceResponseAsync(resourceGroupName, privateCloudName, vmGroupId, workloadNetworkVMGroup).map(new Func1<ServiceResponse<WorkloadNetworkVMGroupInner>, WorkloadNetworkVMGroupInner>() {
            @Override
            public WorkloadNetworkVMGroupInner call(ServiceResponse<WorkloadNetworkVMGroupInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<WorkloadNetworkVMGroupInner>> createVMGroupWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroupInner workloadNetworkVMGroup) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (vmGroupId == null) {
            throw new IllegalArgumentException("Parameter vmGroupId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkVMGroup == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkVMGroup is required and cannot be null.");
        }
        Validator.validate(workloadNetworkVMGroup);
        Observable<Response<ResponseBody>> observable = service.createVMGroup(this.client.subscriptionId(), resourceGroupName, privateCloudName, vmGroupId, this.client.apiVersion(), workloadNetworkVMGroup, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<WorkloadNetworkVMGroupInner>() { }.getType());
    }

    /**
     * Create a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkVMGroupInner object if successful.
     */
    public WorkloadNetworkVMGroupInner beginCreateVMGroup(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroupInner workloadNetworkVMGroup) {
        return beginCreateVMGroupWithServiceResponseAsync(resourceGroupName, privateCloudName, vmGroupId, workloadNetworkVMGroup).toBlocking().single().body();
    }

    /**
     * Create a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkVMGroupInner> beginCreateVMGroupAsync(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroupInner workloadNetworkVMGroup, final ServiceCallback<WorkloadNetworkVMGroupInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateVMGroupWithServiceResponseAsync(resourceGroupName, privateCloudName, vmGroupId, workloadNetworkVMGroup), serviceCallback);
    }

    /**
     * Create a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkVMGroupInner object
     */
    public Observable<WorkloadNetworkVMGroupInner> beginCreateVMGroupAsync(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroupInner workloadNetworkVMGroup) {
        return beginCreateVMGroupWithServiceResponseAsync(resourceGroupName, privateCloudName, vmGroupId, workloadNetworkVMGroup).map(new Func1<ServiceResponse<WorkloadNetworkVMGroupInner>, WorkloadNetworkVMGroupInner>() {
            @Override
            public WorkloadNetworkVMGroupInner call(ServiceResponse<WorkloadNetworkVMGroupInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkVMGroupInner object
     */
    public Observable<ServiceResponse<WorkloadNetworkVMGroupInner>> beginCreateVMGroupWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroupInner workloadNetworkVMGroup) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (vmGroupId == null) {
            throw new IllegalArgumentException("Parameter vmGroupId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkVMGroup == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkVMGroup is required and cannot be null.");
        }
        Validator.validate(workloadNetworkVMGroup);
        return service.beginCreateVMGroup(this.client.subscriptionId(), resourceGroupName, privateCloudName, vmGroupId, this.client.apiVersion(), workloadNetworkVMGroup, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WorkloadNetworkVMGroupInner>>>() {
                @Override
                public Observable<ServiceResponse<WorkloadNetworkVMGroupInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WorkloadNetworkVMGroupInner> clientResponse = beginCreateVMGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WorkloadNetworkVMGroupInner> beginCreateVMGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WorkloadNetworkVMGroupInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WorkloadNetworkVMGroupInner>() { }.getType())
                .register(201, new TypeToken<WorkloadNetworkVMGroupInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create or update a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkVMGroupInner object if successful.
     */
    public WorkloadNetworkVMGroupInner updateVMGroup(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroupInner workloadNetworkVMGroup) {
        return updateVMGroupWithServiceResponseAsync(resourceGroupName, privateCloudName, vmGroupId, workloadNetworkVMGroup).toBlocking().last().body();
    }

    /**
     * Create or update a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkVMGroupInner> updateVMGroupAsync(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroupInner workloadNetworkVMGroup, final ServiceCallback<WorkloadNetworkVMGroupInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateVMGroupWithServiceResponseAsync(resourceGroupName, privateCloudName, vmGroupId, workloadNetworkVMGroup), serviceCallback);
    }

    /**
     * Create or update a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<WorkloadNetworkVMGroupInner> updateVMGroupAsync(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroupInner workloadNetworkVMGroup) {
        return updateVMGroupWithServiceResponseAsync(resourceGroupName, privateCloudName, vmGroupId, workloadNetworkVMGroup).map(new Func1<ServiceResponse<WorkloadNetworkVMGroupInner>, WorkloadNetworkVMGroupInner>() {
            @Override
            public WorkloadNetworkVMGroupInner call(ServiceResponse<WorkloadNetworkVMGroupInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<WorkloadNetworkVMGroupInner>> updateVMGroupWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroupInner workloadNetworkVMGroup) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (vmGroupId == null) {
            throw new IllegalArgumentException("Parameter vmGroupId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkVMGroup == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkVMGroup is required and cannot be null.");
        }
        Validator.validate(workloadNetworkVMGroup);
        Observable<Response<ResponseBody>> observable = service.updateVMGroup(this.client.subscriptionId(), resourceGroupName, privateCloudName, vmGroupId, this.client.apiVersion(), workloadNetworkVMGroup, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<WorkloadNetworkVMGroupInner>() { }.getType());
    }

    /**
     * Create or update a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkVMGroupInner object if successful.
     */
    public WorkloadNetworkVMGroupInner beginUpdateVMGroup(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroupInner workloadNetworkVMGroup) {
        return beginUpdateVMGroupWithServiceResponseAsync(resourceGroupName, privateCloudName, vmGroupId, workloadNetworkVMGroup).toBlocking().single().body();
    }

    /**
     * Create or update a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkVMGroupInner> beginUpdateVMGroupAsync(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroupInner workloadNetworkVMGroup, final ServiceCallback<WorkloadNetworkVMGroupInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateVMGroupWithServiceResponseAsync(resourceGroupName, privateCloudName, vmGroupId, workloadNetworkVMGroup), serviceCallback);
    }

    /**
     * Create or update a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkVMGroupInner object
     */
    public Observable<WorkloadNetworkVMGroupInner> beginUpdateVMGroupAsync(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroupInner workloadNetworkVMGroup) {
        return beginUpdateVMGroupWithServiceResponseAsync(resourceGroupName, privateCloudName, vmGroupId, workloadNetworkVMGroup).map(new Func1<ServiceResponse<WorkloadNetworkVMGroupInner>, WorkloadNetworkVMGroupInner>() {
            @Override
            public WorkloadNetworkVMGroupInner call(ServiceResponse<WorkloadNetworkVMGroupInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkVMGroupInner object
     */
    public Observable<ServiceResponse<WorkloadNetworkVMGroupInner>> beginUpdateVMGroupWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroupInner workloadNetworkVMGroup) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (vmGroupId == null) {
            throw new IllegalArgumentException("Parameter vmGroupId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkVMGroup == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkVMGroup is required and cannot be null.");
        }
        Validator.validate(workloadNetworkVMGroup);
        return service.beginUpdateVMGroup(this.client.subscriptionId(), resourceGroupName, privateCloudName, vmGroupId, this.client.apiVersion(), workloadNetworkVMGroup, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WorkloadNetworkVMGroupInner>>>() {
                @Override
                public Observable<ServiceResponse<WorkloadNetworkVMGroupInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WorkloadNetworkVMGroupInner> clientResponse = beginUpdateVMGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WorkloadNetworkVMGroupInner> beginUpdateVMGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WorkloadNetworkVMGroupInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WorkloadNetworkVMGroupInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Delete a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void deleteVMGroup(String resourceGroupName, String vmGroupId, String privateCloudName) {
        deleteVMGroupWithServiceResponseAsync(resourceGroupName, vmGroupId, privateCloudName).toBlocking().last().body();
    }

    /**
     * Delete a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteVMGroupAsync(String resourceGroupName, String vmGroupId, String privateCloudName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteVMGroupWithServiceResponseAsync(resourceGroupName, vmGroupId, privateCloudName), serviceCallback);
    }

    /**
     * Delete a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteVMGroupAsync(String resourceGroupName, String vmGroupId, String privateCloudName) {
        return deleteVMGroupWithServiceResponseAsync(resourceGroupName, vmGroupId, privateCloudName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteVMGroupWithServiceResponseAsync(String resourceGroupName, String vmGroupId, String privateCloudName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (vmGroupId == null) {
            throw new IllegalArgumentException("Parameter vmGroupId is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.deleteVMGroup(this.client.subscriptionId(), resourceGroupName, vmGroupId, privateCloudName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Delete a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDeleteVMGroup(String resourceGroupName, String vmGroupId, String privateCloudName) {
        beginDeleteVMGroupWithServiceResponseAsync(resourceGroupName, vmGroupId, privateCloudName).toBlocking().single().body();
    }

    /**
     * Delete a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteVMGroupAsync(String resourceGroupName, String vmGroupId, String privateCloudName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteVMGroupWithServiceResponseAsync(resourceGroupName, vmGroupId, privateCloudName), serviceCallback);
    }

    /**
     * Delete a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteVMGroupAsync(String resourceGroupName, String vmGroupId, String privateCloudName) {
        return beginDeleteVMGroupWithServiceResponseAsync(resourceGroupName, vmGroupId, privateCloudName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteVMGroupWithServiceResponseAsync(String resourceGroupName, String vmGroupId, String privateCloudName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (vmGroupId == null) {
            throw new IllegalArgumentException("Parameter vmGroupId is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDeleteVMGroup(this.client.subscriptionId(), resourceGroupName, vmGroupId, privateCloudName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteVMGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteVMGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List of virtual machines in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkVirtualMachineInner&gt; object if successful.
     */
    public PagedList<WorkloadNetworkVirtualMachineInner> listVirtualMachines(final String resourceGroupName, final String privateCloudName) {
        ServiceResponse<Page<WorkloadNetworkVirtualMachineInner>> response = listVirtualMachinesSinglePageAsync(resourceGroupName, privateCloudName).toBlocking().single();
        return new PagedList<WorkloadNetworkVirtualMachineInner>(response.body()) {
            @Override
            public Page<WorkloadNetworkVirtualMachineInner> nextPage(String nextPageLink) {
                return listVirtualMachinesNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List of virtual machines in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<WorkloadNetworkVirtualMachineInner>> listVirtualMachinesAsync(final String resourceGroupName, final String privateCloudName, final ListOperationCallback<WorkloadNetworkVirtualMachineInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listVirtualMachinesSinglePageAsync(resourceGroupName, privateCloudName),
            new Func1<String, Observable<ServiceResponse<Page<WorkloadNetworkVirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkVirtualMachineInner>>> call(String nextPageLink) {
                    return listVirtualMachinesNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List of virtual machines in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkVirtualMachineInner&gt; object
     */
    public Observable<Page<WorkloadNetworkVirtualMachineInner>> listVirtualMachinesAsync(final String resourceGroupName, final String privateCloudName) {
        return listVirtualMachinesWithServiceResponseAsync(resourceGroupName, privateCloudName)
            .map(new Func1<ServiceResponse<Page<WorkloadNetworkVirtualMachineInner>>, Page<WorkloadNetworkVirtualMachineInner>>() {
                @Override
                public Page<WorkloadNetworkVirtualMachineInner> call(ServiceResponse<Page<WorkloadNetworkVirtualMachineInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List of virtual machines in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkVirtualMachineInner&gt; object
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkVirtualMachineInner>>> listVirtualMachinesWithServiceResponseAsync(final String resourceGroupName, final String privateCloudName) {
        return listVirtualMachinesSinglePageAsync(resourceGroupName, privateCloudName)
            .concatMap(new Func1<ServiceResponse<Page<WorkloadNetworkVirtualMachineInner>>, Observable<ServiceResponse<Page<WorkloadNetworkVirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkVirtualMachineInner>>> call(ServiceResponse<Page<WorkloadNetworkVirtualMachineInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listVirtualMachinesNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List of virtual machines in a private cloud workload network.
     *
    ServiceResponse<PageImpl<WorkloadNetworkVirtualMachineInner>> * @param resourceGroupName The name of the resource group. The name is case insensitive.
    ServiceResponse<PageImpl<WorkloadNetworkVirtualMachineInner>> * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;WorkloadNetworkVirtualMachineInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkVirtualMachineInner>>> listVirtualMachinesSinglePageAsync(final String resourceGroupName, final String privateCloudName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listVirtualMachines(this.client.subscriptionId(), resourceGroupName, privateCloudName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<WorkloadNetworkVirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkVirtualMachineInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<WorkloadNetworkVirtualMachineInner>> result = listVirtualMachinesDelegate(response);
                        return Observable.just(new ServiceResponse<Page<WorkloadNetworkVirtualMachineInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<WorkloadNetworkVirtualMachineInner>> listVirtualMachinesDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<WorkloadNetworkVirtualMachineInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<WorkloadNetworkVirtualMachineInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get a virtual machine by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param virtualMachineId NSX Virtual Machine identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkVirtualMachineInner object if successful.
     */
    public WorkloadNetworkVirtualMachineInner getVirtualMachine(String resourceGroupName, String privateCloudName, String virtualMachineId) {
        return getVirtualMachineWithServiceResponseAsync(resourceGroupName, privateCloudName, virtualMachineId).toBlocking().single().body();
    }

    /**
     * Get a virtual machine by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param virtualMachineId NSX Virtual Machine identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkVirtualMachineInner> getVirtualMachineAsync(String resourceGroupName, String privateCloudName, String virtualMachineId, final ServiceCallback<WorkloadNetworkVirtualMachineInner> serviceCallback) {
        return ServiceFuture.fromResponse(getVirtualMachineWithServiceResponseAsync(resourceGroupName, privateCloudName, virtualMachineId), serviceCallback);
    }

    /**
     * Get a virtual machine by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param virtualMachineId NSX Virtual Machine identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkVirtualMachineInner object
     */
    public Observable<WorkloadNetworkVirtualMachineInner> getVirtualMachineAsync(String resourceGroupName, String privateCloudName, String virtualMachineId) {
        return getVirtualMachineWithServiceResponseAsync(resourceGroupName, privateCloudName, virtualMachineId).map(new Func1<ServiceResponse<WorkloadNetworkVirtualMachineInner>, WorkloadNetworkVirtualMachineInner>() {
            @Override
            public WorkloadNetworkVirtualMachineInner call(ServiceResponse<WorkloadNetworkVirtualMachineInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a virtual machine by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param virtualMachineId NSX Virtual Machine identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkVirtualMachineInner object
     */
    public Observable<ServiceResponse<WorkloadNetworkVirtualMachineInner>> getVirtualMachineWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String virtualMachineId) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (virtualMachineId == null) {
            throw new IllegalArgumentException("Parameter virtualMachineId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getVirtualMachine(this.client.subscriptionId(), resourceGroupName, privateCloudName, virtualMachineId, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WorkloadNetworkVirtualMachineInner>>>() {
                @Override
                public Observable<ServiceResponse<WorkloadNetworkVirtualMachineInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WorkloadNetworkVirtualMachineInner> clientResponse = getVirtualMachineDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WorkloadNetworkVirtualMachineInner> getVirtualMachineDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WorkloadNetworkVirtualMachineInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WorkloadNetworkVirtualMachineInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List of DNS services in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkDnsServiceInner&gt; object if successful.
     */
    public PagedList<WorkloadNetworkDnsServiceInner> listDnsServices(final String resourceGroupName, final String privateCloudName) {
        ServiceResponse<Page<WorkloadNetworkDnsServiceInner>> response = listDnsServicesSinglePageAsync(resourceGroupName, privateCloudName).toBlocking().single();
        return new PagedList<WorkloadNetworkDnsServiceInner>(response.body()) {
            @Override
            public Page<WorkloadNetworkDnsServiceInner> nextPage(String nextPageLink) {
                return listDnsServicesNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List of DNS services in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<WorkloadNetworkDnsServiceInner>> listDnsServicesAsync(final String resourceGroupName, final String privateCloudName, final ListOperationCallback<WorkloadNetworkDnsServiceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listDnsServicesSinglePageAsync(resourceGroupName, privateCloudName),
            new Func1<String, Observable<ServiceResponse<Page<WorkloadNetworkDnsServiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkDnsServiceInner>>> call(String nextPageLink) {
                    return listDnsServicesNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List of DNS services in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkDnsServiceInner&gt; object
     */
    public Observable<Page<WorkloadNetworkDnsServiceInner>> listDnsServicesAsync(final String resourceGroupName, final String privateCloudName) {
        return listDnsServicesWithServiceResponseAsync(resourceGroupName, privateCloudName)
            .map(new Func1<ServiceResponse<Page<WorkloadNetworkDnsServiceInner>>, Page<WorkloadNetworkDnsServiceInner>>() {
                @Override
                public Page<WorkloadNetworkDnsServiceInner> call(ServiceResponse<Page<WorkloadNetworkDnsServiceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List of DNS services in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkDnsServiceInner&gt; object
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkDnsServiceInner>>> listDnsServicesWithServiceResponseAsync(final String resourceGroupName, final String privateCloudName) {
        return listDnsServicesSinglePageAsync(resourceGroupName, privateCloudName)
            .concatMap(new Func1<ServiceResponse<Page<WorkloadNetworkDnsServiceInner>>, Observable<ServiceResponse<Page<WorkloadNetworkDnsServiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkDnsServiceInner>>> call(ServiceResponse<Page<WorkloadNetworkDnsServiceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listDnsServicesNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List of DNS services in a private cloud workload network.
     *
    ServiceResponse<PageImpl<WorkloadNetworkDnsServiceInner>> * @param resourceGroupName The name of the resource group. The name is case insensitive.
    ServiceResponse<PageImpl<WorkloadNetworkDnsServiceInner>> * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;WorkloadNetworkDnsServiceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkDnsServiceInner>>> listDnsServicesSinglePageAsync(final String resourceGroupName, final String privateCloudName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listDnsServices(this.client.subscriptionId(), resourceGroupName, privateCloudName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<WorkloadNetworkDnsServiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkDnsServiceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<WorkloadNetworkDnsServiceInner>> result = listDnsServicesDelegate(response);
                        return Observable.just(new ServiceResponse<Page<WorkloadNetworkDnsServiceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<WorkloadNetworkDnsServiceInner>> listDnsServicesDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<WorkloadNetworkDnsServiceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<WorkloadNetworkDnsServiceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get a DNS service by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsServiceId NSX DNS Service identifier. Generally the same as the DNS Service's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkDnsServiceInner object if successful.
     */
    public WorkloadNetworkDnsServiceInner getDnsService(String resourceGroupName, String privateCloudName, String dnsServiceId) {
        return getDnsServiceWithServiceResponseAsync(resourceGroupName, privateCloudName, dnsServiceId).toBlocking().single().body();
    }

    /**
     * Get a DNS service by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsServiceId NSX DNS Service identifier. Generally the same as the DNS Service's display name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkDnsServiceInner> getDnsServiceAsync(String resourceGroupName, String privateCloudName, String dnsServiceId, final ServiceCallback<WorkloadNetworkDnsServiceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getDnsServiceWithServiceResponseAsync(resourceGroupName, privateCloudName, dnsServiceId), serviceCallback);
    }

    /**
     * Get a DNS service by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsServiceId NSX DNS Service identifier. Generally the same as the DNS Service's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkDnsServiceInner object
     */
    public Observable<WorkloadNetworkDnsServiceInner> getDnsServiceAsync(String resourceGroupName, String privateCloudName, String dnsServiceId) {
        return getDnsServiceWithServiceResponseAsync(resourceGroupName, privateCloudName, dnsServiceId).map(new Func1<ServiceResponse<WorkloadNetworkDnsServiceInner>, WorkloadNetworkDnsServiceInner>() {
            @Override
            public WorkloadNetworkDnsServiceInner call(ServiceResponse<WorkloadNetworkDnsServiceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a DNS service by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsServiceId NSX DNS Service identifier. Generally the same as the DNS Service's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkDnsServiceInner object
     */
    public Observable<ServiceResponse<WorkloadNetworkDnsServiceInner>> getDnsServiceWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String dnsServiceId) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (dnsServiceId == null) {
            throw new IllegalArgumentException("Parameter dnsServiceId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getDnsService(this.client.subscriptionId(), resourceGroupName, privateCloudName, dnsServiceId, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WorkloadNetworkDnsServiceInner>>>() {
                @Override
                public Observable<ServiceResponse<WorkloadNetworkDnsServiceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WorkloadNetworkDnsServiceInner> clientResponse = getDnsServiceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WorkloadNetworkDnsServiceInner> getDnsServiceDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WorkloadNetworkDnsServiceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WorkloadNetworkDnsServiceInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create a DNS service by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsServiceId NSX DNS Service identifier. Generally the same as the DNS Service's display name
     * @param workloadNetworkDnsService NSX DNS Service
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkDnsServiceInner object if successful.
     */
    public WorkloadNetworkDnsServiceInner createDnsService(String resourceGroupName, String privateCloudName, String dnsServiceId, WorkloadNetworkDnsServiceInner workloadNetworkDnsService) {
        return createDnsServiceWithServiceResponseAsync(resourceGroupName, privateCloudName, dnsServiceId, workloadNetworkDnsService).toBlocking().last().body();
    }

    /**
     * Create a DNS service by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsServiceId NSX DNS Service identifier. Generally the same as the DNS Service's display name
     * @param workloadNetworkDnsService NSX DNS Service
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkDnsServiceInner> createDnsServiceAsync(String resourceGroupName, String privateCloudName, String dnsServiceId, WorkloadNetworkDnsServiceInner workloadNetworkDnsService, final ServiceCallback<WorkloadNetworkDnsServiceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createDnsServiceWithServiceResponseAsync(resourceGroupName, privateCloudName, dnsServiceId, workloadNetworkDnsService), serviceCallback);
    }

    /**
     * Create a DNS service by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsServiceId NSX DNS Service identifier. Generally the same as the DNS Service's display name
     * @param workloadNetworkDnsService NSX DNS Service
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<WorkloadNetworkDnsServiceInner> createDnsServiceAsync(String resourceGroupName, String privateCloudName, String dnsServiceId, WorkloadNetworkDnsServiceInner workloadNetworkDnsService) {
        return createDnsServiceWithServiceResponseAsync(resourceGroupName, privateCloudName, dnsServiceId, workloadNetworkDnsService).map(new Func1<ServiceResponse<WorkloadNetworkDnsServiceInner>, WorkloadNetworkDnsServiceInner>() {
            @Override
            public WorkloadNetworkDnsServiceInner call(ServiceResponse<WorkloadNetworkDnsServiceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a DNS service by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsServiceId NSX DNS Service identifier. Generally the same as the DNS Service's display name
     * @param workloadNetworkDnsService NSX DNS Service
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<WorkloadNetworkDnsServiceInner>> createDnsServiceWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String dnsServiceId, WorkloadNetworkDnsServiceInner workloadNetworkDnsService) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (dnsServiceId == null) {
            throw new IllegalArgumentException("Parameter dnsServiceId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkDnsService == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkDnsService is required and cannot be null.");
        }
        Validator.validate(workloadNetworkDnsService);
        Observable<Response<ResponseBody>> observable = service.createDnsService(this.client.subscriptionId(), resourceGroupName, privateCloudName, dnsServiceId, this.client.apiVersion(), workloadNetworkDnsService, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<WorkloadNetworkDnsServiceInner>() { }.getType());
    }

    /**
     * Create a DNS service by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsServiceId NSX DNS Service identifier. Generally the same as the DNS Service's display name
     * @param workloadNetworkDnsService NSX DNS Service
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkDnsServiceInner object if successful.
     */
    public WorkloadNetworkDnsServiceInner beginCreateDnsService(String resourceGroupName, String privateCloudName, String dnsServiceId, WorkloadNetworkDnsServiceInner workloadNetworkDnsService) {
        return beginCreateDnsServiceWithServiceResponseAsync(resourceGroupName, privateCloudName, dnsServiceId, workloadNetworkDnsService).toBlocking().single().body();
    }

    /**
     * Create a DNS service by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsServiceId NSX DNS Service identifier. Generally the same as the DNS Service's display name
     * @param workloadNetworkDnsService NSX DNS Service
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkDnsServiceInner> beginCreateDnsServiceAsync(String resourceGroupName, String privateCloudName, String dnsServiceId, WorkloadNetworkDnsServiceInner workloadNetworkDnsService, final ServiceCallback<WorkloadNetworkDnsServiceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateDnsServiceWithServiceResponseAsync(resourceGroupName, privateCloudName, dnsServiceId, workloadNetworkDnsService), serviceCallback);
    }

    /**
     * Create a DNS service by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsServiceId NSX DNS Service identifier. Generally the same as the DNS Service's display name
     * @param workloadNetworkDnsService NSX DNS Service
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkDnsServiceInner object
     */
    public Observable<WorkloadNetworkDnsServiceInner> beginCreateDnsServiceAsync(String resourceGroupName, String privateCloudName, String dnsServiceId, WorkloadNetworkDnsServiceInner workloadNetworkDnsService) {
        return beginCreateDnsServiceWithServiceResponseAsync(resourceGroupName, privateCloudName, dnsServiceId, workloadNetworkDnsService).map(new Func1<ServiceResponse<WorkloadNetworkDnsServiceInner>, WorkloadNetworkDnsServiceInner>() {
            @Override
            public WorkloadNetworkDnsServiceInner call(ServiceResponse<WorkloadNetworkDnsServiceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a DNS service by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsServiceId NSX DNS Service identifier. Generally the same as the DNS Service's display name
     * @param workloadNetworkDnsService NSX DNS Service
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkDnsServiceInner object
     */
    public Observable<ServiceResponse<WorkloadNetworkDnsServiceInner>> beginCreateDnsServiceWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String dnsServiceId, WorkloadNetworkDnsServiceInner workloadNetworkDnsService) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (dnsServiceId == null) {
            throw new IllegalArgumentException("Parameter dnsServiceId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkDnsService == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkDnsService is required and cannot be null.");
        }
        Validator.validate(workloadNetworkDnsService);
        return service.beginCreateDnsService(this.client.subscriptionId(), resourceGroupName, privateCloudName, dnsServiceId, this.client.apiVersion(), workloadNetworkDnsService, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WorkloadNetworkDnsServiceInner>>>() {
                @Override
                public Observable<ServiceResponse<WorkloadNetworkDnsServiceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WorkloadNetworkDnsServiceInner> clientResponse = beginCreateDnsServiceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WorkloadNetworkDnsServiceInner> beginCreateDnsServiceDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WorkloadNetworkDnsServiceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WorkloadNetworkDnsServiceInner>() { }.getType())
                .register(201, new TypeToken<WorkloadNetworkDnsServiceInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create or update a DNS service by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsServiceId NSX DNS Service identifier. Generally the same as the DNS Service's display name
     * @param workloadNetworkDnsService NSX DNS Service
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkDnsServiceInner object if successful.
     */
    public WorkloadNetworkDnsServiceInner updateDnsService(String resourceGroupName, String privateCloudName, String dnsServiceId, WorkloadNetworkDnsServiceInner workloadNetworkDnsService) {
        return updateDnsServiceWithServiceResponseAsync(resourceGroupName, privateCloudName, dnsServiceId, workloadNetworkDnsService).toBlocking().last().body();
    }

    /**
     * Create or update a DNS service by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsServiceId NSX DNS Service identifier. Generally the same as the DNS Service's display name
     * @param workloadNetworkDnsService NSX DNS Service
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkDnsServiceInner> updateDnsServiceAsync(String resourceGroupName, String privateCloudName, String dnsServiceId, WorkloadNetworkDnsServiceInner workloadNetworkDnsService, final ServiceCallback<WorkloadNetworkDnsServiceInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateDnsServiceWithServiceResponseAsync(resourceGroupName, privateCloudName, dnsServiceId, workloadNetworkDnsService), serviceCallback);
    }

    /**
     * Create or update a DNS service by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsServiceId NSX DNS Service identifier. Generally the same as the DNS Service's display name
     * @param workloadNetworkDnsService NSX DNS Service
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<WorkloadNetworkDnsServiceInner> updateDnsServiceAsync(String resourceGroupName, String privateCloudName, String dnsServiceId, WorkloadNetworkDnsServiceInner workloadNetworkDnsService) {
        return updateDnsServiceWithServiceResponseAsync(resourceGroupName, privateCloudName, dnsServiceId, workloadNetworkDnsService).map(new Func1<ServiceResponse<WorkloadNetworkDnsServiceInner>, WorkloadNetworkDnsServiceInner>() {
            @Override
            public WorkloadNetworkDnsServiceInner call(ServiceResponse<WorkloadNetworkDnsServiceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update a DNS service by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsServiceId NSX DNS Service identifier. Generally the same as the DNS Service's display name
     * @param workloadNetworkDnsService NSX DNS Service
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<WorkloadNetworkDnsServiceInner>> updateDnsServiceWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String dnsServiceId, WorkloadNetworkDnsServiceInner workloadNetworkDnsService) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (dnsServiceId == null) {
            throw new IllegalArgumentException("Parameter dnsServiceId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkDnsService == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkDnsService is required and cannot be null.");
        }
        Validator.validate(workloadNetworkDnsService);
        Observable<Response<ResponseBody>> observable = service.updateDnsService(this.client.subscriptionId(), resourceGroupName, privateCloudName, dnsServiceId, this.client.apiVersion(), workloadNetworkDnsService, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<WorkloadNetworkDnsServiceInner>() { }.getType());
    }

    /**
     * Create or update a DNS service by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsServiceId NSX DNS Service identifier. Generally the same as the DNS Service's display name
     * @param workloadNetworkDnsService NSX DNS Service
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkDnsServiceInner object if successful.
     */
    public WorkloadNetworkDnsServiceInner beginUpdateDnsService(String resourceGroupName, String privateCloudName, String dnsServiceId, WorkloadNetworkDnsServiceInner workloadNetworkDnsService) {
        return beginUpdateDnsServiceWithServiceResponseAsync(resourceGroupName, privateCloudName, dnsServiceId, workloadNetworkDnsService).toBlocking().single().body();
    }

    /**
     * Create or update a DNS service by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsServiceId NSX DNS Service identifier. Generally the same as the DNS Service's display name
     * @param workloadNetworkDnsService NSX DNS Service
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkDnsServiceInner> beginUpdateDnsServiceAsync(String resourceGroupName, String privateCloudName, String dnsServiceId, WorkloadNetworkDnsServiceInner workloadNetworkDnsService, final ServiceCallback<WorkloadNetworkDnsServiceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateDnsServiceWithServiceResponseAsync(resourceGroupName, privateCloudName, dnsServiceId, workloadNetworkDnsService), serviceCallback);
    }

    /**
     * Create or update a DNS service by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsServiceId NSX DNS Service identifier. Generally the same as the DNS Service's display name
     * @param workloadNetworkDnsService NSX DNS Service
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkDnsServiceInner object
     */
    public Observable<WorkloadNetworkDnsServiceInner> beginUpdateDnsServiceAsync(String resourceGroupName, String privateCloudName, String dnsServiceId, WorkloadNetworkDnsServiceInner workloadNetworkDnsService) {
        return beginUpdateDnsServiceWithServiceResponseAsync(resourceGroupName, privateCloudName, dnsServiceId, workloadNetworkDnsService).map(new Func1<ServiceResponse<WorkloadNetworkDnsServiceInner>, WorkloadNetworkDnsServiceInner>() {
            @Override
            public WorkloadNetworkDnsServiceInner call(ServiceResponse<WorkloadNetworkDnsServiceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update a DNS service by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsServiceId NSX DNS Service identifier. Generally the same as the DNS Service's display name
     * @param workloadNetworkDnsService NSX DNS Service
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkDnsServiceInner object
     */
    public Observable<ServiceResponse<WorkloadNetworkDnsServiceInner>> beginUpdateDnsServiceWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String dnsServiceId, WorkloadNetworkDnsServiceInner workloadNetworkDnsService) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (dnsServiceId == null) {
            throw new IllegalArgumentException("Parameter dnsServiceId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkDnsService == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkDnsService is required and cannot be null.");
        }
        Validator.validate(workloadNetworkDnsService);
        return service.beginUpdateDnsService(this.client.subscriptionId(), resourceGroupName, privateCloudName, dnsServiceId, this.client.apiVersion(), workloadNetworkDnsService, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WorkloadNetworkDnsServiceInner>>>() {
                @Override
                public Observable<ServiceResponse<WorkloadNetworkDnsServiceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WorkloadNetworkDnsServiceInner> clientResponse = beginUpdateDnsServiceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WorkloadNetworkDnsServiceInner> beginUpdateDnsServiceDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WorkloadNetworkDnsServiceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WorkloadNetworkDnsServiceInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Delete a DNS service by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsServiceId NSX DNS Service identifier. Generally the same as the DNS Service's display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void deleteDnsService(String resourceGroupName, String dnsServiceId, String privateCloudName) {
        deleteDnsServiceWithServiceResponseAsync(resourceGroupName, dnsServiceId, privateCloudName).toBlocking().last().body();
    }

    /**
     * Delete a DNS service by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsServiceId NSX DNS Service identifier. Generally the same as the DNS Service's display name
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteDnsServiceAsync(String resourceGroupName, String dnsServiceId, String privateCloudName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteDnsServiceWithServiceResponseAsync(resourceGroupName, dnsServiceId, privateCloudName), serviceCallback);
    }

    /**
     * Delete a DNS service by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsServiceId NSX DNS Service identifier. Generally the same as the DNS Service's display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteDnsServiceAsync(String resourceGroupName, String dnsServiceId, String privateCloudName) {
        return deleteDnsServiceWithServiceResponseAsync(resourceGroupName, dnsServiceId, privateCloudName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a DNS service by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsServiceId NSX DNS Service identifier. Generally the same as the DNS Service's display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteDnsServiceWithServiceResponseAsync(String resourceGroupName, String dnsServiceId, String privateCloudName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dnsServiceId == null) {
            throw new IllegalArgumentException("Parameter dnsServiceId is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.deleteDnsService(this.client.subscriptionId(), resourceGroupName, dnsServiceId, privateCloudName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Delete a DNS service by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsServiceId NSX DNS Service identifier. Generally the same as the DNS Service's display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDeleteDnsService(String resourceGroupName, String dnsServiceId, String privateCloudName) {
        beginDeleteDnsServiceWithServiceResponseAsync(resourceGroupName, dnsServiceId, privateCloudName).toBlocking().single().body();
    }

    /**
     * Delete a DNS service by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsServiceId NSX DNS Service identifier. Generally the same as the DNS Service's display name
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteDnsServiceAsync(String resourceGroupName, String dnsServiceId, String privateCloudName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteDnsServiceWithServiceResponseAsync(resourceGroupName, dnsServiceId, privateCloudName), serviceCallback);
    }

    /**
     * Delete a DNS service by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsServiceId NSX DNS Service identifier. Generally the same as the DNS Service's display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteDnsServiceAsync(String resourceGroupName, String dnsServiceId, String privateCloudName) {
        return beginDeleteDnsServiceWithServiceResponseAsync(resourceGroupName, dnsServiceId, privateCloudName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a DNS service by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsServiceId NSX DNS Service identifier. Generally the same as the DNS Service's display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteDnsServiceWithServiceResponseAsync(String resourceGroupName, String dnsServiceId, String privateCloudName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dnsServiceId == null) {
            throw new IllegalArgumentException("Parameter dnsServiceId is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDeleteDnsService(this.client.subscriptionId(), resourceGroupName, dnsServiceId, privateCloudName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDnsServiceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDnsServiceDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List of DNS zones in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkDnsZoneInner&gt; object if successful.
     */
    public PagedList<WorkloadNetworkDnsZoneInner> listDnsZones(final String resourceGroupName, final String privateCloudName) {
        ServiceResponse<Page<WorkloadNetworkDnsZoneInner>> response = listDnsZonesSinglePageAsync(resourceGroupName, privateCloudName).toBlocking().single();
        return new PagedList<WorkloadNetworkDnsZoneInner>(response.body()) {
            @Override
            public Page<WorkloadNetworkDnsZoneInner> nextPage(String nextPageLink) {
                return listDnsZonesNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List of DNS zones in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<WorkloadNetworkDnsZoneInner>> listDnsZonesAsync(final String resourceGroupName, final String privateCloudName, final ListOperationCallback<WorkloadNetworkDnsZoneInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listDnsZonesSinglePageAsync(resourceGroupName, privateCloudName),
            new Func1<String, Observable<ServiceResponse<Page<WorkloadNetworkDnsZoneInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkDnsZoneInner>>> call(String nextPageLink) {
                    return listDnsZonesNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List of DNS zones in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkDnsZoneInner&gt; object
     */
    public Observable<Page<WorkloadNetworkDnsZoneInner>> listDnsZonesAsync(final String resourceGroupName, final String privateCloudName) {
        return listDnsZonesWithServiceResponseAsync(resourceGroupName, privateCloudName)
            .map(new Func1<ServiceResponse<Page<WorkloadNetworkDnsZoneInner>>, Page<WorkloadNetworkDnsZoneInner>>() {
                @Override
                public Page<WorkloadNetworkDnsZoneInner> call(ServiceResponse<Page<WorkloadNetworkDnsZoneInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List of DNS zones in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkDnsZoneInner&gt; object
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkDnsZoneInner>>> listDnsZonesWithServiceResponseAsync(final String resourceGroupName, final String privateCloudName) {
        return listDnsZonesSinglePageAsync(resourceGroupName, privateCloudName)
            .concatMap(new Func1<ServiceResponse<Page<WorkloadNetworkDnsZoneInner>>, Observable<ServiceResponse<Page<WorkloadNetworkDnsZoneInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkDnsZoneInner>>> call(ServiceResponse<Page<WorkloadNetworkDnsZoneInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listDnsZonesNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List of DNS zones in a private cloud workload network.
     *
    ServiceResponse<PageImpl<WorkloadNetworkDnsZoneInner>> * @param resourceGroupName The name of the resource group. The name is case insensitive.
    ServiceResponse<PageImpl<WorkloadNetworkDnsZoneInner>> * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;WorkloadNetworkDnsZoneInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkDnsZoneInner>>> listDnsZonesSinglePageAsync(final String resourceGroupName, final String privateCloudName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listDnsZones(this.client.subscriptionId(), resourceGroupName, privateCloudName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<WorkloadNetworkDnsZoneInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkDnsZoneInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<WorkloadNetworkDnsZoneInner>> result = listDnsZonesDelegate(response);
                        return Observable.just(new ServiceResponse<Page<WorkloadNetworkDnsZoneInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<WorkloadNetworkDnsZoneInner>> listDnsZonesDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<WorkloadNetworkDnsZoneInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<WorkloadNetworkDnsZoneInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get a DNS zone by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsZoneId NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkDnsZoneInner object if successful.
     */
    public WorkloadNetworkDnsZoneInner getDnsZone(String resourceGroupName, String privateCloudName, String dnsZoneId) {
        return getDnsZoneWithServiceResponseAsync(resourceGroupName, privateCloudName, dnsZoneId).toBlocking().single().body();
    }

    /**
     * Get a DNS zone by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsZoneId NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkDnsZoneInner> getDnsZoneAsync(String resourceGroupName, String privateCloudName, String dnsZoneId, final ServiceCallback<WorkloadNetworkDnsZoneInner> serviceCallback) {
        return ServiceFuture.fromResponse(getDnsZoneWithServiceResponseAsync(resourceGroupName, privateCloudName, dnsZoneId), serviceCallback);
    }

    /**
     * Get a DNS zone by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsZoneId NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkDnsZoneInner object
     */
    public Observable<WorkloadNetworkDnsZoneInner> getDnsZoneAsync(String resourceGroupName, String privateCloudName, String dnsZoneId) {
        return getDnsZoneWithServiceResponseAsync(resourceGroupName, privateCloudName, dnsZoneId).map(new Func1<ServiceResponse<WorkloadNetworkDnsZoneInner>, WorkloadNetworkDnsZoneInner>() {
            @Override
            public WorkloadNetworkDnsZoneInner call(ServiceResponse<WorkloadNetworkDnsZoneInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a DNS zone by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsZoneId NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkDnsZoneInner object
     */
    public Observable<ServiceResponse<WorkloadNetworkDnsZoneInner>> getDnsZoneWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String dnsZoneId) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (dnsZoneId == null) {
            throw new IllegalArgumentException("Parameter dnsZoneId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getDnsZone(this.client.subscriptionId(), resourceGroupName, privateCloudName, dnsZoneId, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WorkloadNetworkDnsZoneInner>>>() {
                @Override
                public Observable<ServiceResponse<WorkloadNetworkDnsZoneInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WorkloadNetworkDnsZoneInner> clientResponse = getDnsZoneDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WorkloadNetworkDnsZoneInner> getDnsZoneDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WorkloadNetworkDnsZoneInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WorkloadNetworkDnsZoneInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create a DNS zone by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsZoneId NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
     * @param workloadNetworkDnsZone NSX DNS Zone
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkDnsZoneInner object if successful.
     */
    public WorkloadNetworkDnsZoneInner createDnsZone(String resourceGroupName, String privateCloudName, String dnsZoneId, WorkloadNetworkDnsZoneInner workloadNetworkDnsZone) {
        return createDnsZoneWithServiceResponseAsync(resourceGroupName, privateCloudName, dnsZoneId, workloadNetworkDnsZone).toBlocking().last().body();
    }

    /**
     * Create a DNS zone by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsZoneId NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
     * @param workloadNetworkDnsZone NSX DNS Zone
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkDnsZoneInner> createDnsZoneAsync(String resourceGroupName, String privateCloudName, String dnsZoneId, WorkloadNetworkDnsZoneInner workloadNetworkDnsZone, final ServiceCallback<WorkloadNetworkDnsZoneInner> serviceCallback) {
        return ServiceFuture.fromResponse(createDnsZoneWithServiceResponseAsync(resourceGroupName, privateCloudName, dnsZoneId, workloadNetworkDnsZone), serviceCallback);
    }

    /**
     * Create a DNS zone by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsZoneId NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
     * @param workloadNetworkDnsZone NSX DNS Zone
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<WorkloadNetworkDnsZoneInner> createDnsZoneAsync(String resourceGroupName, String privateCloudName, String dnsZoneId, WorkloadNetworkDnsZoneInner workloadNetworkDnsZone) {
        return createDnsZoneWithServiceResponseAsync(resourceGroupName, privateCloudName, dnsZoneId, workloadNetworkDnsZone).map(new Func1<ServiceResponse<WorkloadNetworkDnsZoneInner>, WorkloadNetworkDnsZoneInner>() {
            @Override
            public WorkloadNetworkDnsZoneInner call(ServiceResponse<WorkloadNetworkDnsZoneInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a DNS zone by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsZoneId NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
     * @param workloadNetworkDnsZone NSX DNS Zone
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<WorkloadNetworkDnsZoneInner>> createDnsZoneWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String dnsZoneId, WorkloadNetworkDnsZoneInner workloadNetworkDnsZone) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (dnsZoneId == null) {
            throw new IllegalArgumentException("Parameter dnsZoneId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkDnsZone == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkDnsZone is required and cannot be null.");
        }
        Validator.validate(workloadNetworkDnsZone);
        Observable<Response<ResponseBody>> observable = service.createDnsZone(this.client.subscriptionId(), resourceGroupName, privateCloudName, dnsZoneId, this.client.apiVersion(), workloadNetworkDnsZone, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<WorkloadNetworkDnsZoneInner>() { }.getType());
    }

    /**
     * Create a DNS zone by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsZoneId NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
     * @param workloadNetworkDnsZone NSX DNS Zone
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkDnsZoneInner object if successful.
     */
    public WorkloadNetworkDnsZoneInner beginCreateDnsZone(String resourceGroupName, String privateCloudName, String dnsZoneId, WorkloadNetworkDnsZoneInner workloadNetworkDnsZone) {
        return beginCreateDnsZoneWithServiceResponseAsync(resourceGroupName, privateCloudName, dnsZoneId, workloadNetworkDnsZone).toBlocking().single().body();
    }

    /**
     * Create a DNS zone by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsZoneId NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
     * @param workloadNetworkDnsZone NSX DNS Zone
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkDnsZoneInner> beginCreateDnsZoneAsync(String resourceGroupName, String privateCloudName, String dnsZoneId, WorkloadNetworkDnsZoneInner workloadNetworkDnsZone, final ServiceCallback<WorkloadNetworkDnsZoneInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateDnsZoneWithServiceResponseAsync(resourceGroupName, privateCloudName, dnsZoneId, workloadNetworkDnsZone), serviceCallback);
    }

    /**
     * Create a DNS zone by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsZoneId NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
     * @param workloadNetworkDnsZone NSX DNS Zone
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkDnsZoneInner object
     */
    public Observable<WorkloadNetworkDnsZoneInner> beginCreateDnsZoneAsync(String resourceGroupName, String privateCloudName, String dnsZoneId, WorkloadNetworkDnsZoneInner workloadNetworkDnsZone) {
        return beginCreateDnsZoneWithServiceResponseAsync(resourceGroupName, privateCloudName, dnsZoneId, workloadNetworkDnsZone).map(new Func1<ServiceResponse<WorkloadNetworkDnsZoneInner>, WorkloadNetworkDnsZoneInner>() {
            @Override
            public WorkloadNetworkDnsZoneInner call(ServiceResponse<WorkloadNetworkDnsZoneInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a DNS zone by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsZoneId NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
     * @param workloadNetworkDnsZone NSX DNS Zone
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkDnsZoneInner object
     */
    public Observable<ServiceResponse<WorkloadNetworkDnsZoneInner>> beginCreateDnsZoneWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String dnsZoneId, WorkloadNetworkDnsZoneInner workloadNetworkDnsZone) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (dnsZoneId == null) {
            throw new IllegalArgumentException("Parameter dnsZoneId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkDnsZone == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkDnsZone is required and cannot be null.");
        }
        Validator.validate(workloadNetworkDnsZone);
        return service.beginCreateDnsZone(this.client.subscriptionId(), resourceGroupName, privateCloudName, dnsZoneId, this.client.apiVersion(), workloadNetworkDnsZone, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WorkloadNetworkDnsZoneInner>>>() {
                @Override
                public Observable<ServiceResponse<WorkloadNetworkDnsZoneInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WorkloadNetworkDnsZoneInner> clientResponse = beginCreateDnsZoneDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WorkloadNetworkDnsZoneInner> beginCreateDnsZoneDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WorkloadNetworkDnsZoneInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WorkloadNetworkDnsZoneInner>() { }.getType())
                .register(201, new TypeToken<WorkloadNetworkDnsZoneInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create or update a DNS zone by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsZoneId NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
     * @param workloadNetworkDnsZone NSX DNS Zone
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkDnsZoneInner object if successful.
     */
    public WorkloadNetworkDnsZoneInner updateDnsZone(String resourceGroupName, String privateCloudName, String dnsZoneId, WorkloadNetworkDnsZoneInner workloadNetworkDnsZone) {
        return updateDnsZoneWithServiceResponseAsync(resourceGroupName, privateCloudName, dnsZoneId, workloadNetworkDnsZone).toBlocking().last().body();
    }

    /**
     * Create or update a DNS zone by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsZoneId NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
     * @param workloadNetworkDnsZone NSX DNS Zone
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkDnsZoneInner> updateDnsZoneAsync(String resourceGroupName, String privateCloudName, String dnsZoneId, WorkloadNetworkDnsZoneInner workloadNetworkDnsZone, final ServiceCallback<WorkloadNetworkDnsZoneInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateDnsZoneWithServiceResponseAsync(resourceGroupName, privateCloudName, dnsZoneId, workloadNetworkDnsZone), serviceCallback);
    }

    /**
     * Create or update a DNS zone by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsZoneId NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
     * @param workloadNetworkDnsZone NSX DNS Zone
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<WorkloadNetworkDnsZoneInner> updateDnsZoneAsync(String resourceGroupName, String privateCloudName, String dnsZoneId, WorkloadNetworkDnsZoneInner workloadNetworkDnsZone) {
        return updateDnsZoneWithServiceResponseAsync(resourceGroupName, privateCloudName, dnsZoneId, workloadNetworkDnsZone).map(new Func1<ServiceResponse<WorkloadNetworkDnsZoneInner>, WorkloadNetworkDnsZoneInner>() {
            @Override
            public WorkloadNetworkDnsZoneInner call(ServiceResponse<WorkloadNetworkDnsZoneInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update a DNS zone by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsZoneId NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
     * @param workloadNetworkDnsZone NSX DNS Zone
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<WorkloadNetworkDnsZoneInner>> updateDnsZoneWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String dnsZoneId, WorkloadNetworkDnsZoneInner workloadNetworkDnsZone) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (dnsZoneId == null) {
            throw new IllegalArgumentException("Parameter dnsZoneId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkDnsZone == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkDnsZone is required and cannot be null.");
        }
        Validator.validate(workloadNetworkDnsZone);
        Observable<Response<ResponseBody>> observable = service.updateDnsZone(this.client.subscriptionId(), resourceGroupName, privateCloudName, dnsZoneId, this.client.apiVersion(), workloadNetworkDnsZone, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<WorkloadNetworkDnsZoneInner>() { }.getType());
    }

    /**
     * Create or update a DNS zone by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsZoneId NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
     * @param workloadNetworkDnsZone NSX DNS Zone
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkDnsZoneInner object if successful.
     */
    public WorkloadNetworkDnsZoneInner beginUpdateDnsZone(String resourceGroupName, String privateCloudName, String dnsZoneId, WorkloadNetworkDnsZoneInner workloadNetworkDnsZone) {
        return beginUpdateDnsZoneWithServiceResponseAsync(resourceGroupName, privateCloudName, dnsZoneId, workloadNetworkDnsZone).toBlocking().single().body();
    }

    /**
     * Create or update a DNS zone by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsZoneId NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
     * @param workloadNetworkDnsZone NSX DNS Zone
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkDnsZoneInner> beginUpdateDnsZoneAsync(String resourceGroupName, String privateCloudName, String dnsZoneId, WorkloadNetworkDnsZoneInner workloadNetworkDnsZone, final ServiceCallback<WorkloadNetworkDnsZoneInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateDnsZoneWithServiceResponseAsync(resourceGroupName, privateCloudName, dnsZoneId, workloadNetworkDnsZone), serviceCallback);
    }

    /**
     * Create or update a DNS zone by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsZoneId NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
     * @param workloadNetworkDnsZone NSX DNS Zone
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkDnsZoneInner object
     */
    public Observable<WorkloadNetworkDnsZoneInner> beginUpdateDnsZoneAsync(String resourceGroupName, String privateCloudName, String dnsZoneId, WorkloadNetworkDnsZoneInner workloadNetworkDnsZone) {
        return beginUpdateDnsZoneWithServiceResponseAsync(resourceGroupName, privateCloudName, dnsZoneId, workloadNetworkDnsZone).map(new Func1<ServiceResponse<WorkloadNetworkDnsZoneInner>, WorkloadNetworkDnsZoneInner>() {
            @Override
            public WorkloadNetworkDnsZoneInner call(ServiceResponse<WorkloadNetworkDnsZoneInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update a DNS zone by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dnsZoneId NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
     * @param workloadNetworkDnsZone NSX DNS Zone
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkDnsZoneInner object
     */
    public Observable<ServiceResponse<WorkloadNetworkDnsZoneInner>> beginUpdateDnsZoneWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String dnsZoneId, WorkloadNetworkDnsZoneInner workloadNetworkDnsZone) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (dnsZoneId == null) {
            throw new IllegalArgumentException("Parameter dnsZoneId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkDnsZone == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkDnsZone is required and cannot be null.");
        }
        Validator.validate(workloadNetworkDnsZone);
        return service.beginUpdateDnsZone(this.client.subscriptionId(), resourceGroupName, privateCloudName, dnsZoneId, this.client.apiVersion(), workloadNetworkDnsZone, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WorkloadNetworkDnsZoneInner>>>() {
                @Override
                public Observable<ServiceResponse<WorkloadNetworkDnsZoneInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WorkloadNetworkDnsZoneInner> clientResponse = beginUpdateDnsZoneDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WorkloadNetworkDnsZoneInner> beginUpdateDnsZoneDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WorkloadNetworkDnsZoneInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WorkloadNetworkDnsZoneInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Delete a DNS zone by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsZoneId NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void deleteDnsZone(String resourceGroupName, String dnsZoneId, String privateCloudName) {
        deleteDnsZoneWithServiceResponseAsync(resourceGroupName, dnsZoneId, privateCloudName).toBlocking().last().body();
    }

    /**
     * Delete a DNS zone by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsZoneId NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteDnsZoneAsync(String resourceGroupName, String dnsZoneId, String privateCloudName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteDnsZoneWithServiceResponseAsync(resourceGroupName, dnsZoneId, privateCloudName), serviceCallback);
    }

    /**
     * Delete a DNS zone by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsZoneId NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteDnsZoneAsync(String resourceGroupName, String dnsZoneId, String privateCloudName) {
        return deleteDnsZoneWithServiceResponseAsync(resourceGroupName, dnsZoneId, privateCloudName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a DNS zone by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsZoneId NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteDnsZoneWithServiceResponseAsync(String resourceGroupName, String dnsZoneId, String privateCloudName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dnsZoneId == null) {
            throw new IllegalArgumentException("Parameter dnsZoneId is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.deleteDnsZone(this.client.subscriptionId(), resourceGroupName, dnsZoneId, privateCloudName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Delete a DNS zone by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsZoneId NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDeleteDnsZone(String resourceGroupName, String dnsZoneId, String privateCloudName) {
        beginDeleteDnsZoneWithServiceResponseAsync(resourceGroupName, dnsZoneId, privateCloudName).toBlocking().single().body();
    }

    /**
     * Delete a DNS zone by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsZoneId NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteDnsZoneAsync(String resourceGroupName, String dnsZoneId, String privateCloudName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteDnsZoneWithServiceResponseAsync(resourceGroupName, dnsZoneId, privateCloudName), serviceCallback);
    }

    /**
     * Delete a DNS zone by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsZoneId NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteDnsZoneAsync(String resourceGroupName, String dnsZoneId, String privateCloudName) {
        return beginDeleteDnsZoneWithServiceResponseAsync(resourceGroupName, dnsZoneId, privateCloudName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a DNS zone by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dnsZoneId NSX DNS Zone identifier. Generally the same as the DNS Zone's display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteDnsZoneWithServiceResponseAsync(String resourceGroupName, String dnsZoneId, String privateCloudName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dnsZoneId == null) {
            throw new IllegalArgumentException("Parameter dnsZoneId is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDeleteDnsZone(this.client.subscriptionId(), resourceGroupName, dnsZoneId, privateCloudName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDnsZoneDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDnsZoneDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List of segments in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkSegmentInner&gt; object if successful.
     */
    public PagedList<WorkloadNetworkSegmentInner> listSegmentsNext(final String nextPageLink) {
        ServiceResponse<Page<WorkloadNetworkSegmentInner>> response = listSegmentsNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<WorkloadNetworkSegmentInner>(response.body()) {
            @Override
            public Page<WorkloadNetworkSegmentInner> nextPage(String nextPageLink) {
                return listSegmentsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List of segments in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<WorkloadNetworkSegmentInner>> listSegmentsNextAsync(final String nextPageLink, final ServiceFuture<List<WorkloadNetworkSegmentInner>> serviceFuture, final ListOperationCallback<WorkloadNetworkSegmentInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSegmentsNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<WorkloadNetworkSegmentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkSegmentInner>>> call(String nextPageLink) {
                    return listSegmentsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List of segments in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkSegmentInner&gt; object
     */
    public Observable<Page<WorkloadNetworkSegmentInner>> listSegmentsNextAsync(final String nextPageLink) {
        return listSegmentsNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<WorkloadNetworkSegmentInner>>, Page<WorkloadNetworkSegmentInner>>() {
                @Override
                public Page<WorkloadNetworkSegmentInner> call(ServiceResponse<Page<WorkloadNetworkSegmentInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List of segments in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkSegmentInner&gt; object
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkSegmentInner>>> listSegmentsNextWithServiceResponseAsync(final String nextPageLink) {
        return listSegmentsNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<WorkloadNetworkSegmentInner>>, Observable<ServiceResponse<Page<WorkloadNetworkSegmentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkSegmentInner>>> call(ServiceResponse<Page<WorkloadNetworkSegmentInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listSegmentsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List of segments in a private cloud workload network.
     *
    ServiceResponse<PageImpl<WorkloadNetworkSegmentInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;WorkloadNetworkSegmentInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkSegmentInner>>> listSegmentsNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listSegmentsNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<WorkloadNetworkSegmentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkSegmentInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<WorkloadNetworkSegmentInner>> result = listSegmentsNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<WorkloadNetworkSegmentInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<WorkloadNetworkSegmentInner>> listSegmentsNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<WorkloadNetworkSegmentInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<WorkloadNetworkSegmentInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List dhcp in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkDhcpInner&gt; object if successful.
     */
    public PagedList<WorkloadNetworkDhcpInner> listDhcpNext(final String nextPageLink) {
        ServiceResponse<Page<WorkloadNetworkDhcpInner>> response = listDhcpNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<WorkloadNetworkDhcpInner>(response.body()) {
            @Override
            public Page<WorkloadNetworkDhcpInner> nextPage(String nextPageLink) {
                return listDhcpNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List dhcp in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<WorkloadNetworkDhcpInner>> listDhcpNextAsync(final String nextPageLink, final ServiceFuture<List<WorkloadNetworkDhcpInner>> serviceFuture, final ListOperationCallback<WorkloadNetworkDhcpInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listDhcpNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<WorkloadNetworkDhcpInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkDhcpInner>>> call(String nextPageLink) {
                    return listDhcpNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List dhcp in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkDhcpInner&gt; object
     */
    public Observable<Page<WorkloadNetworkDhcpInner>> listDhcpNextAsync(final String nextPageLink) {
        return listDhcpNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<WorkloadNetworkDhcpInner>>, Page<WorkloadNetworkDhcpInner>>() {
                @Override
                public Page<WorkloadNetworkDhcpInner> call(ServiceResponse<Page<WorkloadNetworkDhcpInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List dhcp in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkDhcpInner&gt; object
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkDhcpInner>>> listDhcpNextWithServiceResponseAsync(final String nextPageLink) {
        return listDhcpNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<WorkloadNetworkDhcpInner>>, Observable<ServiceResponse<Page<WorkloadNetworkDhcpInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkDhcpInner>>> call(ServiceResponse<Page<WorkloadNetworkDhcpInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listDhcpNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List dhcp in a private cloud workload network.
     *
    ServiceResponse<PageImpl<WorkloadNetworkDhcpInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;WorkloadNetworkDhcpInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkDhcpInner>>> listDhcpNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listDhcpNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<WorkloadNetworkDhcpInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkDhcpInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<WorkloadNetworkDhcpInner>> result = listDhcpNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<WorkloadNetworkDhcpInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<WorkloadNetworkDhcpInner>> listDhcpNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<WorkloadNetworkDhcpInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<WorkloadNetworkDhcpInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List of gateways in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkGatewayInner&gt; object if successful.
     */
    public PagedList<WorkloadNetworkGatewayInner> listGatewaysNext(final String nextPageLink) {
        ServiceResponse<Page<WorkloadNetworkGatewayInner>> response = listGatewaysNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<WorkloadNetworkGatewayInner>(response.body()) {
            @Override
            public Page<WorkloadNetworkGatewayInner> nextPage(String nextPageLink) {
                return listGatewaysNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List of gateways in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<WorkloadNetworkGatewayInner>> listGatewaysNextAsync(final String nextPageLink, final ServiceFuture<List<WorkloadNetworkGatewayInner>> serviceFuture, final ListOperationCallback<WorkloadNetworkGatewayInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listGatewaysNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<WorkloadNetworkGatewayInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkGatewayInner>>> call(String nextPageLink) {
                    return listGatewaysNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List of gateways in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkGatewayInner&gt; object
     */
    public Observable<Page<WorkloadNetworkGatewayInner>> listGatewaysNextAsync(final String nextPageLink) {
        return listGatewaysNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<WorkloadNetworkGatewayInner>>, Page<WorkloadNetworkGatewayInner>>() {
                @Override
                public Page<WorkloadNetworkGatewayInner> call(ServiceResponse<Page<WorkloadNetworkGatewayInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List of gateways in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkGatewayInner&gt; object
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkGatewayInner>>> listGatewaysNextWithServiceResponseAsync(final String nextPageLink) {
        return listGatewaysNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<WorkloadNetworkGatewayInner>>, Observable<ServiceResponse<Page<WorkloadNetworkGatewayInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkGatewayInner>>> call(ServiceResponse<Page<WorkloadNetworkGatewayInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listGatewaysNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List of gateways in a private cloud workload network.
     *
    ServiceResponse<PageImpl<WorkloadNetworkGatewayInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;WorkloadNetworkGatewayInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkGatewayInner>>> listGatewaysNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listGatewaysNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<WorkloadNetworkGatewayInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkGatewayInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<WorkloadNetworkGatewayInner>> result = listGatewaysNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<WorkloadNetworkGatewayInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<WorkloadNetworkGatewayInner>> listGatewaysNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<WorkloadNetworkGatewayInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<WorkloadNetworkGatewayInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List of port mirroring profiles in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkPortMirroringInner&gt; object if successful.
     */
    public PagedList<WorkloadNetworkPortMirroringInner> listPortMirroringNext(final String nextPageLink) {
        ServiceResponse<Page<WorkloadNetworkPortMirroringInner>> response = listPortMirroringNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<WorkloadNetworkPortMirroringInner>(response.body()) {
            @Override
            public Page<WorkloadNetworkPortMirroringInner> nextPage(String nextPageLink) {
                return listPortMirroringNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List of port mirroring profiles in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<WorkloadNetworkPortMirroringInner>> listPortMirroringNextAsync(final String nextPageLink, final ServiceFuture<List<WorkloadNetworkPortMirroringInner>> serviceFuture, final ListOperationCallback<WorkloadNetworkPortMirroringInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listPortMirroringNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<WorkloadNetworkPortMirroringInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkPortMirroringInner>>> call(String nextPageLink) {
                    return listPortMirroringNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List of port mirroring profiles in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkPortMirroringInner&gt; object
     */
    public Observable<Page<WorkloadNetworkPortMirroringInner>> listPortMirroringNextAsync(final String nextPageLink) {
        return listPortMirroringNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<WorkloadNetworkPortMirroringInner>>, Page<WorkloadNetworkPortMirroringInner>>() {
                @Override
                public Page<WorkloadNetworkPortMirroringInner> call(ServiceResponse<Page<WorkloadNetworkPortMirroringInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List of port mirroring profiles in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkPortMirroringInner&gt; object
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkPortMirroringInner>>> listPortMirroringNextWithServiceResponseAsync(final String nextPageLink) {
        return listPortMirroringNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<WorkloadNetworkPortMirroringInner>>, Observable<ServiceResponse<Page<WorkloadNetworkPortMirroringInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkPortMirroringInner>>> call(ServiceResponse<Page<WorkloadNetworkPortMirroringInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listPortMirroringNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List of port mirroring profiles in a private cloud workload network.
     *
    ServiceResponse<PageImpl<WorkloadNetworkPortMirroringInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;WorkloadNetworkPortMirroringInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkPortMirroringInner>>> listPortMirroringNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listPortMirroringNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<WorkloadNetworkPortMirroringInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkPortMirroringInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<WorkloadNetworkPortMirroringInner>> result = listPortMirroringNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<WorkloadNetworkPortMirroringInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<WorkloadNetworkPortMirroringInner>> listPortMirroringNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<WorkloadNetworkPortMirroringInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<WorkloadNetworkPortMirroringInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List of vm groups in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkVMGroupInner&gt; object if successful.
     */
    public PagedList<WorkloadNetworkVMGroupInner> listVMGroupsNext(final String nextPageLink) {
        ServiceResponse<Page<WorkloadNetworkVMGroupInner>> response = listVMGroupsNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<WorkloadNetworkVMGroupInner>(response.body()) {
            @Override
            public Page<WorkloadNetworkVMGroupInner> nextPage(String nextPageLink) {
                return listVMGroupsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List of vm groups in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<WorkloadNetworkVMGroupInner>> listVMGroupsNextAsync(final String nextPageLink, final ServiceFuture<List<WorkloadNetworkVMGroupInner>> serviceFuture, final ListOperationCallback<WorkloadNetworkVMGroupInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listVMGroupsNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<WorkloadNetworkVMGroupInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkVMGroupInner>>> call(String nextPageLink) {
                    return listVMGroupsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List of vm groups in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkVMGroupInner&gt; object
     */
    public Observable<Page<WorkloadNetworkVMGroupInner>> listVMGroupsNextAsync(final String nextPageLink) {
        return listVMGroupsNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<WorkloadNetworkVMGroupInner>>, Page<WorkloadNetworkVMGroupInner>>() {
                @Override
                public Page<WorkloadNetworkVMGroupInner> call(ServiceResponse<Page<WorkloadNetworkVMGroupInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List of vm groups in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkVMGroupInner&gt; object
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkVMGroupInner>>> listVMGroupsNextWithServiceResponseAsync(final String nextPageLink) {
        return listVMGroupsNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<WorkloadNetworkVMGroupInner>>, Observable<ServiceResponse<Page<WorkloadNetworkVMGroupInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkVMGroupInner>>> call(ServiceResponse<Page<WorkloadNetworkVMGroupInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listVMGroupsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List of vm groups in a private cloud workload network.
     *
    ServiceResponse<PageImpl<WorkloadNetworkVMGroupInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;WorkloadNetworkVMGroupInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkVMGroupInner>>> listVMGroupsNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listVMGroupsNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<WorkloadNetworkVMGroupInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkVMGroupInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<WorkloadNetworkVMGroupInner>> result = listVMGroupsNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<WorkloadNetworkVMGroupInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<WorkloadNetworkVMGroupInner>> listVMGroupsNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<WorkloadNetworkVMGroupInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<WorkloadNetworkVMGroupInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List of virtual machines in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkVirtualMachineInner&gt; object if successful.
     */
    public PagedList<WorkloadNetworkVirtualMachineInner> listVirtualMachinesNext(final String nextPageLink) {
        ServiceResponse<Page<WorkloadNetworkVirtualMachineInner>> response = listVirtualMachinesNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<WorkloadNetworkVirtualMachineInner>(response.body()) {
            @Override
            public Page<WorkloadNetworkVirtualMachineInner> nextPage(String nextPageLink) {
                return listVirtualMachinesNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List of virtual machines in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<WorkloadNetworkVirtualMachineInner>> listVirtualMachinesNextAsync(final String nextPageLink, final ServiceFuture<List<WorkloadNetworkVirtualMachineInner>> serviceFuture, final ListOperationCallback<WorkloadNetworkVirtualMachineInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listVirtualMachinesNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<WorkloadNetworkVirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkVirtualMachineInner>>> call(String nextPageLink) {
                    return listVirtualMachinesNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List of virtual machines in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkVirtualMachineInner&gt; object
     */
    public Observable<Page<WorkloadNetworkVirtualMachineInner>> listVirtualMachinesNextAsync(final String nextPageLink) {
        return listVirtualMachinesNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<WorkloadNetworkVirtualMachineInner>>, Page<WorkloadNetworkVirtualMachineInner>>() {
                @Override
                public Page<WorkloadNetworkVirtualMachineInner> call(ServiceResponse<Page<WorkloadNetworkVirtualMachineInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List of virtual machines in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkVirtualMachineInner&gt; object
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkVirtualMachineInner>>> listVirtualMachinesNextWithServiceResponseAsync(final String nextPageLink) {
        return listVirtualMachinesNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<WorkloadNetworkVirtualMachineInner>>, Observable<ServiceResponse<Page<WorkloadNetworkVirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkVirtualMachineInner>>> call(ServiceResponse<Page<WorkloadNetworkVirtualMachineInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listVirtualMachinesNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List of virtual machines in a private cloud workload network.
     *
    ServiceResponse<PageImpl<WorkloadNetworkVirtualMachineInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;WorkloadNetworkVirtualMachineInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkVirtualMachineInner>>> listVirtualMachinesNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listVirtualMachinesNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<WorkloadNetworkVirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkVirtualMachineInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<WorkloadNetworkVirtualMachineInner>> result = listVirtualMachinesNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<WorkloadNetworkVirtualMachineInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<WorkloadNetworkVirtualMachineInner>> listVirtualMachinesNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<WorkloadNetworkVirtualMachineInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<WorkloadNetworkVirtualMachineInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List of DNS services in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkDnsServiceInner&gt; object if successful.
     */
    public PagedList<WorkloadNetworkDnsServiceInner> listDnsServicesNext(final String nextPageLink) {
        ServiceResponse<Page<WorkloadNetworkDnsServiceInner>> response = listDnsServicesNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<WorkloadNetworkDnsServiceInner>(response.body()) {
            @Override
            public Page<WorkloadNetworkDnsServiceInner> nextPage(String nextPageLink) {
                return listDnsServicesNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List of DNS services in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<WorkloadNetworkDnsServiceInner>> listDnsServicesNextAsync(final String nextPageLink, final ServiceFuture<List<WorkloadNetworkDnsServiceInner>> serviceFuture, final ListOperationCallback<WorkloadNetworkDnsServiceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listDnsServicesNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<WorkloadNetworkDnsServiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkDnsServiceInner>>> call(String nextPageLink) {
                    return listDnsServicesNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List of DNS services in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkDnsServiceInner&gt; object
     */
    public Observable<Page<WorkloadNetworkDnsServiceInner>> listDnsServicesNextAsync(final String nextPageLink) {
        return listDnsServicesNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<WorkloadNetworkDnsServiceInner>>, Page<WorkloadNetworkDnsServiceInner>>() {
                @Override
                public Page<WorkloadNetworkDnsServiceInner> call(ServiceResponse<Page<WorkloadNetworkDnsServiceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List of DNS services in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkDnsServiceInner&gt; object
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkDnsServiceInner>>> listDnsServicesNextWithServiceResponseAsync(final String nextPageLink) {
        return listDnsServicesNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<WorkloadNetworkDnsServiceInner>>, Observable<ServiceResponse<Page<WorkloadNetworkDnsServiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkDnsServiceInner>>> call(ServiceResponse<Page<WorkloadNetworkDnsServiceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listDnsServicesNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List of DNS services in a private cloud workload network.
     *
    ServiceResponse<PageImpl<WorkloadNetworkDnsServiceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;WorkloadNetworkDnsServiceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkDnsServiceInner>>> listDnsServicesNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listDnsServicesNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<WorkloadNetworkDnsServiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkDnsServiceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<WorkloadNetworkDnsServiceInner>> result = listDnsServicesNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<WorkloadNetworkDnsServiceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<WorkloadNetworkDnsServiceInner>> listDnsServicesNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<WorkloadNetworkDnsServiceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<WorkloadNetworkDnsServiceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List of DNS zones in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkDnsZoneInner&gt; object if successful.
     */
    public PagedList<WorkloadNetworkDnsZoneInner> listDnsZonesNext(final String nextPageLink) {
        ServiceResponse<Page<WorkloadNetworkDnsZoneInner>> response = listDnsZonesNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<WorkloadNetworkDnsZoneInner>(response.body()) {
            @Override
            public Page<WorkloadNetworkDnsZoneInner> nextPage(String nextPageLink) {
                return listDnsZonesNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List of DNS zones in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<WorkloadNetworkDnsZoneInner>> listDnsZonesNextAsync(final String nextPageLink, final ServiceFuture<List<WorkloadNetworkDnsZoneInner>> serviceFuture, final ListOperationCallback<WorkloadNetworkDnsZoneInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listDnsZonesNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<WorkloadNetworkDnsZoneInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkDnsZoneInner>>> call(String nextPageLink) {
                    return listDnsZonesNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List of DNS zones in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkDnsZoneInner&gt; object
     */
    public Observable<Page<WorkloadNetworkDnsZoneInner>> listDnsZonesNextAsync(final String nextPageLink) {
        return listDnsZonesNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<WorkloadNetworkDnsZoneInner>>, Page<WorkloadNetworkDnsZoneInner>>() {
                @Override
                public Page<WorkloadNetworkDnsZoneInner> call(ServiceResponse<Page<WorkloadNetworkDnsZoneInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List of DNS zones in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkDnsZoneInner&gt; object
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkDnsZoneInner>>> listDnsZonesNextWithServiceResponseAsync(final String nextPageLink) {
        return listDnsZonesNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<WorkloadNetworkDnsZoneInner>>, Observable<ServiceResponse<Page<WorkloadNetworkDnsZoneInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkDnsZoneInner>>> call(ServiceResponse<Page<WorkloadNetworkDnsZoneInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listDnsZonesNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List of DNS zones in a private cloud workload network.
     *
    ServiceResponse<PageImpl<WorkloadNetworkDnsZoneInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;WorkloadNetworkDnsZoneInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkDnsZoneInner>>> listDnsZonesNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listDnsZonesNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<WorkloadNetworkDnsZoneInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkDnsZoneInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<WorkloadNetworkDnsZoneInner>> result = listDnsZonesNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<WorkloadNetworkDnsZoneInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<WorkloadNetworkDnsZoneInner>> listDnsZonesNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<WorkloadNetworkDnsZoneInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<WorkloadNetworkDnsZoneInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
