/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.postgresql.v2020_10_05_privatepreview;

import rx.Completable;
import rx.Observable;
import com.microsoft.azure.management.postgresql.v2020_10_05_privatepreview.implementation.ServerGroupInner;
import com.microsoft.azure.management.postgresql.v2020_10_05_privatepreview.implementation.ServerGroupsInner;
import com.microsoft.azure.arm.model.HasInner;

/**
 * Type representing ServerGroups.
 */
public interface ServerGroups extends HasInner<ServerGroupsInner> {
    /**
     * Creates a new server group with servers.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverGroupName The name of the server group.
     * @param parameters The required parameters for creating or updating a server group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ServerGroup> createOrUpdateAsync(String resourceGroupName, String serverGroupName, ServerGroupInner parameters);

    /**
     * Gets information about a server group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverGroupName The name of the server group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ServerGroup> getByResourceGroupAsync(String resourceGroupName, String serverGroupName);

    /**
     * Deletes a server group together with servers in it.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverGroupName The name of the server group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteAsync(String resourceGroupName, String serverGroupName);

    /**
     * Updates an existing server group. The request body can contain one to many of the properties present in the normal server group definition.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverGroupName The name of the server group.
     * @param parameters The parameters for updating a server group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ServerGroup> updateAsync(String resourceGroupName, String serverGroupName, ServerGroupForPatch parameters);

    /**
     * Restarts the server group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverGroupName The name of the server group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable restartAsync(String resourceGroupName, String serverGroupName);

    /**
     * Starts the server group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverGroupName The name of the server group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable startAsync(String resourceGroupName, String serverGroupName);

    /**
     * Stops the server group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverGroupName The name of the server group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable stopAsync(String resourceGroupName, String serverGroupName);

    /**
     * List all the server groups in a given subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ServerGroup> listAsync();

    /**
     * List all the server groups in a given resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ServerGroup> listByResourceGroupAsync(final String resourceGroupName);

}
