/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.postgresql.v2020_10_05_privatepreview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.postgresql.v2020_10_05_privatepreview.ServerGroups;
import rx.Completable;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.postgresql.v2020_10_05_privatepreview.ServerGroup;
import com.microsoft.azure.management.postgresql.v2020_10_05_privatepreview.ServerGroupForPatch;

class ServerGroupsImpl extends WrapperImpl<ServerGroupsInner> implements ServerGroups {
    private final DBForPostgreSqlManager manager;

    ServerGroupsImpl(DBForPostgreSqlManager manager) {
        super(manager.inner().serverGroups());
        this.manager = manager;
    }

    public DBForPostgreSqlManager manager() {
        return this.manager;
    }

    @Override
    public Observable<ServerGroup> createOrUpdateAsync(String resourceGroupName, String serverGroupName, ServerGroupInner parameters) {
        ServerGroupsInner client = this.inner();
        return client.createOrUpdateAsync(resourceGroupName, serverGroupName, parameters)
        .map(new Func1<ServerGroupInner, ServerGroup>() {
            @Override
            public ServerGroup call(ServerGroupInner inner) {
                return new ServerGroupImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ServerGroup> getByResourceGroupAsync(String resourceGroupName, String serverGroupName) {
        ServerGroupsInner client = this.inner();
        return client.getByResourceGroupAsync(resourceGroupName, serverGroupName)
        .map(new Func1<ServerGroupInner, ServerGroup>() {
            @Override
            public ServerGroup call(ServerGroupInner inner) {
                return new ServerGroupImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String serverGroupName) {
        ServerGroupsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, serverGroupName).toCompletable();
    }

    @Override
    public Observable<ServerGroup> updateAsync(String resourceGroupName, String serverGroupName, ServerGroupForPatch parameters) {
        ServerGroupsInner client = this.inner();
        return client.updateAsync(resourceGroupName, serverGroupName, parameters)
        .map(new Func1<ServerGroupInner, ServerGroup>() {
            @Override
            public ServerGroup call(ServerGroupInner inner) {
                return new ServerGroupImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable restartAsync(String resourceGroupName, String serverGroupName) {
        ServerGroupsInner client = this.inner();
        return client.restartAsync(resourceGroupName, serverGroupName).toCompletable();
    }

    @Override
    public Completable startAsync(String resourceGroupName, String serverGroupName) {
        ServerGroupsInner client = this.inner();
        return client.startAsync(resourceGroupName, serverGroupName).toCompletable();
    }

    @Override
    public Completable stopAsync(String resourceGroupName, String serverGroupName) {
        ServerGroupsInner client = this.inner();
        return client.stopAsync(resourceGroupName, serverGroupName).toCompletable();
    }

    @Override
    public Observable<ServerGroup> listAsync() {
        ServerGroupsInner client = this.inner();
        return client.listAsync()
        .flatMapIterable(new Func1<Page<ServerGroupInner>, Iterable<ServerGroupInner>>() {
            @Override
            public Iterable<ServerGroupInner> call(Page<ServerGroupInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ServerGroupInner, ServerGroup>() {
            @Override
            public ServerGroup call(ServerGroupInner inner) {
                return new ServerGroupImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ServerGroup> listByResourceGroupAsync(final String resourceGroupName) {
        ServerGroupsInner client = this.inner();
        return client.listByResourceGroupAsync(resourceGroupName)
        .flatMapIterable(new Func1<Page<ServerGroupInner>, Iterable<ServerGroupInner>>() {
            @Override
            public Iterable<ServerGroupInner> call(Page<ServerGroupInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ServerGroupInner, ServerGroup>() {
            @Override
            public ServerGroup call(ServerGroupInner inner) {
                return new ServerGroupImpl(inner, manager());
            }
        });
    }

}
