/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.postgresql.v2020_10_05_privatepreview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.postgresql.v2020_10_05_privatepreview.Configurations;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.postgresql.v2020_10_05_privatepreview.ServerGroupConfiguration;
import com.microsoft.azure.management.postgresql.v2020_10_05_privatepreview.ServerConfiguration;

class ConfigurationsImpl extends WrapperImpl<ConfigurationsInner> implements Configurations {
    private final DBForPostgreSqlManager manager;

    ConfigurationsImpl(DBForPostgreSqlManager manager) {
        super(manager.inner().configurations());
        this.manager = manager;
    }

    public DBForPostgreSqlManager manager() {
        return this.manager;
    }

    private ServerConfigurationImpl wrapModel(ServerConfigurationInner inner) {
        return  new ServerConfigurationImpl(inner, manager());
    }

    @Override
    public Observable<ServerGroupConfiguration> listByServerGroupAsync(final String resourceGroupName, final String serverGroupName) {
        ConfigurationsInner client = this.inner();
        return client.listByServerGroupAsync(resourceGroupName, serverGroupName)
        .flatMapIterable(new Func1<Page<ServerGroupConfigurationInner>, Iterable<ServerGroupConfigurationInner>>() {
            @Override
            public Iterable<ServerGroupConfigurationInner> call(Page<ServerGroupConfigurationInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ServerGroupConfigurationInner, ServerGroupConfiguration>() {
            @Override
            public ServerGroupConfiguration call(ServerGroupConfigurationInner inner) {
                return new ServerGroupConfigurationImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ServerGroupConfiguration> getAsync(String resourceGroupName, String serverGroupName, String configurationName) {
        ConfigurationsInner client = this.inner();
        return client.getAsync(resourceGroupName, serverGroupName, configurationName)
        .map(new Func1<ServerGroupConfigurationInner, ServerGroupConfiguration>() {
            @Override
            public ServerGroupConfiguration call(ServerGroupConfigurationInner inner) {
                return new ServerGroupConfigurationImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ServerConfiguration> listByServerAsync(final String resourceGroupName, final String serverGroupName, final String serverName) {
        ConfigurationsInner client = this.inner();
        return client.listByServerAsync(resourceGroupName, serverGroupName, serverName)
        .flatMapIterable(new Func1<Page<ServerConfigurationInner>, Iterable<ServerConfigurationInner>>() {
            @Override
            public Iterable<ServerConfigurationInner> call(Page<ServerConfigurationInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ServerConfigurationInner, ServerConfiguration>() {
            @Override
            public ServerConfiguration call(ServerConfigurationInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
