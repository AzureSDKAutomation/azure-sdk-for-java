/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.postgresql.v2020_10_05_privatepreview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.postgresql.v2020_10_05_privatepreview.Servers;
import rx.functions.Func1;
import rx.Observable;
import java.util.List;
import com.microsoft.azure.management.postgresql.v2020_10_05_privatepreview.ServerGroupServer;

class ServersImpl extends WrapperImpl<ServersInner> implements Servers {
    private final DBForPostgreSqlManager manager;

    ServersImpl(DBForPostgreSqlManager manager) {
        super(manager.inner().servers());
        this.manager = manager;
    }

    public DBForPostgreSqlManager manager() {
        return this.manager;
    }

    @Override
    public Observable<ServerGroupServer> listByServerGroupAsync(String resourceGroupName, String serverGroupName) {
        ServersInner client = this.inner();
        return client.listByServerGroupAsync(resourceGroupName, serverGroupName)
        .flatMap(new Func1<List<ServerGroupServerInner>, Observable<ServerGroupServerInner>>() {
            @Override
            public Observable<ServerGroupServerInner> call(List<ServerGroupServerInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<ServerGroupServerInner, ServerGroupServer>() {
            @Override
            public ServerGroupServer call(ServerGroupServerInner inner) {
                return new ServerGroupServerImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ServerGroupServer> getAsync(String resourceGroupName, String serverGroupName, String serverName) {
        ServersInner client = this.inner();
        return client.getAsync(resourceGroupName, serverGroupName, serverName)
        .map(new Func1<ServerGroupServerInner, ServerGroupServer>() {
            @Override
            public ServerGroupServer call(ServerGroupServerInner inner) {
                return new ServerGroupServerImpl(inner, manager());
            }
        });
    }

}
