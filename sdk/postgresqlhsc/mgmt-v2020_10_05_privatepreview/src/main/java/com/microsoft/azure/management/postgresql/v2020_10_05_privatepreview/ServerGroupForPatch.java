/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.postgresql.v2020_10_05_privatepreview;

import org.joda.time.DateTime;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;

/**
 * Represents a server group for update.
 */
@JsonFlatten
public class ServerGroupForPatch {
    /**
     * The location the resource resides in.
     */
    @JsonProperty(value = "location")
    private String location;

    /**
     * The administrator's login name of servers in server group. Can only be
     * specified when the server is being created (and is required for
     * creation).
     */
    @JsonProperty(value = "properties.administratorLogin")
    private String administratorLogin;

    /**
     * The backup retention days for server group.
     */
    @JsonProperty(value = "properties.backupRetentionDays")
    private Integer backupRetentionDays;

    /**
     * The version of servers. Possible values include: '11', '12'.
     */
    @JsonProperty(value = "properties.version")
    private ServerVersion version;

    /**
     * The citus version of servers. Possible values include: '8.3', '9.0',
     * '9.1', '9.2', '9.3', '9.4', '9.5'.
     */
    @JsonProperty(value = "properties.citusVersion")
    private ServerCitusVersion citusVersion;

    /**
     * If zfs is enabled or not for the server group.
     */
    @JsonProperty(value = "properties.isMx")
    private Boolean isMx;

    /**
     * If zfs is enabled or not for the server group.
     */
    @JsonProperty(value = "properties.isZfs")
    private Boolean isZfs;

    /**
     * A state of a server group that is visible to user. Possible values
     * include: 'Ready', 'Dropping', 'Disabled', 'Starting', 'Stopping',
     * 'Stopped', 'Updating', 'Provisioning'.
     */
    @JsonProperty(value = "properties.state")
    private ServerState state;

    /**
     * The earliest restore point time (ISO8601 format) for server group.
     */
    @JsonProperty(value = "properties.earliestRestoreTime", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime earliestRestoreTime;

    /**
     * The resource provider type of server group. Possible values include:
     * 'Meru', 'Marlin'.
     */
    @JsonProperty(value = "properties.resourceProviderType")
    private ResourceProviderType resourceProviderType;

    /**
     * The vnet injection arguments for server group.
     */
    @JsonProperty(value = "properties.vnetInjArgs")
    private VnetInjArgs vnetInjArgs;

    /**
     * The list of server role groups.
     */
    @JsonProperty(value = "properties.serverRoleGroups")
    private List<ServerRoleGroup> serverRoleGroups;

    /**
     * The password of the administrator login.
     */
    @JsonProperty(value = "properties.administratorLoginPassword")
    private String administratorLoginPassword;

    /**
     * Application-specific metadata in the form of key-value pairs.
     */
    @JsonProperty(value = "tags")
    private Map<String, String> tags;

    /**
     * Get the location the resource resides in.
     *
     * @return the location value
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location the resource resides in.
     *
     * @param location the location value to set
     * @return the ServerGroupForPatch object itself.
     */
    public ServerGroupForPatch withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the administrator's login name of servers in server group. Can only be specified when the server is being created (and is required for creation).
     *
     * @return the administratorLogin value
     */
    public String administratorLogin() {
        return this.administratorLogin;
    }

    /**
     * Set the administrator's login name of servers in server group. Can only be specified when the server is being created (and is required for creation).
     *
     * @param administratorLogin the administratorLogin value to set
     * @return the ServerGroupForPatch object itself.
     */
    public ServerGroupForPatch withAdministratorLogin(String administratorLogin) {
        this.administratorLogin = administratorLogin;
        return this;
    }

    /**
     * Get the backup retention days for server group.
     *
     * @return the backupRetentionDays value
     */
    public Integer backupRetentionDays() {
        return this.backupRetentionDays;
    }

    /**
     * Set the backup retention days for server group.
     *
     * @param backupRetentionDays the backupRetentionDays value to set
     * @return the ServerGroupForPatch object itself.
     */
    public ServerGroupForPatch withBackupRetentionDays(Integer backupRetentionDays) {
        this.backupRetentionDays = backupRetentionDays;
        return this;
    }

    /**
     * Get the version of servers. Possible values include: '11', '12'.
     *
     * @return the version value
     */
    public ServerVersion version() {
        return this.version;
    }

    /**
     * Set the version of servers. Possible values include: '11', '12'.
     *
     * @param version the version value to set
     * @return the ServerGroupForPatch object itself.
     */
    public ServerGroupForPatch withVersion(ServerVersion version) {
        this.version = version;
        return this;
    }

    /**
     * Get the citus version of servers. Possible values include: '8.3', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5'.
     *
     * @return the citusVersion value
     */
    public ServerCitusVersion citusVersion() {
        return this.citusVersion;
    }

    /**
     * Set the citus version of servers. Possible values include: '8.3', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5'.
     *
     * @param citusVersion the citusVersion value to set
     * @return the ServerGroupForPatch object itself.
     */
    public ServerGroupForPatch withCitusVersion(ServerCitusVersion citusVersion) {
        this.citusVersion = citusVersion;
        return this;
    }

    /**
     * Get if zfs is enabled or not for the server group.
     *
     * @return the isMx value
     */
    public Boolean isMx() {
        return this.isMx;
    }

    /**
     * Set if zfs is enabled or not for the server group.
     *
     * @param isMx the isMx value to set
     * @return the ServerGroupForPatch object itself.
     */
    public ServerGroupForPatch withIsMx(Boolean isMx) {
        this.isMx = isMx;
        return this;
    }

    /**
     * Get if zfs is enabled or not for the server group.
     *
     * @return the isZfs value
     */
    public Boolean isZfs() {
        return this.isZfs;
    }

    /**
     * Set if zfs is enabled or not for the server group.
     *
     * @param isZfs the isZfs value to set
     * @return the ServerGroupForPatch object itself.
     */
    public ServerGroupForPatch withIsZfs(Boolean isZfs) {
        this.isZfs = isZfs;
        return this;
    }

    /**
     * Get a state of a server group that is visible to user. Possible values include: 'Ready', 'Dropping', 'Disabled', 'Starting', 'Stopping', 'Stopped', 'Updating', 'Provisioning'.
     *
     * @return the state value
     */
    public ServerState state() {
        return this.state;
    }

    /**
     * Set a state of a server group that is visible to user. Possible values include: 'Ready', 'Dropping', 'Disabled', 'Starting', 'Stopping', 'Stopped', 'Updating', 'Provisioning'.
     *
     * @param state the state value to set
     * @return the ServerGroupForPatch object itself.
     */
    public ServerGroupForPatch withState(ServerState state) {
        this.state = state;
        return this;
    }

    /**
     * Get the earliest restore point time (ISO8601 format) for server group.
     *
     * @return the earliestRestoreTime value
     */
    public DateTime earliestRestoreTime() {
        return this.earliestRestoreTime;
    }

    /**
     * Get the resource provider type of server group. Possible values include: 'Meru', 'Marlin'.
     *
     * @return the resourceProviderType value
     */
    public ResourceProviderType resourceProviderType() {
        return this.resourceProviderType;
    }

    /**
     * Set the resource provider type of server group. Possible values include: 'Meru', 'Marlin'.
     *
     * @param resourceProviderType the resourceProviderType value to set
     * @return the ServerGroupForPatch object itself.
     */
    public ServerGroupForPatch withResourceProviderType(ResourceProviderType resourceProviderType) {
        this.resourceProviderType = resourceProviderType;
        return this;
    }

    /**
     * Get the vnet injection arguments for server group.
     *
     * @return the vnetInjArgs value
     */
    public VnetInjArgs vnetInjArgs() {
        return this.vnetInjArgs;
    }

    /**
     * Set the vnet injection arguments for server group.
     *
     * @param vnetInjArgs the vnetInjArgs value to set
     * @return the ServerGroupForPatch object itself.
     */
    public ServerGroupForPatch withVnetInjArgs(VnetInjArgs vnetInjArgs) {
        this.vnetInjArgs = vnetInjArgs;
        return this;
    }

    /**
     * Get the list of server role groups.
     *
     * @return the serverRoleGroups value
     */
    public List<ServerRoleGroup> serverRoleGroups() {
        return this.serverRoleGroups;
    }

    /**
     * Set the list of server role groups.
     *
     * @param serverRoleGroups the serverRoleGroups value to set
     * @return the ServerGroupForPatch object itself.
     */
    public ServerGroupForPatch withServerRoleGroups(List<ServerRoleGroup> serverRoleGroups) {
        this.serverRoleGroups = serverRoleGroups;
        return this;
    }

    /**
     * Get the password of the administrator login.
     *
     * @return the administratorLoginPassword value
     */
    public String administratorLoginPassword() {
        return this.administratorLoginPassword;
    }

    /**
     * Set the password of the administrator login.
     *
     * @param administratorLoginPassword the administratorLoginPassword value to set
     * @return the ServerGroupForPatch object itself.
     */
    public ServerGroupForPatch withAdministratorLoginPassword(String administratorLoginPassword) {
        this.administratorLoginPassword = administratorLoginPassword;
        return this;
    }

    /**
     * Get application-specific metadata in the form of key-value pairs.
     *
     * @return the tags value
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set application-specific metadata in the form of key-value pairs.
     *
     * @param tags the tags value to set
     * @return the ServerGroupForPatch object itself.
     */
    public ServerGroupForPatch withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

}
