/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.postgresql.v2020_10_05_privatepreview.implementation;

import com.microsoft.azure.management.postgresql.v2020_10_05_privatepreview.ServerEdition;
import com.microsoft.azure.management.postgresql.v2020_10_05_privatepreview.ServerRole;
import com.microsoft.azure.management.postgresql.v2020_10_05_privatepreview.ServerState;
import com.microsoft.azure.management.postgresql.v2020_10_05_privatepreview.ServerHaState;
import com.microsoft.azure.management.postgresql.v2020_10_05_privatepreview.ServerVersion;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.ProxyResource;

/**
 * Represents a server in a server group.
 */
@JsonFlatten
public class ServerGroupServerInner extends ProxyResource {
    /**
     * The edition of a server (default: GeneralPurpose). Possible values
     * include: 'GeneralPurpose', 'MemoryOptimized'.
     */
    @JsonProperty(value = "properties.serverEdition")
    private ServerEdition serverEdition;

    /**
     * The storage of a server in MB (max: 2097152 = 2TiB).
     */
    @JsonProperty(value = "properties.storageQuotaInMb")
    private Long storageQuotaInMb;

    /**
     * The vCores count of a server (max: 64).
     */
    @JsonProperty(value = "properties.vCores")
    private Long vCores;

    /**
     * The standby count of a server.
     */
    @JsonProperty(value = "properties.standbyCount")
    private Integer standbyCount;

    /**
     * If public IP is requested or not for a server.
     */
    @JsonProperty(value = "properties.isPublicIpRequested", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean isPublicIpRequested;

    /**
     * The role of server in the server group. Possible values include:
     * 'Coordinator', 'Worker'.
     */
    @JsonProperty(value = "properties.role")
    private ServerRole role;

    /**
     * A state of a server that is visible to user. Possible values include:
     * 'Ready', 'Dropping', 'Disabled', 'Starting', 'Stopping', 'Stopped',
     * 'Updating', 'Provisioning'.
     */
    @JsonProperty(value = "properties.state")
    private ServerState state;

    /**
     * A state of a server group that is visible to user for HA feature.
     * Possible values include: 'NotEnabled', 'CreatingStandby',
     * 'ReplicatingData', 'FailingOver', 'Healthy', 'RemovingStandby',
     * 'NotSync'.
     */
    @JsonProperty(value = "properties.haState")
    private ServerHaState haState;

    /**
     * The administrator's login name of a servers in server group.
     */
    @JsonProperty(value = "properties.administratorLogin")
    private String administratorLogin;

    /**
     * The version of a server. Possible values include: '11', '12'.
     */
    @JsonProperty(value = "properties.version")
    private ServerVersion version;

    /**
     * Get the edition of a server (default: GeneralPurpose). Possible values include: 'GeneralPurpose', 'MemoryOptimized'.
     *
     * @return the serverEdition value
     */
    public ServerEdition serverEdition() {
        return this.serverEdition;
    }

    /**
     * Set the edition of a server (default: GeneralPurpose). Possible values include: 'GeneralPurpose', 'MemoryOptimized'.
     *
     * @param serverEdition the serverEdition value to set
     * @return the ServerGroupServerInner object itself.
     */
    public ServerGroupServerInner withServerEdition(ServerEdition serverEdition) {
        this.serverEdition = serverEdition;
        return this;
    }

    /**
     * Get the storage of a server in MB (max: 2097152 = 2TiB).
     *
     * @return the storageQuotaInMb value
     */
    public Long storageQuotaInMb() {
        return this.storageQuotaInMb;
    }

    /**
     * Set the storage of a server in MB (max: 2097152 = 2TiB).
     *
     * @param storageQuotaInMb the storageQuotaInMb value to set
     * @return the ServerGroupServerInner object itself.
     */
    public ServerGroupServerInner withStorageQuotaInMb(Long storageQuotaInMb) {
        this.storageQuotaInMb = storageQuotaInMb;
        return this;
    }

    /**
     * Get the vCores count of a server (max: 64).
     *
     * @return the vCores value
     */
    public Long vCores() {
        return this.vCores;
    }

    /**
     * Set the vCores count of a server (max: 64).
     *
     * @param vCores the vCores value to set
     * @return the ServerGroupServerInner object itself.
     */
    public ServerGroupServerInner withVCores(Long vCores) {
        this.vCores = vCores;
        return this;
    }

    /**
     * Get the standby count of a server.
     *
     * @return the standbyCount value
     */
    public Integer standbyCount() {
        return this.standbyCount;
    }

    /**
     * Set the standby count of a server.
     *
     * @param standbyCount the standbyCount value to set
     * @return the ServerGroupServerInner object itself.
     */
    public ServerGroupServerInner withStandbyCount(Integer standbyCount) {
        this.standbyCount = standbyCount;
        return this;
    }

    /**
     * Get if public IP is requested or not for a server.
     *
     * @return the isPublicIpRequested value
     */
    public Boolean isPublicIpRequested() {
        return this.isPublicIpRequested;
    }

    /**
     * Get the role of server in the server group. Possible values include: 'Coordinator', 'Worker'.
     *
     * @return the role value
     */
    public ServerRole role() {
        return this.role;
    }

    /**
     * Set the role of server in the server group. Possible values include: 'Coordinator', 'Worker'.
     *
     * @param role the role value to set
     * @return the ServerGroupServerInner object itself.
     */
    public ServerGroupServerInner withRole(ServerRole role) {
        this.role = role;
        return this;
    }

    /**
     * Get a state of a server that is visible to user. Possible values include: 'Ready', 'Dropping', 'Disabled', 'Starting', 'Stopping', 'Stopped', 'Updating', 'Provisioning'.
     *
     * @return the state value
     */
    public ServerState state() {
        return this.state;
    }

    /**
     * Set a state of a server that is visible to user. Possible values include: 'Ready', 'Dropping', 'Disabled', 'Starting', 'Stopping', 'Stopped', 'Updating', 'Provisioning'.
     *
     * @param state the state value to set
     * @return the ServerGroupServerInner object itself.
     */
    public ServerGroupServerInner withState(ServerState state) {
        this.state = state;
        return this;
    }

    /**
     * Get a state of a server group that is visible to user for HA feature. Possible values include: 'NotEnabled', 'CreatingStandby', 'ReplicatingData', 'FailingOver', 'Healthy', 'RemovingStandby', 'NotSync'.
     *
     * @return the haState value
     */
    public ServerHaState haState() {
        return this.haState;
    }

    /**
     * Set a state of a server group that is visible to user for HA feature. Possible values include: 'NotEnabled', 'CreatingStandby', 'ReplicatingData', 'FailingOver', 'Healthy', 'RemovingStandby', 'NotSync'.
     *
     * @param haState the haState value to set
     * @return the ServerGroupServerInner object itself.
     */
    public ServerGroupServerInner withHaState(ServerHaState haState) {
        this.haState = haState;
        return this;
    }

    /**
     * Get the administrator's login name of a servers in server group.
     *
     * @return the administratorLogin value
     */
    public String administratorLogin() {
        return this.administratorLogin;
    }

    /**
     * Set the administrator's login name of a servers in server group.
     *
     * @param administratorLogin the administratorLogin value to set
     * @return the ServerGroupServerInner object itself.
     */
    public ServerGroupServerInner withAdministratorLogin(String administratorLogin) {
        this.administratorLogin = administratorLogin;
        return this;
    }

    /**
     * Get the version of a server. Possible values include: '11', '12'.
     *
     * @return the version value
     */
    public ServerVersion version() {
        return this.version;
    }

    /**
     * Set the version of a server. Possible values include: '11', '12'.
     *
     * @param version the version value to set
     * @return the ServerGroupServerInner object itself.
     */
    public ServerGroupServerInner withVersion(ServerVersion version) {
        this.version = version;
        return this;
    }

}
