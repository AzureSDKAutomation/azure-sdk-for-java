/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * jkl
 */

package com.microsoft.azure.management.postgresql.v2020_10_05_privatepreview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.postgresql.v2020_10_05_privatepreview.Roles;
import rx.Completable;
import rx.functions.Func1;
import rx.Observable;
import java.util.List;
import com.microsoft.azure.management.postgresql.v2020_10_05_privatepreview.Role;

class RolesImpl extends WrapperImpl<RolesInner> implements Roles {
    private final DBForPostgreSqlManager manager;

    RolesImpl(DBForPostgreSqlManager manager) {
        super(manager.inner().roles());
        this.manager = manager;
    }

    public DBForPostgreSqlManager manager() {
        return this.manager;
    }

    @Override
    public RoleImpl define(String name) {
        return wrapModel(name);
    }

    private RoleImpl wrapModel(RoleInner inner) {
        return  new RoleImpl(inner, manager());
    }

    private RoleImpl wrapModel(String name) {
        return new RoleImpl(name, this.manager());
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String serverGroupName, String roleName) {
        RolesInner client = this.inner();
        return client.deleteAsync(resourceGroupName, serverGroupName, roleName).toCompletable();
    }

    @Override
    public Observable<Role> listByServerGroupAsync(String resourceGroupName, String serverGroupName) {
        RolesInner client = this.inner();
        return client.listByServerGroupAsync(resourceGroupName, serverGroupName)
        .flatMap(new Func1<List<RoleInner>, Observable<RoleInner>>() {
            @Override
            public Observable<RoleInner> call(List<RoleInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<RoleInner, Role>() {
            @Override
            public Role call(RoleInner inner) {
                return new RoleImpl(inner, manager());
            }
        });
    }

}
