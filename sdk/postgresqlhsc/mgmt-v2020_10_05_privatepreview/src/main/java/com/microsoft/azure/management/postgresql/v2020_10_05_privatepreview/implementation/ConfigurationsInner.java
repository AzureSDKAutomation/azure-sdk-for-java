/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.postgresql.v2020_10_05_privatepreview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.postgresql.v2020_10_05_privatepreview.ServerRoleGroupConfigurationValue;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Configurations.
 */
public class ConfigurationsInner {
    /** The Retrofit service to perform REST calls. */
    private ConfigurationsService service;
    /** The service client containing this operation class. */
    private HyperscaleCitusManagementClientImpl client;

    /**
     * Initializes an instance of ConfigurationsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ConfigurationsInner(Retrofit retrofit, HyperscaleCitusManagementClientImpl client) {
        this.service = retrofit.create(ConfigurationsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Configurations to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ConfigurationsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.postgresql.v2020_10_05_privatepreview.Configurations listByServer" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBForPostgreSql/serverGroupsv2/{serverGroupName}/servers/{serverName}/configurations")
        Observable<Response<ResponseBody>> listByServer(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverGroupName") String serverGroupName, @Path("serverName") String serverName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.postgresql.v2020_10_05_privatepreview.Configurations listByServerGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBForPostgreSql/serverGroupsv2/{serverGroupName}/configurations")
        Observable<Response<ResponseBody>> listByServerGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverGroupName") String serverGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.postgresql.v2020_10_05_privatepreview.Configurations update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBForPostgreSql/serverGroupsv2/{serverGroupName}/configurations/{configurationName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverGroupName") String serverGroupName, @Path("configurationName") String configurationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body ServerGroupConfigurationInner parameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.postgresql.v2020_10_05_privatepreview.Configurations beginUpdate" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBForPostgreSql/serverGroupsv2/{serverGroupName}/configurations/{configurationName}")
        Observable<Response<ResponseBody>> beginUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverGroupName") String serverGroupName, @Path("configurationName") String configurationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body ServerGroupConfigurationInner parameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.postgresql.v2020_10_05_privatepreview.Configurations get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBForPostgreSql/serverGroupsv2/{serverGroupName}/configurations/{configurationName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverGroupName") String serverGroupName, @Path("configurationName") String configurationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.postgresql.v2020_10_05_privatepreview.Configurations listByServerNext" })
        @GET
        Observable<Response<ResponseBody>> listByServerNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.postgresql.v2020_10_05_privatepreview.Configurations listByServerGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByServerGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * List all the configurations of a server in server group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverGroupName The name of the server group.
     * @param serverName The name of the server.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ServerConfigurationInner&gt; object if successful.
     */
    public PagedList<ServerConfigurationInner> listByServer(final String resourceGroupName, final String serverGroupName, final String serverName) {
        ServiceResponse<Page<ServerConfigurationInner>> response = listByServerSinglePageAsync(resourceGroupName, serverGroupName, serverName).toBlocking().single();
        return new PagedList<ServerConfigurationInner>(response.body()) {
            @Override
            public Page<ServerConfigurationInner> nextPage(String nextPageLink) {
                return listByServerNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List all the configurations of a server in server group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverGroupName The name of the server group.
     * @param serverName The name of the server.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ServerConfigurationInner>> listByServerAsync(final String resourceGroupName, final String serverGroupName, final String serverName, final ListOperationCallback<ServerConfigurationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByServerSinglePageAsync(resourceGroupName, serverGroupName, serverName),
            new Func1<String, Observable<ServiceResponse<Page<ServerConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServerConfigurationInner>>> call(String nextPageLink) {
                    return listByServerNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List all the configurations of a server in server group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverGroupName The name of the server group.
     * @param serverName The name of the server.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ServerConfigurationInner&gt; object
     */
    public Observable<Page<ServerConfigurationInner>> listByServerAsync(final String resourceGroupName, final String serverGroupName, final String serverName) {
        return listByServerWithServiceResponseAsync(resourceGroupName, serverGroupName, serverName)
            .map(new Func1<ServiceResponse<Page<ServerConfigurationInner>>, Page<ServerConfigurationInner>>() {
                @Override
                public Page<ServerConfigurationInner> call(ServiceResponse<Page<ServerConfigurationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List all the configurations of a server in server group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverGroupName The name of the server group.
     * @param serverName The name of the server.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ServerConfigurationInner&gt; object
     */
    public Observable<ServiceResponse<Page<ServerConfigurationInner>>> listByServerWithServiceResponseAsync(final String resourceGroupName, final String serverGroupName, final String serverName) {
        return listByServerSinglePageAsync(resourceGroupName, serverGroupName, serverName)
            .concatMap(new Func1<ServiceResponse<Page<ServerConfigurationInner>>, Observable<ServiceResponse<Page<ServerConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServerConfigurationInner>>> call(ServiceResponse<Page<ServerConfigurationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByServerNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List all the configurations of a server in server group.
     *
    ServiceResponse<PageImpl<ServerConfigurationInner>> * @param resourceGroupName The name of the resource group. The name is case insensitive.
    ServiceResponse<PageImpl<ServerConfigurationInner>> * @param serverGroupName The name of the server group.
    ServiceResponse<PageImpl<ServerConfigurationInner>> * @param serverName The name of the server.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ServerConfigurationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ServerConfigurationInner>>> listByServerSinglePageAsync(final String resourceGroupName, final String serverGroupName, final String serverName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serverGroupName == null) {
            throw new IllegalArgumentException("Parameter serverGroupName is required and cannot be null.");
        }
        if (serverName == null) {
            throw new IllegalArgumentException("Parameter serverName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByServer(this.client.subscriptionId(), resourceGroupName, serverGroupName, serverName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ServerConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServerConfigurationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ServerConfigurationInner>> result = listByServerDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ServerConfigurationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ServerConfigurationInner>> listByServerDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ServerConfigurationInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ServerConfigurationInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List all the configurations of a server group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverGroupName The name of the server group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ServerGroupConfigurationInner&gt; object if successful.
     */
    public PagedList<ServerGroupConfigurationInner> listByServerGroup(final String resourceGroupName, final String serverGroupName) {
        ServiceResponse<Page<ServerGroupConfigurationInner>> response = listByServerGroupSinglePageAsync(resourceGroupName, serverGroupName).toBlocking().single();
        return new PagedList<ServerGroupConfigurationInner>(response.body()) {
            @Override
            public Page<ServerGroupConfigurationInner> nextPage(String nextPageLink) {
                return listByServerGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List all the configurations of a server group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverGroupName The name of the server group.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ServerGroupConfigurationInner>> listByServerGroupAsync(final String resourceGroupName, final String serverGroupName, final ListOperationCallback<ServerGroupConfigurationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByServerGroupSinglePageAsync(resourceGroupName, serverGroupName),
            new Func1<String, Observable<ServiceResponse<Page<ServerGroupConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServerGroupConfigurationInner>>> call(String nextPageLink) {
                    return listByServerGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List all the configurations of a server group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverGroupName The name of the server group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ServerGroupConfigurationInner&gt; object
     */
    public Observable<Page<ServerGroupConfigurationInner>> listByServerGroupAsync(final String resourceGroupName, final String serverGroupName) {
        return listByServerGroupWithServiceResponseAsync(resourceGroupName, serverGroupName)
            .map(new Func1<ServiceResponse<Page<ServerGroupConfigurationInner>>, Page<ServerGroupConfigurationInner>>() {
                @Override
                public Page<ServerGroupConfigurationInner> call(ServiceResponse<Page<ServerGroupConfigurationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List all the configurations of a server group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverGroupName The name of the server group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ServerGroupConfigurationInner&gt; object
     */
    public Observable<ServiceResponse<Page<ServerGroupConfigurationInner>>> listByServerGroupWithServiceResponseAsync(final String resourceGroupName, final String serverGroupName) {
        return listByServerGroupSinglePageAsync(resourceGroupName, serverGroupName)
            .concatMap(new Func1<ServiceResponse<Page<ServerGroupConfigurationInner>>, Observable<ServiceResponse<Page<ServerGroupConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServerGroupConfigurationInner>>> call(ServiceResponse<Page<ServerGroupConfigurationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByServerGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List all the configurations of a server group.
     *
    ServiceResponse<PageImpl<ServerGroupConfigurationInner>> * @param resourceGroupName The name of the resource group. The name is case insensitive.
    ServiceResponse<PageImpl<ServerGroupConfigurationInner>> * @param serverGroupName The name of the server group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ServerGroupConfigurationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ServerGroupConfigurationInner>>> listByServerGroupSinglePageAsync(final String resourceGroupName, final String serverGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serverGroupName == null) {
            throw new IllegalArgumentException("Parameter serverGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByServerGroup(this.client.subscriptionId(), resourceGroupName, serverGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ServerGroupConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServerGroupConfigurationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ServerGroupConfigurationInner>> result = listByServerGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ServerGroupConfigurationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ServerGroupConfigurationInner>> listByServerGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ServerGroupConfigurationInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ServerGroupConfigurationInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Updates configuration of server role groups in a server group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverGroupName The name of the server group.
     * @param configurationName The name of the server group configuration.
     * @param serverRoleGroupConfigurationValues The list of server role group configuration values.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ServerGroupConfigurationInner object if successful.
     */
    public ServerGroupConfigurationInner update(String resourceGroupName, String serverGroupName, String configurationName, List<ServerRoleGroupConfigurationValue> serverRoleGroupConfigurationValues) {
        return updateWithServiceResponseAsync(resourceGroupName, serverGroupName, configurationName, serverRoleGroupConfigurationValues).toBlocking().last().body();
    }

    /**
     * Updates configuration of server role groups in a server group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverGroupName The name of the server group.
     * @param configurationName The name of the server group configuration.
     * @param serverRoleGroupConfigurationValues The list of server role group configuration values.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ServerGroupConfigurationInner> updateAsync(String resourceGroupName, String serverGroupName, String configurationName, List<ServerRoleGroupConfigurationValue> serverRoleGroupConfigurationValues, final ServiceCallback<ServerGroupConfigurationInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, serverGroupName, configurationName, serverRoleGroupConfigurationValues), serviceCallback);
    }

    /**
     * Updates configuration of server role groups in a server group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverGroupName The name of the server group.
     * @param configurationName The name of the server group configuration.
     * @param serverRoleGroupConfigurationValues The list of server role group configuration values.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServerGroupConfigurationInner> updateAsync(String resourceGroupName, String serverGroupName, String configurationName, List<ServerRoleGroupConfigurationValue> serverRoleGroupConfigurationValues) {
        return updateWithServiceResponseAsync(resourceGroupName, serverGroupName, configurationName, serverRoleGroupConfigurationValues).map(new Func1<ServiceResponse<ServerGroupConfigurationInner>, ServerGroupConfigurationInner>() {
            @Override
            public ServerGroupConfigurationInner call(ServiceResponse<ServerGroupConfigurationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates configuration of server role groups in a server group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverGroupName The name of the server group.
     * @param configurationName The name of the server group configuration.
     * @param serverRoleGroupConfigurationValues The list of server role group configuration values.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ServerGroupConfigurationInner>> updateWithServiceResponseAsync(String resourceGroupName, String serverGroupName, String configurationName, List<ServerRoleGroupConfigurationValue> serverRoleGroupConfigurationValues) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serverGroupName == null) {
            throw new IllegalArgumentException("Parameter serverGroupName is required and cannot be null.");
        }
        if (configurationName == null) {
            throw new IllegalArgumentException("Parameter configurationName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (serverRoleGroupConfigurationValues == null) {
            throw new IllegalArgumentException("Parameter serverRoleGroupConfigurationValues is required and cannot be null.");
        }
        Validator.validate(serverRoleGroupConfigurationValues);
        ServerGroupConfigurationInner parameters = new ServerGroupConfigurationInner();
        parameters.withServerRoleGroupConfigurationValues(serverRoleGroupConfigurationValues);
        Observable<Response<ResponseBody>> observable = service.update(this.client.subscriptionId(), resourceGroupName, serverGroupName, configurationName, this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ServerGroupConfigurationInner>() { }.getType());
    }

    /**
     * Updates configuration of server role groups in a server group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverGroupName The name of the server group.
     * @param configurationName The name of the server group configuration.
     * @param serverRoleGroupConfigurationValues The list of server role group configuration values.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ServerGroupConfigurationInner object if successful.
     */
    public ServerGroupConfigurationInner beginUpdate(String resourceGroupName, String serverGroupName, String configurationName, List<ServerRoleGroupConfigurationValue> serverRoleGroupConfigurationValues) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, serverGroupName, configurationName, serverRoleGroupConfigurationValues).toBlocking().single().body();
    }

    /**
     * Updates configuration of server role groups in a server group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverGroupName The name of the server group.
     * @param configurationName The name of the server group configuration.
     * @param serverRoleGroupConfigurationValues The list of server role group configuration values.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ServerGroupConfigurationInner> beginUpdateAsync(String resourceGroupName, String serverGroupName, String configurationName, List<ServerRoleGroupConfigurationValue> serverRoleGroupConfigurationValues, final ServiceCallback<ServerGroupConfigurationInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, serverGroupName, configurationName, serverRoleGroupConfigurationValues), serviceCallback);
    }

    /**
     * Updates configuration of server role groups in a server group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverGroupName The name of the server group.
     * @param configurationName The name of the server group configuration.
     * @param serverRoleGroupConfigurationValues The list of server role group configuration values.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServerGroupConfigurationInner object
     */
    public Observable<ServerGroupConfigurationInner> beginUpdateAsync(String resourceGroupName, String serverGroupName, String configurationName, List<ServerRoleGroupConfigurationValue> serverRoleGroupConfigurationValues) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, serverGroupName, configurationName, serverRoleGroupConfigurationValues).map(new Func1<ServiceResponse<ServerGroupConfigurationInner>, ServerGroupConfigurationInner>() {
            @Override
            public ServerGroupConfigurationInner call(ServiceResponse<ServerGroupConfigurationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates configuration of server role groups in a server group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverGroupName The name of the server group.
     * @param configurationName The name of the server group configuration.
     * @param serverRoleGroupConfigurationValues The list of server role group configuration values.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServerGroupConfigurationInner object
     */
    public Observable<ServiceResponse<ServerGroupConfigurationInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String serverGroupName, String configurationName, List<ServerRoleGroupConfigurationValue> serverRoleGroupConfigurationValues) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serverGroupName == null) {
            throw new IllegalArgumentException("Parameter serverGroupName is required and cannot be null.");
        }
        if (configurationName == null) {
            throw new IllegalArgumentException("Parameter configurationName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (serverRoleGroupConfigurationValues == null) {
            throw new IllegalArgumentException("Parameter serverRoleGroupConfigurationValues is required and cannot be null.");
        }
        Validator.validate(serverRoleGroupConfigurationValues);
        ServerGroupConfigurationInner parameters = new ServerGroupConfigurationInner();
        parameters.withServerRoleGroupConfigurationValues(serverRoleGroupConfigurationValues);
        return service.beginUpdate(this.client.subscriptionId(), resourceGroupName, serverGroupName, configurationName, this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ServerGroupConfigurationInner>>>() {
                @Override
                public Observable<ServiceResponse<ServerGroupConfigurationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ServerGroupConfigurationInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ServerGroupConfigurationInner> beginUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ServerGroupConfigurationInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ServerGroupConfigurationInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets information about single server group configuration.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverGroupName The name of the server group.
     * @param configurationName The name of the server group configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ServerGroupConfigurationInner object if successful.
     */
    public ServerGroupConfigurationInner get(String resourceGroupName, String serverGroupName, String configurationName) {
        return getWithServiceResponseAsync(resourceGroupName, serverGroupName, configurationName).toBlocking().single().body();
    }

    /**
     * Gets information about single server group configuration.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverGroupName The name of the server group.
     * @param configurationName The name of the server group configuration.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ServerGroupConfigurationInner> getAsync(String resourceGroupName, String serverGroupName, String configurationName, final ServiceCallback<ServerGroupConfigurationInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, serverGroupName, configurationName), serviceCallback);
    }

    /**
     * Gets information about single server group configuration.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverGroupName The name of the server group.
     * @param configurationName The name of the server group configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServerGroupConfigurationInner object
     */
    public Observable<ServerGroupConfigurationInner> getAsync(String resourceGroupName, String serverGroupName, String configurationName) {
        return getWithServiceResponseAsync(resourceGroupName, serverGroupName, configurationName).map(new Func1<ServiceResponse<ServerGroupConfigurationInner>, ServerGroupConfigurationInner>() {
            @Override
            public ServerGroupConfigurationInner call(ServiceResponse<ServerGroupConfigurationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets information about single server group configuration.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverGroupName The name of the server group.
     * @param configurationName The name of the server group configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServerGroupConfigurationInner object
     */
    public Observable<ServiceResponse<ServerGroupConfigurationInner>> getWithServiceResponseAsync(String resourceGroupName, String serverGroupName, String configurationName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serverGroupName == null) {
            throw new IllegalArgumentException("Parameter serverGroupName is required and cannot be null.");
        }
        if (configurationName == null) {
            throw new IllegalArgumentException("Parameter configurationName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, serverGroupName, configurationName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ServerGroupConfigurationInner>>>() {
                @Override
                public Observable<ServiceResponse<ServerGroupConfigurationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ServerGroupConfigurationInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ServerGroupConfigurationInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ServerGroupConfigurationInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ServerGroupConfigurationInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List all the configurations of a server in server group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ServerConfigurationInner&gt; object if successful.
     */
    public PagedList<ServerConfigurationInner> listByServerNext(final String nextPageLink) {
        ServiceResponse<Page<ServerConfigurationInner>> response = listByServerNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ServerConfigurationInner>(response.body()) {
            @Override
            public Page<ServerConfigurationInner> nextPage(String nextPageLink) {
                return listByServerNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List all the configurations of a server in server group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ServerConfigurationInner>> listByServerNextAsync(final String nextPageLink, final ServiceFuture<List<ServerConfigurationInner>> serviceFuture, final ListOperationCallback<ServerConfigurationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByServerNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ServerConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServerConfigurationInner>>> call(String nextPageLink) {
                    return listByServerNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List all the configurations of a server in server group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ServerConfigurationInner&gt; object
     */
    public Observable<Page<ServerConfigurationInner>> listByServerNextAsync(final String nextPageLink) {
        return listByServerNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ServerConfigurationInner>>, Page<ServerConfigurationInner>>() {
                @Override
                public Page<ServerConfigurationInner> call(ServiceResponse<Page<ServerConfigurationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List all the configurations of a server in server group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ServerConfigurationInner&gt; object
     */
    public Observable<ServiceResponse<Page<ServerConfigurationInner>>> listByServerNextWithServiceResponseAsync(final String nextPageLink) {
        return listByServerNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ServerConfigurationInner>>, Observable<ServiceResponse<Page<ServerConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServerConfigurationInner>>> call(ServiceResponse<Page<ServerConfigurationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByServerNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List all the configurations of a server in server group.
     *
    ServiceResponse<PageImpl<ServerConfigurationInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ServerConfigurationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ServerConfigurationInner>>> listByServerNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByServerNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ServerConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServerConfigurationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ServerConfigurationInner>> result = listByServerNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ServerConfigurationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ServerConfigurationInner>> listByServerNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ServerConfigurationInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ServerConfigurationInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List all the configurations of a server group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ServerGroupConfigurationInner&gt; object if successful.
     */
    public PagedList<ServerGroupConfigurationInner> listByServerGroupNext(final String nextPageLink) {
        ServiceResponse<Page<ServerGroupConfigurationInner>> response = listByServerGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ServerGroupConfigurationInner>(response.body()) {
            @Override
            public Page<ServerGroupConfigurationInner> nextPage(String nextPageLink) {
                return listByServerGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List all the configurations of a server group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ServerGroupConfigurationInner>> listByServerGroupNextAsync(final String nextPageLink, final ServiceFuture<List<ServerGroupConfigurationInner>> serviceFuture, final ListOperationCallback<ServerGroupConfigurationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByServerGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ServerGroupConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServerGroupConfigurationInner>>> call(String nextPageLink) {
                    return listByServerGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List all the configurations of a server group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ServerGroupConfigurationInner&gt; object
     */
    public Observable<Page<ServerGroupConfigurationInner>> listByServerGroupNextAsync(final String nextPageLink) {
        return listByServerGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ServerGroupConfigurationInner>>, Page<ServerGroupConfigurationInner>>() {
                @Override
                public Page<ServerGroupConfigurationInner> call(ServiceResponse<Page<ServerGroupConfigurationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List all the configurations of a server group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ServerGroupConfigurationInner&gt; object
     */
    public Observable<ServiceResponse<Page<ServerGroupConfigurationInner>>> listByServerGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByServerGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ServerGroupConfigurationInner>>, Observable<ServiceResponse<Page<ServerGroupConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServerGroupConfigurationInner>>> call(ServiceResponse<Page<ServerGroupConfigurationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByServerGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List all the configurations of a server group.
     *
    ServiceResponse<PageImpl<ServerGroupConfigurationInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ServerGroupConfigurationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ServerGroupConfigurationInner>>> listByServerGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByServerGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ServerGroupConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServerGroupConfigurationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ServerGroupConfigurationInner>> result = listByServerGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ServerGroupConfigurationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ServerGroupConfigurationInner>> listByServerGroupNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ServerGroupConfigurationInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ServerGroupConfigurationInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
