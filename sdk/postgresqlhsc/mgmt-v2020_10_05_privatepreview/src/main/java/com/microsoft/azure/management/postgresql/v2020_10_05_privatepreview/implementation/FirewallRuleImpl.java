/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.postgresql.v2020_10_05_privatepreview.implementation;

import com.microsoft.azure.management.postgresql.v2020_10_05_privatepreview.FirewallRule;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;

class FirewallRuleImpl extends CreatableUpdatableImpl<FirewallRule, FirewallRuleInner, FirewallRuleImpl> implements FirewallRule, FirewallRule.Definition, FirewallRule.Update {
    private String resourceGroupName;
    private String serverGroupName;
    private String firewallRuleName;
    private final DBForPostgreSqlManager manager;

    FirewallRuleImpl(String name, DBForPostgreSqlManager manager) {
        super(name, new FirewallRuleInner());
        this.manager = manager;
        // Set resource name
        this.firewallRuleName = name;
        //
    }

    FirewallRuleImpl(FirewallRuleInner inner, DBForPostgreSqlManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.firewallRuleName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.serverGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "serverGroupsv2");
        this.firewallRuleName = IdParsingUtils.getValueFromIdByName(inner.id(), "firewallRules");
        // set other parameters for create and update
    }

    @Override
    public DBForPostgreSqlManager manager() {
        return this.manager;
    }

    @Override
    public Observable<FirewallRule> createResourceAsync() {
        FirewallRulesInner client = this.manager().inner().firewallRules();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serverGroupName, this.firewallRuleName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<FirewallRule> updateResourceAsync() {
        FirewallRulesInner client = this.manager().inner().firewallRules();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serverGroupName, this.firewallRuleName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<FirewallRuleInner> getInnerAsync() {
        FirewallRulesInner client = this.manager().inner().firewallRules();
        return null; // NOP getInnerAsync implementation as get is not supported
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String endIpAddress() {
        return this.inner().endIpAddress();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String startIpAddress() {
        return this.inner().startIpAddress();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public FirewallRuleImpl withResourceGroupName(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    @Override
    public FirewallRuleImpl withServerGroupName(String serverGroupName) {
        this.serverGroupName = serverGroupName;
        return this;
    }

    @Override
    public FirewallRuleImpl withEndIpAddress(String endIpAddress) {
        this.inner().withEndIpAddress(endIpAddress);
        return this;
    }

    @Override
    public FirewallRuleImpl withStartIpAddress(String startIpAddress) {
        this.inner().withStartIpAddress(startIpAddress);
        return this;
    }

}
