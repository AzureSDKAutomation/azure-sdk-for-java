// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearningservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Batch inference specific settings per deployment. */
@Fluent
public final class BatchDeploymentSettings {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(BatchDeploymentSettings.class);

    /*
     * Resource ID of the compute resource
     */
    @JsonProperty(value = "computeId")
    private String computeId;

    /*
     * Error threshold, if the error count for the entire input goes above this
     * value,
     * the batch inference will be aborted. Range is [-1, int.MaxValue]
     * -1 value indicates, ignore all failures during batch inference
     * For FileDataset count of file failures
     * For TabularDataset, this is the count of record failures
     */
    @JsonProperty(value = "errorThreshold")
    private Integer errorThreshold;

    /*
     * Retry settings for a batch inference operation.
     */
    @JsonProperty(value = "retrySettings")
    private BatchRetrySettings retrySettings;

    /*
     * Partitioning scheme for batch inference operation.
     */
    @JsonProperty(value = "partitioningScheme")
    private BatchPartitioningScheme partitioningScheme;

    /*
     * Logging level for batch inference operation.
     */
    @JsonProperty(value = "loggingLevel")
    private BatchLoggingLevel loggingLevel;

    /*
     * Batch inference output configuration.
     */
    @JsonProperty(value = "outputConfiguration")
    private BatchOutputConfiguration outputConfiguration;

    /**
     * Get the computeId property: Resource ID of the compute resource.
     *
     * @return the computeId value.
     */
    public String computeId() {
        return this.computeId;
    }

    /**
     * Set the computeId property: Resource ID of the compute resource.
     *
     * @param computeId the computeId value to set.
     * @return the BatchDeploymentSettings object itself.
     */
    public BatchDeploymentSettings withComputeId(String computeId) {
        this.computeId = computeId;
        return this;
    }

    /**
     * Get the errorThreshold property: Error threshold, if the error count for the entire input goes above this value,
     * the batch inference will be aborted. Range is [-1, int.MaxValue] -1 value indicates, ignore all failures during
     * batch inference For FileDataset count of file failures For TabularDataset, this is the count of record failures.
     *
     * @return the errorThreshold value.
     */
    public Integer errorThreshold() {
        return this.errorThreshold;
    }

    /**
     * Set the errorThreshold property: Error threshold, if the error count for the entire input goes above this value,
     * the batch inference will be aborted. Range is [-1, int.MaxValue] -1 value indicates, ignore all failures during
     * batch inference For FileDataset count of file failures For TabularDataset, this is the count of record failures.
     *
     * @param errorThreshold the errorThreshold value to set.
     * @return the BatchDeploymentSettings object itself.
     */
    public BatchDeploymentSettings withErrorThreshold(Integer errorThreshold) {
        this.errorThreshold = errorThreshold;
        return this;
    }

    /**
     * Get the retrySettings property: Retry settings for a batch inference operation.
     *
     * @return the retrySettings value.
     */
    public BatchRetrySettings retrySettings() {
        return this.retrySettings;
    }

    /**
     * Set the retrySettings property: Retry settings for a batch inference operation.
     *
     * @param retrySettings the retrySettings value to set.
     * @return the BatchDeploymentSettings object itself.
     */
    public BatchDeploymentSettings withRetrySettings(BatchRetrySettings retrySettings) {
        this.retrySettings = retrySettings;
        return this;
    }

    /**
     * Get the partitioningScheme property: Partitioning scheme for batch inference operation.
     *
     * @return the partitioningScheme value.
     */
    public BatchPartitioningScheme partitioningScheme() {
        return this.partitioningScheme;
    }

    /**
     * Set the partitioningScheme property: Partitioning scheme for batch inference operation.
     *
     * @param partitioningScheme the partitioningScheme value to set.
     * @return the BatchDeploymentSettings object itself.
     */
    public BatchDeploymentSettings withPartitioningScheme(BatchPartitioningScheme partitioningScheme) {
        this.partitioningScheme = partitioningScheme;
        return this;
    }

    /**
     * Get the loggingLevel property: Logging level for batch inference operation.
     *
     * @return the loggingLevel value.
     */
    public BatchLoggingLevel loggingLevel() {
        return this.loggingLevel;
    }

    /**
     * Set the loggingLevel property: Logging level for batch inference operation.
     *
     * @param loggingLevel the loggingLevel value to set.
     * @return the BatchDeploymentSettings object itself.
     */
    public BatchDeploymentSettings withLoggingLevel(BatchLoggingLevel loggingLevel) {
        this.loggingLevel = loggingLevel;
        return this;
    }

    /**
     * Get the outputConfiguration property: Batch inference output configuration.
     *
     * @return the outputConfiguration value.
     */
    public BatchOutputConfiguration outputConfiguration() {
        return this.outputConfiguration;
    }

    /**
     * Set the outputConfiguration property: Batch inference output configuration.
     *
     * @param outputConfiguration the outputConfiguration value to set.
     * @return the BatchDeploymentSettings object itself.
     */
    public BatchDeploymentSettings withOutputConfiguration(BatchOutputConfiguration outputConfiguration) {
        this.outputConfiguration = outputConfiguration;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (retrySettings() != null) {
            retrySettings().validate();
        }
        if (partitioningScheme() != null) {
            partitioningScheme().validate();
        }
        if (outputConfiguration() != null) {
            outputConfiguration().validate();
        }
    }
}
