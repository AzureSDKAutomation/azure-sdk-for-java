// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearningservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.UUID;

/** The ServicePrincipalSection model. */
@Fluent
public final class ServicePrincipalSection {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ServicePrincipalSection.class);

    /*
     * Authority URL used for authentication.
     */
    @JsonProperty(value = "authorityUrl")
    private String authorityUrl;

    /*
     * Resource the service principal has access to.
     */
    @JsonProperty(value = "resourceUri")
    private String resourceUri;

    /*
     * ID of the tenant to which the service principal belongs.
     */
    @JsonProperty(value = "tenantId", required = true)
    private UUID tenantId;

    /*
     * Service principal client ID.
     */
    @JsonProperty(value = "clientId", required = true)
    private UUID clientId;

    /*
     * Service principal secret.
     */
    @JsonProperty(value = "clientSecret")
    private String clientSecret;

    /**
     * Get the authorityUrl property: Authority URL used for authentication.
     *
     * @return the authorityUrl value.
     */
    public String authorityUrl() {
        return this.authorityUrl;
    }

    /**
     * Set the authorityUrl property: Authority URL used for authentication.
     *
     * @param authorityUrl the authorityUrl value to set.
     * @return the ServicePrincipalSection object itself.
     */
    public ServicePrincipalSection withAuthorityUrl(String authorityUrl) {
        this.authorityUrl = authorityUrl;
        return this;
    }

    /**
     * Get the resourceUri property: Resource the service principal has access to.
     *
     * @return the resourceUri value.
     */
    public String resourceUri() {
        return this.resourceUri;
    }

    /**
     * Set the resourceUri property: Resource the service principal has access to.
     *
     * @param resourceUri the resourceUri value to set.
     * @return the ServicePrincipalSection object itself.
     */
    public ServicePrincipalSection withResourceUri(String resourceUri) {
        this.resourceUri = resourceUri;
        return this;
    }

    /**
     * Get the tenantId property: ID of the tenant to which the service principal belongs.
     *
     * @return the tenantId value.
     */
    public UUID tenantId() {
        return this.tenantId;
    }

    /**
     * Set the tenantId property: ID of the tenant to which the service principal belongs.
     *
     * @param tenantId the tenantId value to set.
     * @return the ServicePrincipalSection object itself.
     */
    public ServicePrincipalSection withTenantId(UUID tenantId) {
        this.tenantId = tenantId;
        return this;
    }

    /**
     * Get the clientId property: Service principal client ID.
     *
     * @return the clientId value.
     */
    public UUID clientId() {
        return this.clientId;
    }

    /**
     * Set the clientId property: Service principal client ID.
     *
     * @param clientId the clientId value to set.
     * @return the ServicePrincipalSection object itself.
     */
    public ServicePrincipalSection withClientId(UUID clientId) {
        this.clientId = clientId;
        return this;
    }

    /**
     * Get the clientSecret property: Service principal secret.
     *
     * @return the clientSecret value.
     */
    public String clientSecret() {
        return this.clientSecret;
    }

    /**
     * Set the clientSecret property: Service principal secret.
     *
     * @param clientSecret the clientSecret value to set.
     * @return the ServicePrincipalSection object itself.
     */
    public ServicePrincipalSection withClientSecret(String clientSecret) {
        this.clientSecret = clientSecret;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (tenantId() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property tenantId in model ServicePrincipalSection"));
        }
        if (clientId() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property clientId in model ServicePrincipalSection"));
        }
    }
}
