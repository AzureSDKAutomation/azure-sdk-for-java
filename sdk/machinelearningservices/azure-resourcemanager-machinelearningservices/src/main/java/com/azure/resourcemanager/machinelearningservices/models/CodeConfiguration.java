// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearningservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The CodeConfiguration model. */
@Fluent
public final class CodeConfiguration {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(CodeConfiguration.class);

    /*
     * The ID of the code asset.
     */
    @JsonProperty(value = "codeArtifactId")
    private String codeArtifactId;

    /*
     * The command to execute on startup of the job. eg. ["python", "train.py"]
     */
    @JsonProperty(value = "command", required = true)
    private String command;

    /**
     * Get the codeArtifactId property: The ID of the code asset.
     *
     * @return the codeArtifactId value.
     */
    public String codeArtifactId() {
        return this.codeArtifactId;
    }

    /**
     * Set the codeArtifactId property: The ID of the code asset.
     *
     * @param codeArtifactId the codeArtifactId value to set.
     * @return the CodeConfiguration object itself.
     */
    public CodeConfiguration withCodeArtifactId(String codeArtifactId) {
        this.codeArtifactId = codeArtifactId;
        return this;
    }

    /**
     * Get the command property: The command to execute on startup of the job. eg. ["python", "train.py"].
     *
     * @return the command value.
     */
    public String command() {
        return this.command;
    }

    /**
     * Set the command property: The command to execute on startup of the job. eg. ["python", "train.py"].
     *
     * @param command the command value to set.
     * @return the CodeConfiguration object itself.
     */
    public CodeConfiguration withCommand(String command) {
        this.command = command;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (command() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property command in model CodeConfiguration"));
        }
    }
}
