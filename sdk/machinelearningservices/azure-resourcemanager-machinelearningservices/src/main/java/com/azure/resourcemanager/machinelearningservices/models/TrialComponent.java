// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearningservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.Duration;
import java.util.Map;

/** Trial component definition. */
@Fluent
public final class TrialComponent {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(TrialComponent.class);

    /*
     * ARM resource ID of the code asset.
     */
    @JsonProperty(value = "codeId")
    private String codeId;

    /*
     * The command to execute on startup of the job. eg. "python train.py"
     */
    @JsonProperty(value = "command", required = true)
    private String command;

    /*
     * Distribution configuration of the job. If set, this should be one of
     * Mpi, Tensorflow, PyTorch, or null.
     */
    @JsonProperty(value = "distribution")
    private DistributionConfiguration distribution;

    /*
     * The ARM resource ID of the Environment specification for the job.
     */
    @JsonProperty(value = "environmentId")
    private String environmentId;

    /*
     * Environment variables included in the job.
     */
    @JsonProperty(value = "environmentVariables")
    private Map<String, String> environmentVariables;

    /*
     * Mapping of input data bindings used in the job.
     */
    @JsonProperty(value = "inputDataBindings")
    private Map<String, InputDataBinding> inputDataBindings;

    /*
     * Mapping of output data bindings used in the job.
     */
    @JsonProperty(value = "outputDataBindings")
    private Map<String, OutputDataBinding> outputDataBindings;

    /*
     * The max run duration in ISO 8601 format, after which the trial component
     * will be cancelled.
     * Only supports duration with precision as low as Seconds.
     */
    @JsonProperty(value = "timeout")
    private Duration timeout;

    /**
     * Get the codeId property: ARM resource ID of the code asset.
     *
     * @return the codeId value.
     */
    public String codeId() {
        return this.codeId;
    }

    /**
     * Set the codeId property: ARM resource ID of the code asset.
     *
     * @param codeId the codeId value to set.
     * @return the TrialComponent object itself.
     */
    public TrialComponent withCodeId(String codeId) {
        this.codeId = codeId;
        return this;
    }

    /**
     * Get the command property: The command to execute on startup of the job. eg. "python train.py".
     *
     * @return the command value.
     */
    public String command() {
        return this.command;
    }

    /**
     * Set the command property: The command to execute on startup of the job. eg. "python train.py".
     *
     * @param command the command value to set.
     * @return the TrialComponent object itself.
     */
    public TrialComponent withCommand(String command) {
        this.command = command;
        return this;
    }

    /**
     * Get the distribution property: Distribution configuration of the job. If set, this should be one of Mpi,
     * Tensorflow, PyTorch, or null.
     *
     * @return the distribution value.
     */
    public DistributionConfiguration distribution() {
        return this.distribution;
    }

    /**
     * Set the distribution property: Distribution configuration of the job. If set, this should be one of Mpi,
     * Tensorflow, PyTorch, or null.
     *
     * @param distribution the distribution value to set.
     * @return the TrialComponent object itself.
     */
    public TrialComponent withDistribution(DistributionConfiguration distribution) {
        this.distribution = distribution;
        return this;
    }

    /**
     * Get the environmentId property: The ARM resource ID of the Environment specification for the job.
     *
     * @return the environmentId value.
     */
    public String environmentId() {
        return this.environmentId;
    }

    /**
     * Set the environmentId property: The ARM resource ID of the Environment specification for the job.
     *
     * @param environmentId the environmentId value to set.
     * @return the TrialComponent object itself.
     */
    public TrialComponent withEnvironmentId(String environmentId) {
        this.environmentId = environmentId;
        return this;
    }

    /**
     * Get the environmentVariables property: Environment variables included in the job.
     *
     * @return the environmentVariables value.
     */
    public Map<String, String> environmentVariables() {
        return this.environmentVariables;
    }

    /**
     * Set the environmentVariables property: Environment variables included in the job.
     *
     * @param environmentVariables the environmentVariables value to set.
     * @return the TrialComponent object itself.
     */
    public TrialComponent withEnvironmentVariables(Map<String, String> environmentVariables) {
        this.environmentVariables = environmentVariables;
        return this;
    }

    /**
     * Get the inputDataBindings property: Mapping of input data bindings used in the job.
     *
     * @return the inputDataBindings value.
     */
    public Map<String, InputDataBinding> inputDataBindings() {
        return this.inputDataBindings;
    }

    /**
     * Set the inputDataBindings property: Mapping of input data bindings used in the job.
     *
     * @param inputDataBindings the inputDataBindings value to set.
     * @return the TrialComponent object itself.
     */
    public TrialComponent withInputDataBindings(Map<String, InputDataBinding> inputDataBindings) {
        this.inputDataBindings = inputDataBindings;
        return this;
    }

    /**
     * Get the outputDataBindings property: Mapping of output data bindings used in the job.
     *
     * @return the outputDataBindings value.
     */
    public Map<String, OutputDataBinding> outputDataBindings() {
        return this.outputDataBindings;
    }

    /**
     * Set the outputDataBindings property: Mapping of output data bindings used in the job.
     *
     * @param outputDataBindings the outputDataBindings value to set.
     * @return the TrialComponent object itself.
     */
    public TrialComponent withOutputDataBindings(Map<String, OutputDataBinding> outputDataBindings) {
        this.outputDataBindings = outputDataBindings;
        return this;
    }

    /**
     * Get the timeout property: The max run duration in ISO 8601 format, after which the trial component will be
     * cancelled. Only supports duration with precision as low as Seconds.
     *
     * @return the timeout value.
     */
    public Duration timeout() {
        return this.timeout;
    }

    /**
     * Set the timeout property: The max run duration in ISO 8601 format, after which the trial component will be
     * cancelled. Only supports duration with precision as low as Seconds.
     *
     * @param timeout the timeout value to set.
     * @return the TrialComponent object itself.
     */
    public TrialComponent withTimeout(Duration timeout) {
        this.timeout = timeout;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (command() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property command in model TrialComponent"));
        }
        if (distribution() != null) {
            distribution().validate();
        }
        if (inputDataBindings() != null) {
            inputDataBindings()
                .values()
                .forEach(
                    e -> {
                        if (e != null) {
                            e.validate();
                        }
                    });
        }
        if (outputDataBindings() != null) {
            outputDataBindings()
                .values()
                .forEach(
                    e -> {
                        if (e != null) {
                            e.validate();
                        }
                    });
        }
    }
}
