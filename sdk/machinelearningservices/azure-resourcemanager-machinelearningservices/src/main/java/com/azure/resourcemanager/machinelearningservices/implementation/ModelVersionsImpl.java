// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearningservices.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.machinelearningservices.MachinelearningservicesManager;
import com.azure.resourcemanager.machinelearningservices.fluent.ModelVersionsClient;
import com.azure.resourcemanager.machinelearningservices.fluent.models.ModelVersionResourceInner;
import com.azure.resourcemanager.machinelearningservices.models.ModelVersionResource;
import com.azure.resourcemanager.machinelearningservices.models.ModelVersions;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ModelVersionsImpl implements ModelVersions {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ModelVersionsImpl.class);

    private final ModelVersionsClient innerClient;

    private final MachinelearningservicesManager serviceManager;

    public ModelVersionsImpl(ModelVersionsClient innerClient, MachinelearningservicesManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ModelVersionResource> list(String name, String resourceGroupName, String workspaceName) {
        PagedIterable<ModelVersionResourceInner> inner =
            this.serviceClient().list(name, resourceGroupName, workspaceName);
        return inner.mapPage(inner1 -> new ModelVersionResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<ModelVersionResource> list(
        String name,
        String resourceGroupName,
        String workspaceName,
        String skiptoken,
        String version,
        String description,
        Integer count,
        Integer offset,
        String tags,
        String properties,
        String orderBy,
        Boolean latestVersionOnly,
        Context context) {
        PagedIterable<ModelVersionResourceInner> inner =
            this
                .serviceClient()
                .list(
                    name,
                    resourceGroupName,
                    workspaceName,
                    skiptoken,
                    version,
                    description,
                    count,
                    offset,
                    tags,
                    properties,
                    orderBy,
                    latestVersionOnly,
                    context);
        return inner.mapPage(inner1 -> new ModelVersionResourceImpl(inner1, this.manager()));
    }

    public ModelVersionResource get(String name, String version, String resourceGroupName, String workspaceName) {
        ModelVersionResourceInner inner = this.serviceClient().get(name, version, resourceGroupName, workspaceName);
        if (inner != null) {
            return new ModelVersionResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ModelVersionResource> getWithResponse(
        String name, String version, String resourceGroupName, String workspaceName, Context context) {
        Response<ModelVersionResourceInner> inner =
            this.serviceClient().getWithResponse(name, version, resourceGroupName, workspaceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ModelVersionResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String name, String version, String resourceGroupName, String workspaceName) {
        this.serviceClient().delete(name, version, resourceGroupName, workspaceName);
    }

    public Response<Void> deleteWithResponse(
        String name, String version, String resourceGroupName, String workspaceName, Context context) {
        return this.serviceClient().deleteWithResponse(name, version, resourceGroupName, workspaceName, context);
    }

    public ModelVersionResource getById(String id) {
        String name = Utils.getValueFromIdByName(id, "models");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'models'.", id)));
        }
        String version = Utils.getValueFromIdByName(id, "versions");
        if (version == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'versions'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        return this.getWithResponse(name, version, resourceGroupName, workspaceName, Context.NONE).getValue();
    }

    public Response<ModelVersionResource> getByIdWithResponse(String id, Context context) {
        String name = Utils.getValueFromIdByName(id, "models");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'models'.", id)));
        }
        String version = Utils.getValueFromIdByName(id, "versions");
        if (version == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'versions'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        return this.getWithResponse(name, version, resourceGroupName, workspaceName, context);
    }

    public void deleteById(String id) {
        String name = Utils.getValueFromIdByName(id, "models");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'models'.", id)));
        }
        String version = Utils.getValueFromIdByName(id, "versions");
        if (version == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'versions'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        this.deleteWithResponse(name, version, resourceGroupName, workspaceName, Context.NONE).getValue();
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String name = Utils.getValueFromIdByName(id, "models");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'models'.", id)));
        }
        String version = Utils.getValueFromIdByName(id, "versions");
        if (version == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'versions'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        return this.deleteWithResponse(name, version, resourceGroupName, workspaceName, context);
    }

    private ModelVersionsClient serviceClient() {
        return this.innerClient;
    }

    private MachinelearningservicesManager manager() {
        return this.serviceManager;
    }

    public ModelVersionResourceImpl define(String name) {
        return new ModelVersionResourceImpl(name, this.manager());
    }
}
