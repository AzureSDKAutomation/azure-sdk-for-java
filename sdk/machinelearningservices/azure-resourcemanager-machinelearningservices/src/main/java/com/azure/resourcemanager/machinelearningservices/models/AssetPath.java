// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearningservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Details of an AssetUri. */
@Fluent
public final class AssetPath {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(AssetPath.class);

    /*
     * The path of file/directory.
     */
    @JsonProperty(value = "path", required = true)
    private String path;

    /*
     * Whether the path defines a directory or a single file.
     */
    @JsonProperty(value = "isDirectory")
    private Boolean isDirectory;

    /**
     * Get the path property: The path of file/directory.
     *
     * @return the path value.
     */
    public String path() {
        return this.path;
    }

    /**
     * Set the path property: The path of file/directory.
     *
     * @param path the path value to set.
     * @return the AssetPath object itself.
     */
    public AssetPath withPath(String path) {
        this.path = path;
        return this;
    }

    /**
     * Get the isDirectory property: Whether the path defines a directory or a single file.
     *
     * @return the isDirectory value.
     */
    public Boolean isDirectory() {
        return this.isDirectory;
    }

    /**
     * Set the isDirectory property: Whether the path defines a directory or a single file.
     *
     * @param isDirectory the isDirectory value to set.
     * @return the AssetPath object itself.
     */
    public AssetPath withIsDirectory(Boolean isDirectory) {
        this.isDirectory = isDirectory;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (path() == null) {
            throw logger
                .logExceptionAsError(new IllegalArgumentException("Missing required property path in model AssetPath"));
        }
    }
}
