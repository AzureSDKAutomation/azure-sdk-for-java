// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearningservices.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.machinelearningservices.models.AccountKeySection;
import com.azure.resourcemanager.machinelearningservices.models.CertificateSection;
import com.azure.resourcemanager.machinelearningservices.models.CredentialsType;
import com.azure.resourcemanager.machinelearningservices.models.SasSection;
import com.azure.resourcemanager.machinelearningservices.models.ServicePrincipalSection;
import com.azure.resourcemanager.machinelearningservices.models.SqlAdminSection;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The DatastoreCredentials model. */
@Fluent
public final class DatastoreCredentialsInner {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DatastoreCredentialsInner.class);

    /*
     * Credential type used to authentication with storage.
     */
    @JsonProperty(value = "type", required = true)
    private CredentialsType type;

    /*
     * The accountKey property.
     */
    @JsonProperty(value = "accountKey")
    private AccountKeySection accountKey;

    /*
     * The certificate property.
     */
    @JsonProperty(value = "certificate")
    private CertificateSection certificate;

    /*
     * The sas property.
     */
    @JsonProperty(value = "sas")
    private SasSection sas;

    /*
     * The servicePrincipal property.
     */
    @JsonProperty(value = "servicePrincipal")
    private ServicePrincipalSection servicePrincipal;

    /*
     * The sqlAdmin property.
     */
    @JsonProperty(value = "sqlAdmin")
    private SqlAdminSection sqlAdmin;

    /**
     * Get the type property: Credential type used to authentication with storage.
     *
     * @return the type value.
     */
    public CredentialsType type() {
        return this.type;
    }

    /**
     * Set the type property: Credential type used to authentication with storage.
     *
     * @param type the type value to set.
     * @return the DatastoreCredentialsInner object itself.
     */
    public DatastoreCredentialsInner withType(CredentialsType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the accountKey property: The accountKey property.
     *
     * @return the accountKey value.
     */
    public AccountKeySection accountKey() {
        return this.accountKey;
    }

    /**
     * Set the accountKey property: The accountKey property.
     *
     * @param accountKey the accountKey value to set.
     * @return the DatastoreCredentialsInner object itself.
     */
    public DatastoreCredentialsInner withAccountKey(AccountKeySection accountKey) {
        this.accountKey = accountKey;
        return this;
    }

    /**
     * Get the certificate property: The certificate property.
     *
     * @return the certificate value.
     */
    public CertificateSection certificate() {
        return this.certificate;
    }

    /**
     * Set the certificate property: The certificate property.
     *
     * @param certificate the certificate value to set.
     * @return the DatastoreCredentialsInner object itself.
     */
    public DatastoreCredentialsInner withCertificate(CertificateSection certificate) {
        this.certificate = certificate;
        return this;
    }

    /**
     * Get the sas property: The sas property.
     *
     * @return the sas value.
     */
    public SasSection sas() {
        return this.sas;
    }

    /**
     * Set the sas property: The sas property.
     *
     * @param sas the sas value to set.
     * @return the DatastoreCredentialsInner object itself.
     */
    public DatastoreCredentialsInner withSas(SasSection sas) {
        this.sas = sas;
        return this;
    }

    /**
     * Get the servicePrincipal property: The servicePrincipal property.
     *
     * @return the servicePrincipal value.
     */
    public ServicePrincipalSection servicePrincipal() {
        return this.servicePrincipal;
    }

    /**
     * Set the servicePrincipal property: The servicePrincipal property.
     *
     * @param servicePrincipal the servicePrincipal value to set.
     * @return the DatastoreCredentialsInner object itself.
     */
    public DatastoreCredentialsInner withServicePrincipal(ServicePrincipalSection servicePrincipal) {
        this.servicePrincipal = servicePrincipal;
        return this;
    }

    /**
     * Get the sqlAdmin property: The sqlAdmin property.
     *
     * @return the sqlAdmin value.
     */
    public SqlAdminSection sqlAdmin() {
        return this.sqlAdmin;
    }

    /**
     * Set the sqlAdmin property: The sqlAdmin property.
     *
     * @param sqlAdmin the sqlAdmin value to set.
     * @return the DatastoreCredentialsInner object itself.
     */
    public DatastoreCredentialsInner withSqlAdmin(SqlAdminSection sqlAdmin) {
        this.sqlAdmin = sqlAdmin;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (type() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property type in model DatastoreCredentialsInner"));
        }
        if (accountKey() != null) {
            accountKey().validate();
        }
        if (certificate() != null) {
            certificate().validate();
        }
        if (sas() != null) {
            sas().validate();
        }
        if (servicePrincipal() != null) {
            servicePrincipal().validate();
        }
        if (sqlAdmin() != null) {
            sqlAdmin().validate();
        }
    }
}
