// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearningservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** Model asset version details. */
@Fluent
public final class ModelVersion {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ModelVersion.class);

    /*
     * ARM resource ID of the datastore where the asset is located.
     */
    @JsonProperty(value = "datastoreId")
    private String datastoreId;

    /*
     * The asset description text.
     */
    @JsonProperty(value = "description")
    private String description;

    /*
     * Mapping of model flavors to their properties.
     */
    @JsonProperty(value = "flavors")
    private Map<String, FlavorData> flavors;

    /*
     * If the name version are system generated (anonymous registration).
     */
    @JsonProperty(value = "isAnonymous")
    private Boolean isAnonymous;

    /*
     * The path of the file/directory in the datastore.
     */
    @JsonProperty(value = "path", required = true)
    private String path;

    /*
     * The asset property dictionary.
     */
    @JsonProperty(value = "properties")
    private Map<String, String> properties;

    /*
     * Tag dictionary. Tags can be added, removed, and updated.
     */
    @JsonProperty(value = "tags")
    private Map<String, String> tags;

    /**
     * Get the datastoreId property: ARM resource ID of the datastore where the asset is located.
     *
     * @return the datastoreId value.
     */
    public String datastoreId() {
        return this.datastoreId;
    }

    /**
     * Set the datastoreId property: ARM resource ID of the datastore where the asset is located.
     *
     * @param datastoreId the datastoreId value to set.
     * @return the ModelVersion object itself.
     */
    public ModelVersion withDatastoreId(String datastoreId) {
        this.datastoreId = datastoreId;
        return this;
    }

    /**
     * Get the description property: The asset description text.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The asset description text.
     *
     * @param description the description value to set.
     * @return the ModelVersion object itself.
     */
    public ModelVersion withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the flavors property: Mapping of model flavors to their properties.
     *
     * @return the flavors value.
     */
    public Map<String, FlavorData> flavors() {
        return this.flavors;
    }

    /**
     * Set the flavors property: Mapping of model flavors to their properties.
     *
     * @param flavors the flavors value to set.
     * @return the ModelVersion object itself.
     */
    public ModelVersion withFlavors(Map<String, FlavorData> flavors) {
        this.flavors = flavors;
        return this;
    }

    /**
     * Get the isAnonymous property: If the name version are system generated (anonymous registration).
     *
     * @return the isAnonymous value.
     */
    public Boolean isAnonymous() {
        return this.isAnonymous;
    }

    /**
     * Set the isAnonymous property: If the name version are system generated (anonymous registration).
     *
     * @param isAnonymous the isAnonymous value to set.
     * @return the ModelVersion object itself.
     */
    public ModelVersion withIsAnonymous(Boolean isAnonymous) {
        this.isAnonymous = isAnonymous;
        return this;
    }

    /**
     * Get the path property: The path of the file/directory in the datastore.
     *
     * @return the path value.
     */
    public String path() {
        return this.path;
    }

    /**
     * Set the path property: The path of the file/directory in the datastore.
     *
     * @param path the path value to set.
     * @return the ModelVersion object itself.
     */
    public ModelVersion withPath(String path) {
        this.path = path;
        return this;
    }

    /**
     * Get the properties property: The asset property dictionary.
     *
     * @return the properties value.
     */
    public Map<String, String> properties() {
        return this.properties;
    }

    /**
     * Set the properties property: The asset property dictionary.
     *
     * @param properties the properties value to set.
     * @return the ModelVersion object itself.
     */
    public ModelVersion withProperties(Map<String, String> properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the tags property: Tag dictionary. Tags can be added, removed, and updated.
     *
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Tag dictionary. Tags can be added, removed, and updated.
     *
     * @param tags the tags value to set.
     * @return the ModelVersion object itself.
     */
    public ModelVersion withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (flavors() != null) {
            flavors()
                .values()
                .forEach(
                    e -> {
                        if (e != null) {
                            e.validate();
                        }
                    });
        }
        if (path() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property path in model ModelVersion"));
        }
    }
}
