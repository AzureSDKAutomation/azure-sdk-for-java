// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearningservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** class for all hyperparameter sampling algorithms. */
@Fluent
public final class ParameterSamplingConfiguration {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ParameterSamplingConfiguration.class);

    /*
     * A dictionary containing each parameter and its distribution. The
     * dictionary key is the name of the parameter
     */
    @JsonProperty(value = "parameterSpace", required = true)
    private Object parameterSpace;

    /*
     * Type of the hyperparameter sampling algorithms
     */
    @JsonProperty(value = "samplingType", required = true)
    private ParameterSamplingType samplingType;

    /**
     * Get the parameterSpace property: A dictionary containing each parameter and its distribution. The dictionary key
     * is the name of the parameter.
     *
     * @return the parameterSpace value.
     */
    public Object parameterSpace() {
        return this.parameterSpace;
    }

    /**
     * Set the parameterSpace property: A dictionary containing each parameter and its distribution. The dictionary key
     * is the name of the parameter.
     *
     * @param parameterSpace the parameterSpace value to set.
     * @return the ParameterSamplingConfiguration object itself.
     */
    public ParameterSamplingConfiguration withParameterSpace(Object parameterSpace) {
        this.parameterSpace = parameterSpace;
        return this;
    }

    /**
     * Get the samplingType property: Type of the hyperparameter sampling algorithms.
     *
     * @return the samplingType value.
     */
    public ParameterSamplingType samplingType() {
        return this.samplingType;
    }

    /**
     * Set the samplingType property: Type of the hyperparameter sampling algorithms.
     *
     * @param samplingType the samplingType value to set.
     * @return the ParameterSamplingConfiguration object itself.
     */
    public ParameterSamplingConfiguration withSamplingType(ParameterSamplingType samplingType) {
        this.samplingType = samplingType;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (parameterSpace() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property parameterSpace in model ParameterSamplingConfiguration"));
        }
        if (samplingType() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property samplingType in model ParameterSamplingConfiguration"));
        }
    }
}
