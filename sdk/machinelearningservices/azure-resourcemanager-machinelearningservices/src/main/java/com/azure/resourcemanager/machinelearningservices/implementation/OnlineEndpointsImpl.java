// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearningservices.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.machinelearningservices.fluent.OnlineEndpointsClient;
import com.azure.resourcemanager.machinelearningservices.fluent.models.EndpointAuthKeysInner;
import com.azure.resourcemanager.machinelearningservices.fluent.models.EndpointAuthTokenInner;
import com.azure.resourcemanager.machinelearningservices.fluent.models.OnlineEndpointTrackedResourceInner;
import com.azure.resourcemanager.machinelearningservices.models.EndpointAuthKeys;
import com.azure.resourcemanager.machinelearningservices.models.EndpointAuthToken;
import com.azure.resourcemanager.machinelearningservices.models.EndpointComputeType;
import com.azure.resourcemanager.machinelearningservices.models.OnlineEndpointTrackedResource;
import com.azure.resourcemanager.machinelearningservices.models.OnlineEndpoints;
import com.azure.resourcemanager.machinelearningservices.models.OrderString;
import com.azure.resourcemanager.machinelearningservices.models.RegenerateEndpointKeysRequest;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class OnlineEndpointsImpl implements OnlineEndpoints {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(OnlineEndpointsImpl.class);

    private final OnlineEndpointsClient innerClient;

    private final com.azure.resourcemanager.machinelearningservices.MachineLearningServicesManager serviceManager;

    public OnlineEndpointsImpl(
        OnlineEndpointsClient innerClient,
        com.azure.resourcemanager.machinelearningservices.MachineLearningServicesManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<OnlineEndpointTrackedResource> list(String resourceGroupName, String workspaceName) {
        PagedIterable<OnlineEndpointTrackedResourceInner> inner =
            this.serviceClient().list(resourceGroupName, workspaceName);
        return Utils.mapPage(inner, inner1 -> new OnlineEndpointTrackedResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<OnlineEndpointTrackedResource> list(
        String resourceGroupName,
        String workspaceName,
        String name,
        Integer count,
        EndpointComputeType computeType,
        String skip,
        String tags,
        String properties,
        OrderString orderBy,
        Context context) {
        PagedIterable<OnlineEndpointTrackedResourceInner> inner =
            this
                .serviceClient()
                .list(
                    resourceGroupName,
                    workspaceName,
                    name,
                    count,
                    computeType,
                    skip,
                    tags,
                    properties,
                    orderBy,
                    context);
        return Utils.mapPage(inner, inner1 -> new OnlineEndpointTrackedResourceImpl(inner1, this.manager()));
    }

    public void delete(String endpointName, String resourceGroupName, String workspaceName) {
        this.serviceClient().delete(endpointName, resourceGroupName, workspaceName);
    }

    public void delete(String endpointName, String resourceGroupName, String workspaceName, Context context) {
        this.serviceClient().delete(endpointName, resourceGroupName, workspaceName, context);
    }

    public OnlineEndpointTrackedResource get(String endpointName, String resourceGroupName, String workspaceName) {
        OnlineEndpointTrackedResourceInner inner =
            this.serviceClient().get(endpointName, resourceGroupName, workspaceName);
        if (inner != null) {
            return new OnlineEndpointTrackedResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<OnlineEndpointTrackedResource> getWithResponse(
        String endpointName, String resourceGroupName, String workspaceName, Context context) {
        Response<OnlineEndpointTrackedResourceInner> inner =
            this.serviceClient().getWithResponse(endpointName, resourceGroupName, workspaceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new OnlineEndpointTrackedResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public EndpointAuthKeys listKeys(String endpointName, String resourceGroupName, String workspaceName) {
        EndpointAuthKeysInner inner = this.serviceClient().listKeys(endpointName, resourceGroupName, workspaceName);
        if (inner != null) {
            return new EndpointAuthKeysImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<EndpointAuthKeys> listKeysWithResponse(
        String endpointName, String resourceGroupName, String workspaceName, Context context) {
        Response<EndpointAuthKeysInner> inner =
            this.serviceClient().listKeysWithResponse(endpointName, resourceGroupName, workspaceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new EndpointAuthKeysImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void regenerateKeys(
        String endpointName, String resourceGroupName, String workspaceName, RegenerateEndpointKeysRequest body) {
        this.serviceClient().regenerateKeys(endpointName, resourceGroupName, workspaceName, body);
    }

    public void regenerateKeys(
        String endpointName,
        String resourceGroupName,
        String workspaceName,
        RegenerateEndpointKeysRequest body,
        Context context) {
        this.serviceClient().regenerateKeys(endpointName, resourceGroupName, workspaceName, body, context);
    }

    public EndpointAuthToken getToken(String endpointName, String resourceGroupName, String workspaceName) {
        EndpointAuthTokenInner inner = this.serviceClient().getToken(endpointName, resourceGroupName, workspaceName);
        if (inner != null) {
            return new EndpointAuthTokenImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<EndpointAuthToken> getTokenWithResponse(
        String endpointName, String resourceGroupName, String workspaceName, Context context) {
        Response<EndpointAuthTokenInner> inner =
            this.serviceClient().getTokenWithResponse(endpointName, resourceGroupName, workspaceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new EndpointAuthTokenImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public OnlineEndpointTrackedResource getById(String id) {
        String endpointName = Utils.getValueFromIdByName(id, "onlineEndpoints");
        if (endpointName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'onlineEndpoints'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        return this.getWithResponse(endpointName, resourceGroupName, workspaceName, Context.NONE).getValue();
    }

    public Response<OnlineEndpointTrackedResource> getByIdWithResponse(String id, Context context) {
        String endpointName = Utils.getValueFromIdByName(id, "onlineEndpoints");
        if (endpointName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'onlineEndpoints'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        return this.getWithResponse(endpointName, resourceGroupName, workspaceName, context);
    }

    public void deleteById(String id) {
        String endpointName = Utils.getValueFromIdByName(id, "onlineEndpoints");
        if (endpointName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'onlineEndpoints'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        this.delete(endpointName, resourceGroupName, workspaceName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String endpointName = Utils.getValueFromIdByName(id, "onlineEndpoints");
        if (endpointName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'onlineEndpoints'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        this.delete(endpointName, resourceGroupName, workspaceName, context);
    }

    private OnlineEndpointsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.machinelearningservices.MachineLearningServicesManager manager() {
        return this.serviceManager;
    }

    public OnlineEndpointTrackedResourceImpl define(String name) {
        return new OnlineEndpointTrackedResourceImpl(name, this.manager());
    }
}
