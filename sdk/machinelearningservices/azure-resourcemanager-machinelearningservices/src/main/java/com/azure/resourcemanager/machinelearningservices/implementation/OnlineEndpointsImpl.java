// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearningservices.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.machinelearningservices.MachinelearningservicesManager;
import com.azure.resourcemanager.machinelearningservices.fluent.OnlineEndpointsClient;
import com.azure.resourcemanager.machinelearningservices.fluent.models.AuthKeysInner;
import com.azure.resourcemanager.machinelearningservices.fluent.models.AuthTokenInner;
import com.azure.resourcemanager.machinelearningservices.fluent.models.OnlineEndpointPropertiesTrackedResourceInner;
import com.azure.resourcemanager.machinelearningservices.fluent.models.OnlineEndpointPropertiesTrackedResourceLongRunningOperationResponseInner;
import com.azure.resourcemanager.machinelearningservices.models.AuthKeys;
import com.azure.resourcemanager.machinelearningservices.models.AuthToken;
import com.azure.resourcemanager.machinelearningservices.models.EndpointComputeType;
import com.azure.resourcemanager.machinelearningservices.models.OnlineEndpointPropertiesTrackedResource;
import com.azure.resourcemanager.machinelearningservices.models.OnlineEndpointPropertiesTrackedResourceLongRunningOperationResponse;
import com.azure.resourcemanager.machinelearningservices.models.OnlineEndpoints;
import com.azure.resourcemanager.machinelearningservices.models.OrderString;
import com.azure.resourcemanager.machinelearningservices.models.RegenerateEndpointKeysRequest;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class OnlineEndpointsImpl implements OnlineEndpoints {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(OnlineEndpointsImpl.class);

    private final OnlineEndpointsClient innerClient;

    private final MachinelearningservicesManager serviceManager;

    public OnlineEndpointsImpl(OnlineEndpointsClient innerClient, MachinelearningservicesManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<OnlineEndpointPropertiesTrackedResource> list(String resourceGroupName, String workspaceName) {
        PagedIterable<OnlineEndpointPropertiesTrackedResourceInner> inner =
            this.serviceClient().list(resourceGroupName, workspaceName);
        return inner.mapPage(inner1 -> new OnlineEndpointPropertiesTrackedResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<OnlineEndpointPropertiesTrackedResource> list(
        String resourceGroupName,
        String workspaceName,
        String name,
        Integer count,
        EndpointComputeType computeType,
        String skiptoken,
        String tags,
        String properties,
        OrderString orderBy,
        Context context) {
        PagedIterable<OnlineEndpointPropertiesTrackedResourceInner> inner =
            this
                .serviceClient()
                .list(
                    resourceGroupName,
                    workspaceName,
                    name,
                    count,
                    computeType,
                    skiptoken,
                    tags,
                    properties,
                    orderBy,
                    context);
        return inner.mapPage(inner1 -> new OnlineEndpointPropertiesTrackedResourceImpl(inner1, this.manager()));
    }

    public void delete(String endpointName, String resourceGroupName, String workspaceName) {
        this.serviceClient().delete(endpointName, resourceGroupName, workspaceName);
    }

    public Response<Void> deleteWithResponse(
        String endpointName, String resourceGroupName, String workspaceName, Context context) {
        return this.serviceClient().deleteWithResponse(endpointName, resourceGroupName, workspaceName, context);
    }

    public OnlineEndpointPropertiesTrackedResource get(
        String endpointName, String resourceGroupName, String workspaceName) {
        OnlineEndpointPropertiesTrackedResourceInner inner =
            this.serviceClient().get(endpointName, resourceGroupName, workspaceName);
        if (inner != null) {
            return new OnlineEndpointPropertiesTrackedResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<OnlineEndpointPropertiesTrackedResource> getWithResponse(
        String endpointName, String resourceGroupName, String workspaceName, Context context) {
        Response<OnlineEndpointPropertiesTrackedResourceInner> inner =
            this.serviceClient().getWithResponse(endpointName, resourceGroupName, workspaceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new OnlineEndpointPropertiesTrackedResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public OnlineEndpointPropertiesTrackedResourceLongRunningOperationResponse regenerateKeys(
        String endpointName, String resourceGroupName, String workspaceName) {
        OnlineEndpointPropertiesTrackedResourceLongRunningOperationResponseInner inner =
            this.serviceClient().regenerateKeys(endpointName, resourceGroupName, workspaceName);
        if (inner != null) {
            return new OnlineEndpointPropertiesTrackedResourceLongRunningOperationResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<OnlineEndpointPropertiesTrackedResourceLongRunningOperationResponse> regenerateKeysWithResponse(
        String endpointName,
        String resourceGroupName,
        String workspaceName,
        RegenerateEndpointKeysRequest body,
        Context context) {
        Response<OnlineEndpointPropertiesTrackedResourceLongRunningOperationResponseInner> inner =
            this
                .serviceClient()
                .regenerateKeysWithResponse(endpointName, resourceGroupName, workspaceName, body, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new OnlineEndpointPropertiesTrackedResourceLongRunningOperationResponseImpl(
                    inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AuthKeys listKeys(String endpointName, String resourceGroupName, String workspaceName) {
        AuthKeysInner inner = this.serviceClient().listKeys(endpointName, resourceGroupName, workspaceName);
        if (inner != null) {
            return new AuthKeysImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<AuthKeys> listKeysWithResponse(
        String endpointName, String resourceGroupName, String workspaceName, Context context) {
        Response<AuthKeysInner> inner =
            this.serviceClient().listKeysWithResponse(endpointName, resourceGroupName, workspaceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AuthKeysImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AuthToken getToken(String endpointName, String resourceGroupName, String workspaceName) {
        AuthTokenInner inner = this.serviceClient().getToken(endpointName, resourceGroupName, workspaceName);
        if (inner != null) {
            return new AuthTokenImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<AuthToken> getTokenWithResponse(
        String endpointName, String resourceGroupName, String workspaceName, Context context) {
        Response<AuthTokenInner> inner =
            this.serviceClient().getTokenWithResponse(endpointName, resourceGroupName, workspaceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AuthTokenImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void poll(String endpointName, String operationId, String resourceGroupName, String workspaceName) {
        this.serviceClient().poll(endpointName, operationId, resourceGroupName, workspaceName);
    }

    public Response<Void> pollWithResponse(
        String endpointName, String operationId, String resourceGroupName, String workspaceName, Context context) {
        return this
            .serviceClient()
            .pollWithResponse(endpointName, operationId, resourceGroupName, workspaceName, context);
    }

    public OnlineEndpointPropertiesTrackedResource getById(String id) {
        String endpointName = Utils.getValueFromIdByName(id, "onlineEndpoints");
        if (endpointName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'onlineEndpoints'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        return this.getWithResponse(endpointName, resourceGroupName, workspaceName, Context.NONE).getValue();
    }

    public Response<OnlineEndpointPropertiesTrackedResource> getByIdWithResponse(String id, Context context) {
        String endpointName = Utils.getValueFromIdByName(id, "onlineEndpoints");
        if (endpointName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'onlineEndpoints'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        return this.getWithResponse(endpointName, resourceGroupName, workspaceName, context);
    }

    public void deleteById(String id) {
        String endpointName = Utils.getValueFromIdByName(id, "onlineEndpoints");
        if (endpointName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'onlineEndpoints'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        this.deleteWithResponse(endpointName, resourceGroupName, workspaceName, Context.NONE).getValue();
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String endpointName = Utils.getValueFromIdByName(id, "onlineEndpoints");
        if (endpointName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'onlineEndpoints'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        return this.deleteWithResponse(endpointName, resourceGroupName, workspaceName, context);
    }

    private OnlineEndpointsClient serviceClient() {
        return this.innerClient;
    }

    private MachinelearningservicesManager manager() {
        return this.serviceManager;
    }

    public OnlineEndpointPropertiesTrackedResourceImpl define(String name) {
        return new OnlineEndpointPropertiesTrackedResourceImpl(name, this.manager());
    }
}
