// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearningservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.UUID;

/** Labeling job definition. */
@Fluent
public final class LabelingJob {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(LabelingJob.class);

    /*
     * Created time of the job in UTC timezone.
     */
    @JsonProperty(value = "createdTimeUtc", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime createdTimeUtc;

    /*
     * Configuration of dataset used in the job.
     */
    @JsonProperty(value = "datasetConfiguration")
    private LabelingDatasetConfiguration datasetConfiguration;

    /*
     * The asset description text.
     */
    @JsonProperty(value = "description")
    private String description;

    /*
     * List of JobEndpoints.
     * For local jobs, a job endpoint will have an endpoint value of
     * FileStreamObject.
     */
    @JsonProperty(value = "interactionEndpoints", access = JsonProperty.Access.WRITE_ONLY)
    private Map<String, JobEndpoint> interactionEndpoints;

    /*
     * Labeling instructions of the job.
     */
    @JsonProperty(value = "jobInstructions")
    private LabelingJobInstructions jobInstructions;

    /*
     * Specifies the type of job. This field should always be set to
     * "Labeling".
     */
    @JsonProperty(value = "jobType", required = true)
    private JobType jobType;

    /*
     * Label categories of the job.
     */
    @JsonProperty(value = "labelCategories")
    private Map<String, LabelCategory> labelCategories;

    /*
     * Media type specific properties in the job.
     */
    @JsonProperty(value = "labelingJobMediaProperties")
    private LabelingJobMediaProperties labelingJobMediaProperties;

    /*
     * Configuration of MLAssist feature in the job.
     */
    @JsonProperty(value = "mlAssistConfiguration")
    private MLAssistConfiguration mlAssistConfiguration;

    /*
     * Progress metrics of the job.
     */
    @JsonProperty(value = "progressMetrics", access = JsonProperty.Access.WRITE_ONLY)
    private ProgressMetrics progressMetrics;

    /*
     * Internal id of the job(Previously called project).
     */
    @JsonProperty(value = "projectId", access = JsonProperty.Access.WRITE_ONLY)
    private UUID projectId;

    /*
     * The asset property dictionary.
     */
    @JsonProperty(value = "properties")
    private Map<String, String> properties;

    /*
     * The provisioningState property.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private JobProvisioningState provisioningState;

    /*
     * Status of the job.
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private JobStatus status;

    /*
     * Status messages of the job.
     */
    @JsonProperty(value = "statusMessages", access = JsonProperty.Access.WRITE_ONLY)
    private List<StatusMessage> statusMessages;

    /*
     * Tag dictionary. Tags can be added, removed, and updated.
     */
    @JsonProperty(value = "tags")
    private Map<String, String> tags;

    /**
     * Get the createdTimeUtc property: Created time of the job in UTC timezone.
     *
     * @return the createdTimeUtc value.
     */
    public OffsetDateTime createdTimeUtc() {
        return this.createdTimeUtc;
    }

    /**
     * Get the datasetConfiguration property: Configuration of dataset used in the job.
     *
     * @return the datasetConfiguration value.
     */
    public LabelingDatasetConfiguration datasetConfiguration() {
        return this.datasetConfiguration;
    }

    /**
     * Set the datasetConfiguration property: Configuration of dataset used in the job.
     *
     * @param datasetConfiguration the datasetConfiguration value to set.
     * @return the LabelingJob object itself.
     */
    public LabelingJob withDatasetConfiguration(LabelingDatasetConfiguration datasetConfiguration) {
        this.datasetConfiguration = datasetConfiguration;
        return this;
    }

    /**
     * Get the description property: The asset description text.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The asset description text.
     *
     * @param description the description value to set.
     * @return the LabelingJob object itself.
     */
    public LabelingJob withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the interactionEndpoints property: List of JobEndpoints. For local jobs, a job endpoint will have an endpoint
     * value of FileStreamObject.
     *
     * @return the interactionEndpoints value.
     */
    public Map<String, JobEndpoint> interactionEndpoints() {
        return this.interactionEndpoints;
    }

    /**
     * Get the jobInstructions property: Labeling instructions of the job.
     *
     * @return the jobInstructions value.
     */
    public LabelingJobInstructions jobInstructions() {
        return this.jobInstructions;
    }

    /**
     * Set the jobInstructions property: Labeling instructions of the job.
     *
     * @param jobInstructions the jobInstructions value to set.
     * @return the LabelingJob object itself.
     */
    public LabelingJob withJobInstructions(LabelingJobInstructions jobInstructions) {
        this.jobInstructions = jobInstructions;
        return this;
    }

    /**
     * Get the jobType property: Specifies the type of job. This field should always be set to "Labeling".
     *
     * @return the jobType value.
     */
    public JobType jobType() {
        return this.jobType;
    }

    /**
     * Set the jobType property: Specifies the type of job. This field should always be set to "Labeling".
     *
     * @param jobType the jobType value to set.
     * @return the LabelingJob object itself.
     */
    public LabelingJob withJobType(JobType jobType) {
        this.jobType = jobType;
        return this;
    }

    /**
     * Get the labelCategories property: Label categories of the job.
     *
     * @return the labelCategories value.
     */
    public Map<String, LabelCategory> labelCategories() {
        return this.labelCategories;
    }

    /**
     * Set the labelCategories property: Label categories of the job.
     *
     * @param labelCategories the labelCategories value to set.
     * @return the LabelingJob object itself.
     */
    public LabelingJob withLabelCategories(Map<String, LabelCategory> labelCategories) {
        this.labelCategories = labelCategories;
        return this;
    }

    /**
     * Get the labelingJobMediaProperties property: Media type specific properties in the job.
     *
     * @return the labelingJobMediaProperties value.
     */
    public LabelingJobMediaProperties labelingJobMediaProperties() {
        return this.labelingJobMediaProperties;
    }

    /**
     * Set the labelingJobMediaProperties property: Media type specific properties in the job.
     *
     * @param labelingJobMediaProperties the labelingJobMediaProperties value to set.
     * @return the LabelingJob object itself.
     */
    public LabelingJob withLabelingJobMediaProperties(LabelingJobMediaProperties labelingJobMediaProperties) {
        this.labelingJobMediaProperties = labelingJobMediaProperties;
        return this;
    }

    /**
     * Get the mlAssistConfiguration property: Configuration of MLAssist feature in the job.
     *
     * @return the mlAssistConfiguration value.
     */
    public MLAssistConfiguration mlAssistConfiguration() {
        return this.mlAssistConfiguration;
    }

    /**
     * Set the mlAssistConfiguration property: Configuration of MLAssist feature in the job.
     *
     * @param mlAssistConfiguration the mlAssistConfiguration value to set.
     * @return the LabelingJob object itself.
     */
    public LabelingJob withMlAssistConfiguration(MLAssistConfiguration mlAssistConfiguration) {
        this.mlAssistConfiguration = mlAssistConfiguration;
        return this;
    }

    /**
     * Get the progressMetrics property: Progress metrics of the job.
     *
     * @return the progressMetrics value.
     */
    public ProgressMetrics progressMetrics() {
        return this.progressMetrics;
    }

    /**
     * Get the projectId property: Internal id of the job(Previously called project).
     *
     * @return the projectId value.
     */
    public UUID projectId() {
        return this.projectId;
    }

    /**
     * Get the properties property: The asset property dictionary.
     *
     * @return the properties value.
     */
    public Map<String, String> properties() {
        return this.properties;
    }

    /**
     * Set the properties property: The asset property dictionary.
     *
     * @param properties the properties value to set.
     * @return the LabelingJob object itself.
     */
    public LabelingJob withProperties(Map<String, String> properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioningState property.
     *
     * @return the provisioningState value.
     */
    public JobProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the status property: Status of the job.
     *
     * @return the status value.
     */
    public JobStatus status() {
        return this.status;
    }

    /**
     * Get the statusMessages property: Status messages of the job.
     *
     * @return the statusMessages value.
     */
    public List<StatusMessage> statusMessages() {
        return this.statusMessages;
    }

    /**
     * Get the tags property: Tag dictionary. Tags can be added, removed, and updated.
     *
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Tag dictionary. Tags can be added, removed, and updated.
     *
     * @param tags the tags value to set.
     * @return the LabelingJob object itself.
     */
    public LabelingJob withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (datasetConfiguration() != null) {
            datasetConfiguration().validate();
        }
        if (interactionEndpoints() != null) {
            interactionEndpoints()
                .values()
                .forEach(
                    e -> {
                        if (e != null) {
                            e.validate();
                        }
                    });
        }
        if (jobInstructions() != null) {
            jobInstructions().validate();
        }
        if (jobType() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property jobType in model LabelingJob"));
        }
        if (labelCategories() != null) {
            labelCategories()
                .values()
                .forEach(
                    e -> {
                        if (e != null) {
                            e.validate();
                        }
                    });
        }
        if (labelingJobMediaProperties() != null) {
            labelingJobMediaProperties().validate();
        }
        if (mlAssistConfiguration() != null) {
            mlAssistConfiguration().validate();
        }
        if (progressMetrics() != null) {
            progressMetrics().validate();
        }
        if (statusMessages() != null) {
            statusMessages().forEach(e -> e.validate());
        }
    }
}
