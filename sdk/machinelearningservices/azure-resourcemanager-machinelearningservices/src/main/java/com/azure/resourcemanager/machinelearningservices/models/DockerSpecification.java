// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearningservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/** Configuration settings for Docker. */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    include = JsonTypeInfo.As.PROPERTY,
    property = "dockerSpecificationType",
    defaultImpl = DockerSpecification.class)
@JsonTypeName("DockerSpecification")
@JsonSubTypes({
    @JsonSubTypes.Type(name = "Build", value = DockerBuild.class),
    @JsonSubTypes.Type(name = "Image", value = DockerImage.class)
})
@Fluent
public class DockerSpecification {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DockerSpecification.class);

    /*
     * The platform information of the docker image.
     */
    @JsonProperty(value = "platform")
    private DockerImagePlatform platform;

    /**
     * Get the platform property: The platform information of the docker image.
     *
     * @return the platform value.
     */
    public DockerImagePlatform platform() {
        return this.platform;
    }

    /**
     * Set the platform property: The platform information of the docker image.
     *
     * @param platform the platform value to set.
     * @return the DockerSpecification object itself.
     */
    public DockerSpecification withPlatform(DockerImagePlatform platform) {
        this.platform = platform;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (platform() != null) {
            platform().validate();
        }
    }
}
