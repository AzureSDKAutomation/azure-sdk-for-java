// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearningservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.Map;

/** The OnlineDeployment model. */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    include = JsonTypeInfo.As.PROPERTY,
    property = "endpointComputeType",
    defaultImpl = OnlineDeployment.class)
@JsonTypeName("OnlineDeployment")
@JsonSubTypes({
    @JsonSubTypes.Type(name = "K8S", value = K8SOnlineDeployment.class),
    @JsonSubTypes.Type(name = "Managed", value = ManagedOnlineDeployment.class)
})
@Fluent
public class OnlineDeployment {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(OnlineDeployment.class);

    /*
     * If true, enables Application Insights logging.
     */
    @JsonProperty(value = "appInsightsEnabled")
    private Boolean appInsightsEnabled;

    /*
     * Code configuration for the endpoint deployment.
     */
    @JsonProperty(value = "codeConfiguration")
    private CodeConfiguration codeConfiguration;

    /*
     * Description of the endpoint deployment.
     */
    @JsonProperty(value = "description")
    private String description;

    /*
     * ARM resource ID of the environment specification for the endpoint
     * deployment.
     */
    @JsonProperty(value = "environmentId")
    private String environmentId;

    /*
     * Environment variables configuration for the deployment.
     */
    @JsonProperty(value = "environmentVariables")
    private Map<String, String> environmentVariables;

    /*
     * The livenessProbe property.
     */
    @JsonProperty(value = "livenessProbe")
    private ProbeSettings livenessProbe;

    /*
     * Reference to the model asset for the endpoint deployment.
     */
    @JsonProperty(value = "model")
    private AssetReferenceBase model;

    /*
     * Property dictionary. Properties can be added, but not removed or
     * altered.
     */
    @JsonProperty(value = "properties")
    private Map<String, String> properties;

    /*
     * Provisioning state for the endpoint deployment.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private DeploymentProvisioningState provisioningState;

    /*
     * The requestSettings property.
     */
    @JsonProperty(value = "requestSettings")
    private OnlineRequestSettings requestSettings;

    /*
     * The scaleSettings property.
     */
    @JsonProperty(value = "scaleSettings")
    private OnlineScaleSettings scaleSettings;

    /**
     * Get the appInsightsEnabled property: If true, enables Application Insights logging.
     *
     * @return the appInsightsEnabled value.
     */
    public Boolean appInsightsEnabled() {
        return this.appInsightsEnabled;
    }

    /**
     * Set the appInsightsEnabled property: If true, enables Application Insights logging.
     *
     * @param appInsightsEnabled the appInsightsEnabled value to set.
     * @return the OnlineDeployment object itself.
     */
    public OnlineDeployment withAppInsightsEnabled(Boolean appInsightsEnabled) {
        this.appInsightsEnabled = appInsightsEnabled;
        return this;
    }

    /**
     * Get the codeConfiguration property: Code configuration for the endpoint deployment.
     *
     * @return the codeConfiguration value.
     */
    public CodeConfiguration codeConfiguration() {
        return this.codeConfiguration;
    }

    /**
     * Set the codeConfiguration property: Code configuration for the endpoint deployment.
     *
     * @param codeConfiguration the codeConfiguration value to set.
     * @return the OnlineDeployment object itself.
     */
    public OnlineDeployment withCodeConfiguration(CodeConfiguration codeConfiguration) {
        this.codeConfiguration = codeConfiguration;
        return this;
    }

    /**
     * Get the description property: Description of the endpoint deployment.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description of the endpoint deployment.
     *
     * @param description the description value to set.
     * @return the OnlineDeployment object itself.
     */
    public OnlineDeployment withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the environmentId property: ARM resource ID of the environment specification for the endpoint deployment.
     *
     * @return the environmentId value.
     */
    public String environmentId() {
        return this.environmentId;
    }

    /**
     * Set the environmentId property: ARM resource ID of the environment specification for the endpoint deployment.
     *
     * @param environmentId the environmentId value to set.
     * @return the OnlineDeployment object itself.
     */
    public OnlineDeployment withEnvironmentId(String environmentId) {
        this.environmentId = environmentId;
        return this;
    }

    /**
     * Get the environmentVariables property: Environment variables configuration for the deployment.
     *
     * @return the environmentVariables value.
     */
    public Map<String, String> environmentVariables() {
        return this.environmentVariables;
    }

    /**
     * Set the environmentVariables property: Environment variables configuration for the deployment.
     *
     * @param environmentVariables the environmentVariables value to set.
     * @return the OnlineDeployment object itself.
     */
    public OnlineDeployment withEnvironmentVariables(Map<String, String> environmentVariables) {
        this.environmentVariables = environmentVariables;
        return this;
    }

    /**
     * Get the livenessProbe property: The livenessProbe property.
     *
     * @return the livenessProbe value.
     */
    public ProbeSettings livenessProbe() {
        return this.livenessProbe;
    }

    /**
     * Set the livenessProbe property: The livenessProbe property.
     *
     * @param livenessProbe the livenessProbe value to set.
     * @return the OnlineDeployment object itself.
     */
    public OnlineDeployment withLivenessProbe(ProbeSettings livenessProbe) {
        this.livenessProbe = livenessProbe;
        return this;
    }

    /**
     * Get the model property: Reference to the model asset for the endpoint deployment.
     *
     * @return the model value.
     */
    public AssetReferenceBase model() {
        return this.model;
    }

    /**
     * Set the model property: Reference to the model asset for the endpoint deployment.
     *
     * @param model the model value to set.
     * @return the OnlineDeployment object itself.
     */
    public OnlineDeployment withModel(AssetReferenceBase model) {
        this.model = model;
        return this;
    }

    /**
     * Get the properties property: Property dictionary. Properties can be added, but not removed or altered.
     *
     * @return the properties value.
     */
    public Map<String, String> properties() {
        return this.properties;
    }

    /**
     * Set the properties property: Property dictionary. Properties can be added, but not removed or altered.
     *
     * @param properties the properties value to set.
     * @return the OnlineDeployment object itself.
     */
    public OnlineDeployment withProperties(Map<String, String> properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state for the endpoint deployment.
     *
     * @return the provisioningState value.
     */
    public DeploymentProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the requestSettings property: The requestSettings property.
     *
     * @return the requestSettings value.
     */
    public OnlineRequestSettings requestSettings() {
        return this.requestSettings;
    }

    /**
     * Set the requestSettings property: The requestSettings property.
     *
     * @param requestSettings the requestSettings value to set.
     * @return the OnlineDeployment object itself.
     */
    public OnlineDeployment withRequestSettings(OnlineRequestSettings requestSettings) {
        this.requestSettings = requestSettings;
        return this;
    }

    /**
     * Get the scaleSettings property: The scaleSettings property.
     *
     * @return the scaleSettings value.
     */
    public OnlineScaleSettings scaleSettings() {
        return this.scaleSettings;
    }

    /**
     * Set the scaleSettings property: The scaleSettings property.
     *
     * @param scaleSettings the scaleSettings value to set.
     * @return the OnlineDeployment object itself.
     */
    public OnlineDeployment withScaleSettings(OnlineScaleSettings scaleSettings) {
        this.scaleSettings = scaleSettings;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (codeConfiguration() != null) {
            codeConfiguration().validate();
        }
        if (livenessProbe() != null) {
            livenessProbe().validate();
        }
        if (model() != null) {
            model().validate();
        }
        if (requestSettings() != null) {
            requestSettings().validate();
        }
        if (scaleSettings() != null) {
            scaleSettings().validate();
        }
    }
}
