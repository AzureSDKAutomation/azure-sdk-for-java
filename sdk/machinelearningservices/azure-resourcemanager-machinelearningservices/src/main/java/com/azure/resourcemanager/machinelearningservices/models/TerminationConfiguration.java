// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearningservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The TerminationConfiguration model. */
@Fluent
public final class TerminationConfiguration {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(TerminationConfiguration.class);

    /*
     * The maxTotalRuns property.
     */
    @JsonProperty(value = "maxTotalRuns")
    private Integer maxTotalRuns;

    /*
     * The maxConcurrentRuns property.
     */
    @JsonProperty(value = "maxConcurrentRuns")
    private Integer maxConcurrentRuns;

    /*
     * The maxDurationMinutes property.
     */
    @JsonProperty(value = "maxDurationMinutes")
    private Integer maxDurationMinutes;

    /*
     * Early termination policies enable canceling poor-performing runs before
     * they complete
     */
    @JsonProperty(value = "earlyTerminationPolicyConfiguration")
    private EarlyTerminationPolicyConfiguration earlyTerminationPolicyConfiguration;

    /**
     * Get the maxTotalRuns property: The maxTotalRuns property.
     *
     * @return the maxTotalRuns value.
     */
    public Integer maxTotalRuns() {
        return this.maxTotalRuns;
    }

    /**
     * Set the maxTotalRuns property: The maxTotalRuns property.
     *
     * @param maxTotalRuns the maxTotalRuns value to set.
     * @return the TerminationConfiguration object itself.
     */
    public TerminationConfiguration withMaxTotalRuns(Integer maxTotalRuns) {
        this.maxTotalRuns = maxTotalRuns;
        return this;
    }

    /**
     * Get the maxConcurrentRuns property: The maxConcurrentRuns property.
     *
     * @return the maxConcurrentRuns value.
     */
    public Integer maxConcurrentRuns() {
        return this.maxConcurrentRuns;
    }

    /**
     * Set the maxConcurrentRuns property: The maxConcurrentRuns property.
     *
     * @param maxConcurrentRuns the maxConcurrentRuns value to set.
     * @return the TerminationConfiguration object itself.
     */
    public TerminationConfiguration withMaxConcurrentRuns(Integer maxConcurrentRuns) {
        this.maxConcurrentRuns = maxConcurrentRuns;
        return this;
    }

    /**
     * Get the maxDurationMinutes property: The maxDurationMinutes property.
     *
     * @return the maxDurationMinutes value.
     */
    public Integer maxDurationMinutes() {
        return this.maxDurationMinutes;
    }

    /**
     * Set the maxDurationMinutes property: The maxDurationMinutes property.
     *
     * @param maxDurationMinutes the maxDurationMinutes value to set.
     * @return the TerminationConfiguration object itself.
     */
    public TerminationConfiguration withMaxDurationMinutes(Integer maxDurationMinutes) {
        this.maxDurationMinutes = maxDurationMinutes;
        return this;
    }

    /**
     * Get the earlyTerminationPolicyConfiguration property: Early termination policies enable canceling poor-performing
     * runs before they complete.
     *
     * @return the earlyTerminationPolicyConfiguration value.
     */
    public EarlyTerminationPolicyConfiguration earlyTerminationPolicyConfiguration() {
        return this.earlyTerminationPolicyConfiguration;
    }

    /**
     * Set the earlyTerminationPolicyConfiguration property: Early termination policies enable canceling poor-performing
     * runs before they complete.
     *
     * @param earlyTerminationPolicyConfiguration the earlyTerminationPolicyConfiguration value to set.
     * @return the TerminationConfiguration object itself.
     */
    public TerminationConfiguration withEarlyTerminationPolicyConfiguration(
        EarlyTerminationPolicyConfiguration earlyTerminationPolicyConfiguration) {
        this.earlyTerminationPolicyConfiguration = earlyTerminationPolicyConfiguration;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (earlyTerminationPolicyConfiguration() != null) {
            earlyTerminationPolicyConfiguration().validate();
        }
    }
}
