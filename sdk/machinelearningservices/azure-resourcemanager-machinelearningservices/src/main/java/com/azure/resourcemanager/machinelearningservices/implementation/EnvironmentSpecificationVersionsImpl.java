// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearningservices.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.machinelearningservices.fluent.EnvironmentSpecificationVersionsClient;
import com.azure.resourcemanager.machinelearningservices.fluent.models.EnvironmentSpecificationVersionResourceInner;
import com.azure.resourcemanager.machinelearningservices.models.EnvironmentSpecificationVersionResource;
import com.azure.resourcemanager.machinelearningservices.models.EnvironmentSpecificationVersions;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class EnvironmentSpecificationVersionsImpl implements EnvironmentSpecificationVersions {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(EnvironmentSpecificationVersionsImpl.class);

    private final EnvironmentSpecificationVersionsClient innerClient;

    private final com.azure.resourcemanager.machinelearningservices.MachineLearningServicesManager serviceManager;

    public EnvironmentSpecificationVersionsImpl(
        EnvironmentSpecificationVersionsClient innerClient,
        com.azure.resourcemanager.machinelearningservices.MachineLearningServicesManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<EnvironmentSpecificationVersionResource> list(
        String name, String resourceGroupName, String workspaceName) {
        PagedIterable<EnvironmentSpecificationVersionResourceInner> inner =
            this.serviceClient().list(name, resourceGroupName, workspaceName);
        return Utils.mapPage(inner, inner1 -> new EnvironmentSpecificationVersionResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<EnvironmentSpecificationVersionResource> list(
        String name,
        String resourceGroupName,
        String workspaceName,
        String orderBy,
        Integer top,
        String skip,
        Context context) {
        PagedIterable<EnvironmentSpecificationVersionResourceInner> inner =
            this.serviceClient().list(name, resourceGroupName, workspaceName, orderBy, top, skip, context);
        return Utils.mapPage(inner, inner1 -> new EnvironmentSpecificationVersionResourceImpl(inner1, this.manager()));
    }

    public void delete(String name, String version, String resourceGroupName, String workspaceName) {
        this.serviceClient().delete(name, version, resourceGroupName, workspaceName);
    }

    public Response<Void> deleteWithResponse(
        String name, String version, String resourceGroupName, String workspaceName, Context context) {
        return this.serviceClient().deleteWithResponse(name, version, resourceGroupName, workspaceName, context);
    }

    public EnvironmentSpecificationVersionResource get(
        String name, String version, String resourceGroupName, String workspaceName) {
        EnvironmentSpecificationVersionResourceInner inner =
            this.serviceClient().get(name, version, resourceGroupName, workspaceName);
        if (inner != null) {
            return new EnvironmentSpecificationVersionResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<EnvironmentSpecificationVersionResource> getWithResponse(
        String name, String version, String resourceGroupName, String workspaceName, Context context) {
        Response<EnvironmentSpecificationVersionResourceInner> inner =
            this.serviceClient().getWithResponse(name, version, resourceGroupName, workspaceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new EnvironmentSpecificationVersionResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public EnvironmentSpecificationVersionResource getById(String id) {
        String name = Utils.getValueFromIdByName(id, "environments");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'environments'.", id)));
        }
        String version = Utils.getValueFromIdByName(id, "versions");
        if (version == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'versions'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        return this.getWithResponse(name, version, resourceGroupName, workspaceName, Context.NONE).getValue();
    }

    public Response<EnvironmentSpecificationVersionResource> getByIdWithResponse(String id, Context context) {
        String name = Utils.getValueFromIdByName(id, "environments");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'environments'.", id)));
        }
        String version = Utils.getValueFromIdByName(id, "versions");
        if (version == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'versions'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        return this.getWithResponse(name, version, resourceGroupName, workspaceName, context);
    }

    public void deleteById(String id) {
        String name = Utils.getValueFromIdByName(id, "environments");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'environments'.", id)));
        }
        String version = Utils.getValueFromIdByName(id, "versions");
        if (version == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'versions'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        this.deleteWithResponse(name, version, resourceGroupName, workspaceName, Context.NONE).getValue();
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String name = Utils.getValueFromIdByName(id, "environments");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'environments'.", id)));
        }
        String version = Utils.getValueFromIdByName(id, "versions");
        if (version == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'versions'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String workspaceName = Utils.getValueFromIdByName(id, "workspaces");
        if (workspaceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'workspaces'.", id)));
        }
        return this.deleteWithResponse(name, version, resourceGroupName, workspaceName, context);
    }

    private EnvironmentSpecificationVersionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.machinelearningservices.MachineLearningServicesManager manager() {
        return this.serviceManager;
    }

    public EnvironmentSpecificationVersionResourceImpl define(String name) {
        return new EnvironmentSpecificationVersionResourceImpl(name, this.manager());
    }
}
