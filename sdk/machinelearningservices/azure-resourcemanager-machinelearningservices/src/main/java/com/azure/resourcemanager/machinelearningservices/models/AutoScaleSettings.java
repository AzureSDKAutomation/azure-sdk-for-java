// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearningservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.time.Duration;

/** The AutoScaleSettings model. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "scaleType")
@JsonTypeName("Auto")
@Fluent
public final class AutoScaleSettings extends OnlineScaleSettings {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(AutoScaleSettings.class);

    /*
     * The polling interval in ISO 8691 format. Only supports duration with
     * precision as low as Seconds.
     */
    @JsonProperty(value = "pollingInterval")
    private Duration pollingInterval;

    /*
     * The targetUtilizationPercentage property.
     */
    @JsonProperty(value = "targetUtilizationPercentage")
    private Integer targetUtilizationPercentage;

    /**
     * Get the pollingInterval property: The polling interval in ISO 8691 format. Only supports duration with precision
     * as low as Seconds.
     *
     * @return the pollingInterval value.
     */
    public Duration pollingInterval() {
        return this.pollingInterval;
    }

    /**
     * Set the pollingInterval property: The polling interval in ISO 8691 format. Only supports duration with precision
     * as low as Seconds.
     *
     * @param pollingInterval the pollingInterval value to set.
     * @return the AutoScaleSettings object itself.
     */
    public AutoScaleSettings withPollingInterval(Duration pollingInterval) {
        this.pollingInterval = pollingInterval;
        return this;
    }

    /**
     * Get the targetUtilizationPercentage property: The targetUtilizationPercentage property.
     *
     * @return the targetUtilizationPercentage value.
     */
    public Integer targetUtilizationPercentage() {
        return this.targetUtilizationPercentage;
    }

    /**
     * Set the targetUtilizationPercentage property: The targetUtilizationPercentage property.
     *
     * @param targetUtilizationPercentage the targetUtilizationPercentage value to set.
     * @return the AutoScaleSettings object itself.
     */
    public AutoScaleSettings withTargetUtilizationPercentage(Integer targetUtilizationPercentage) {
        this.targetUtilizationPercentage = targetUtilizationPercentage;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public AutoScaleSettings withMaxInstances(Integer maxInstances) {
        super.withMaxInstances(maxInstances);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public AutoScaleSettings withMinInstances(Integer minInstances) {
        super.withMinInstances(minInstances);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}
