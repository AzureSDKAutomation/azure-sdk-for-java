// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearningservices.implementation;

import com.azure.resourcemanager.machinelearningservices.MachinelearningservicesManager;
import com.azure.resourcemanager.machinelearningservices.fluent.models.DatastoreContentsInner;
import com.azure.resourcemanager.machinelearningservices.fluent.models.DatastorePropertiesInner;
import com.azure.resourcemanager.machinelearningservices.models.DatastoreContents;
import com.azure.resourcemanager.machinelearningservices.models.DatastoreProperties;
import com.azure.resourcemanager.machinelearningservices.models.LinkedInfo;
import java.util.Collections;
import java.util.Map;

public final class DatastorePropertiesImpl implements DatastoreProperties {
    private DatastorePropertiesInner innerObject;

    private final MachinelearningservicesManager serviceManager;

    DatastorePropertiesImpl(DatastorePropertiesInner innerObject, MachinelearningservicesManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
    }

    public DatastoreContents contents() {
        DatastoreContentsInner inner = this.innerModel().contents();
        if (inner != null) {
            return new DatastoreContentsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Boolean hasBeenValidated() {
        return this.innerModel().hasBeenValidated();
    }

    public Boolean isDefault() {
        return this.innerModel().isDefault();
    }

    public LinkedInfo linkedInfo() {
        return this.innerModel().linkedInfo();
    }

    public Map<String, String> properties() {
        Map<String, String> inner = this.innerModel().properties();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String description() {
        return this.innerModel().description();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public DatastorePropertiesInner innerModel() {
        return this.innerObject;
    }

    private MachinelearningservicesManager manager() {
        return this.serviceManager;
    }
}
