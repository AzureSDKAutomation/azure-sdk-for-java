// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearningservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.time.Duration;
import java.util.Map;

/** Sweep job definition. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "jobType")
@JsonTypeName("Sweep")
@Fluent
public final class SweepJob extends JobBase {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(SweepJob.class);

    /*
     * Type of the hyperparameter sampling algorithms
     */
    @JsonProperty(value = "algorithm", required = true)
    private SamplingAlgorithm algorithm;

    /*
     * Compute binding for the job.
     */
    @JsonProperty(value = "compute", required = true)
    private ComputeConfiguration compute;

    /*
     * Early termination policies enable canceling poor-performing runs before
     * they complete
     */
    @JsonProperty(value = "earlyTermination")
    private EarlyTerminationPolicy earlyTermination;

    /*
     * The name of the experiment the job belongs to. If not set, the job is
     * placed in the "Default" experiment.
     */
    @JsonProperty(value = "experimentName")
    private String experimentName;

    /*
     * Identity configuration. If set, this should be one of AmlToken,
     * ManagedIdentity or null.
     * Defaults to AmlToken if null.
     */
    @JsonProperty(value = "identity")
    private IdentityConfiguration identity;

    /*
     * The maxConcurrentTrials property.
     */
    @JsonProperty(value = "maxConcurrentTrials")
    private Integer maxConcurrentTrials;

    /*
     * The maxTotalTrials property.
     */
    @JsonProperty(value = "maxTotalTrials")
    private Integer maxTotalTrials;

    /*
     * The objective property.
     */
    @JsonProperty(value = "objective", required = true)
    private Objective objective;

    /*
     * Location of the job output logs and artifacts.
     */
    @JsonProperty(value = "output", access = JsonProperty.Access.WRITE_ONLY)
    private JobOutput output;

    /*
     * Job priority for scheduling policy. Only applies to AMLCompute.
     * Private preview feature and only available to users on the allow list.
     */
    @JsonProperty(value = "priority")
    private Integer priority;

    /*
     * A dictionary containing each parameter and its distribution. The
     * dictionary key is the name of the parameter
     */
    @JsonProperty(value = "searchSpace", required = true)
    private Map<String, Object> searchSpace;

    /*
     * The status of a job.
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private JobStatus status;

    /*
     * The total timeout in ISO 8601 format. Only supports duration with
     * precision as low as Minutes.
     */
    @JsonProperty(value = "timeout")
    private Duration timeout;

    /*
     * Trial component definition.
     */
    @JsonProperty(value = "trial")
    private TrialComponent trial;

    /**
     * Get the algorithm property: Type of the hyperparameter sampling algorithms.
     *
     * @return the algorithm value.
     */
    public SamplingAlgorithm algorithm() {
        return this.algorithm;
    }

    /**
     * Set the algorithm property: Type of the hyperparameter sampling algorithms.
     *
     * @param algorithm the algorithm value to set.
     * @return the SweepJob object itself.
     */
    public SweepJob withAlgorithm(SamplingAlgorithm algorithm) {
        this.algorithm = algorithm;
        return this;
    }

    /**
     * Get the compute property: Compute binding for the job.
     *
     * @return the compute value.
     */
    public ComputeConfiguration compute() {
        return this.compute;
    }

    /**
     * Set the compute property: Compute binding for the job.
     *
     * @param compute the compute value to set.
     * @return the SweepJob object itself.
     */
    public SweepJob withCompute(ComputeConfiguration compute) {
        this.compute = compute;
        return this;
    }

    /**
     * Get the earlyTermination property: Early termination policies enable canceling poor-performing runs before they
     * complete.
     *
     * @return the earlyTermination value.
     */
    public EarlyTerminationPolicy earlyTermination() {
        return this.earlyTermination;
    }

    /**
     * Set the earlyTermination property: Early termination policies enable canceling poor-performing runs before they
     * complete.
     *
     * @param earlyTermination the earlyTermination value to set.
     * @return the SweepJob object itself.
     */
    public SweepJob withEarlyTermination(EarlyTerminationPolicy earlyTermination) {
        this.earlyTermination = earlyTermination;
        return this;
    }

    /**
     * Get the experimentName property: The name of the experiment the job belongs to. If not set, the job is placed in
     * the "Default" experiment.
     *
     * @return the experimentName value.
     */
    public String experimentName() {
        return this.experimentName;
    }

    /**
     * Set the experimentName property: The name of the experiment the job belongs to. If not set, the job is placed in
     * the "Default" experiment.
     *
     * @param experimentName the experimentName value to set.
     * @return the SweepJob object itself.
     */
    public SweepJob withExperimentName(String experimentName) {
        this.experimentName = experimentName;
        return this;
    }

    /**
     * Get the identity property: Identity configuration. If set, this should be one of AmlToken, ManagedIdentity or
     * null. Defaults to AmlToken if null.
     *
     * @return the identity value.
     */
    public IdentityConfiguration identity() {
        return this.identity;
    }

    /**
     * Set the identity property: Identity configuration. If set, this should be one of AmlToken, ManagedIdentity or
     * null. Defaults to AmlToken if null.
     *
     * @param identity the identity value to set.
     * @return the SweepJob object itself.
     */
    public SweepJob withIdentity(IdentityConfiguration identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the maxConcurrentTrials property: The maxConcurrentTrials property.
     *
     * @return the maxConcurrentTrials value.
     */
    public Integer maxConcurrentTrials() {
        return this.maxConcurrentTrials;
    }

    /**
     * Set the maxConcurrentTrials property: The maxConcurrentTrials property.
     *
     * @param maxConcurrentTrials the maxConcurrentTrials value to set.
     * @return the SweepJob object itself.
     */
    public SweepJob withMaxConcurrentTrials(Integer maxConcurrentTrials) {
        this.maxConcurrentTrials = maxConcurrentTrials;
        return this;
    }

    /**
     * Get the maxTotalTrials property: The maxTotalTrials property.
     *
     * @return the maxTotalTrials value.
     */
    public Integer maxTotalTrials() {
        return this.maxTotalTrials;
    }

    /**
     * Set the maxTotalTrials property: The maxTotalTrials property.
     *
     * @param maxTotalTrials the maxTotalTrials value to set.
     * @return the SweepJob object itself.
     */
    public SweepJob withMaxTotalTrials(Integer maxTotalTrials) {
        this.maxTotalTrials = maxTotalTrials;
        return this;
    }

    /**
     * Get the objective property: The objective property.
     *
     * @return the objective value.
     */
    public Objective objective() {
        return this.objective;
    }

    /**
     * Set the objective property: The objective property.
     *
     * @param objective the objective value to set.
     * @return the SweepJob object itself.
     */
    public SweepJob withObjective(Objective objective) {
        this.objective = objective;
        return this;
    }

    /**
     * Get the output property: Location of the job output logs and artifacts.
     *
     * @return the output value.
     */
    public JobOutput output() {
        return this.output;
    }

    /**
     * Get the priority property: Job priority for scheduling policy. Only applies to AMLCompute. Private preview
     * feature and only available to users on the allow list.
     *
     * @return the priority value.
     */
    public Integer priority() {
        return this.priority;
    }

    /**
     * Set the priority property: Job priority for scheduling policy. Only applies to AMLCompute. Private preview
     * feature and only available to users on the allow list.
     *
     * @param priority the priority value to set.
     * @return the SweepJob object itself.
     */
    public SweepJob withPriority(Integer priority) {
        this.priority = priority;
        return this;
    }

    /**
     * Get the searchSpace property: A dictionary containing each parameter and its distribution. The dictionary key is
     * the name of the parameter.
     *
     * @return the searchSpace value.
     */
    public Map<String, Object> searchSpace() {
        return this.searchSpace;
    }

    /**
     * Set the searchSpace property: A dictionary containing each parameter and its distribution. The dictionary key is
     * the name of the parameter.
     *
     * @param searchSpace the searchSpace value to set.
     * @return the SweepJob object itself.
     */
    public SweepJob withSearchSpace(Map<String, Object> searchSpace) {
        this.searchSpace = searchSpace;
        return this;
    }

    /**
     * Get the status property: The status of a job.
     *
     * @return the status value.
     */
    public JobStatus status() {
        return this.status;
    }

    /**
     * Get the timeout property: The total timeout in ISO 8601 format. Only supports duration with precision as low as
     * Minutes.
     *
     * @return the timeout value.
     */
    public Duration timeout() {
        return this.timeout;
    }

    /**
     * Set the timeout property: The total timeout in ISO 8601 format. Only supports duration with precision as low as
     * Minutes.
     *
     * @param timeout the timeout value to set.
     * @return the SweepJob object itself.
     */
    public SweepJob withTimeout(Duration timeout) {
        this.timeout = timeout;
        return this;
    }

    /**
     * Get the trial property: Trial component definition.
     *
     * @return the trial value.
     */
    public TrialComponent trial() {
        return this.trial;
    }

    /**
     * Set the trial property: Trial component definition.
     *
     * @param trial the trial value to set.
     * @return the SweepJob object itself.
     */
    public SweepJob withTrial(TrialComponent trial) {
        this.trial = trial;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public SweepJob withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public SweepJob withProperties(Map<String, String> properties) {
        super.withProperties(properties);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public SweepJob withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (algorithm() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property algorithm in model SweepJob"));
        }
        if (compute() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property compute in model SweepJob"));
        } else {
            compute().validate();
        }
        if (earlyTermination() != null) {
            earlyTermination().validate();
        }
        if (identity() != null) {
            identity().validate();
        }
        if (objective() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property objective in model SweepJob"));
        } else {
            objective().validate();
        }
        if (output() != null) {
            output().validate();
        }
        if (searchSpace() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property searchSpace in model SweepJob"));
        }
        if (trial() != null) {
            trial().validate();
        }
    }
}
