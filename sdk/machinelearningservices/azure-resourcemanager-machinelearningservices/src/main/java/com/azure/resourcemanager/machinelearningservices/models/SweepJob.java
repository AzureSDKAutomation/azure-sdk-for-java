// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearningservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.Map;

/** The SweepJob model. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "jobType")
@JsonTypeName("Sweep")
@Fluent
public final class SweepJob extends ComputeJobBase {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(SweepJob.class);

    /*
     * The status of a job.
     */
    @JsonProperty(value = "status")
    private JobStatus status;

    /*
     * class for all hyperparameter sampling algorithms
     */
    @JsonProperty(value = "parameterSamplingConfiguration", required = true)
    private ParameterSamplingConfiguration parameterSamplingConfiguration;

    /*
     * The terminationConfiguration property.
     */
    @JsonProperty(value = "terminationConfiguration")
    private TerminationConfiguration terminationConfiguration;

    /*
     * The evaluationConfiguration property.
     */
    @JsonProperty(value = "evaluationConfiguration", required = true)
    private EvaluationConfiguration evaluationConfiguration;

    /*
     * The trialJob property.
     */
    @JsonProperty(value = "trialJob")
    private TrialJob trialJob;

    /**
     * Get the status property: The status of a job.
     *
     * @return the status value.
     */
    public JobStatus status() {
        return this.status;
    }

    /**
     * Set the status property: The status of a job.
     *
     * @param status the status value to set.
     * @return the SweepJob object itself.
     */
    public SweepJob withStatus(JobStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the parameterSamplingConfiguration property: class for all hyperparameter sampling algorithms.
     *
     * @return the parameterSamplingConfiguration value.
     */
    public ParameterSamplingConfiguration parameterSamplingConfiguration() {
        return this.parameterSamplingConfiguration;
    }

    /**
     * Set the parameterSamplingConfiguration property: class for all hyperparameter sampling algorithms.
     *
     * @param parameterSamplingConfiguration the parameterSamplingConfiguration value to set.
     * @return the SweepJob object itself.
     */
    public SweepJob withParameterSamplingConfiguration(ParameterSamplingConfiguration parameterSamplingConfiguration) {
        this.parameterSamplingConfiguration = parameterSamplingConfiguration;
        return this;
    }

    /**
     * Get the terminationConfiguration property: The terminationConfiguration property.
     *
     * @return the terminationConfiguration value.
     */
    public TerminationConfiguration terminationConfiguration() {
        return this.terminationConfiguration;
    }

    /**
     * Set the terminationConfiguration property: The terminationConfiguration property.
     *
     * @param terminationConfiguration the terminationConfiguration value to set.
     * @return the SweepJob object itself.
     */
    public SweepJob withTerminationConfiguration(TerminationConfiguration terminationConfiguration) {
        this.terminationConfiguration = terminationConfiguration;
        return this;
    }

    /**
     * Get the evaluationConfiguration property: The evaluationConfiguration property.
     *
     * @return the evaluationConfiguration value.
     */
    public EvaluationConfiguration evaluationConfiguration() {
        return this.evaluationConfiguration;
    }

    /**
     * Set the evaluationConfiguration property: The evaluationConfiguration property.
     *
     * @param evaluationConfiguration the evaluationConfiguration value to set.
     * @return the SweepJob object itself.
     */
    public SweepJob withEvaluationConfiguration(EvaluationConfiguration evaluationConfiguration) {
        this.evaluationConfiguration = evaluationConfiguration;
        return this;
    }

    /**
     * Get the trialJob property: The trialJob property.
     *
     * @return the trialJob value.
     */
    public TrialJob trialJob() {
        return this.trialJob;
    }

    /**
     * Set the trialJob property: The trialJob property.
     *
     * @param trialJob the trialJob value to set.
     * @return the SweepJob object itself.
     */
    public SweepJob withTrialJob(TrialJob trialJob) {
        this.trialJob = trialJob;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public SweepJob withExperimentName(String experimentName) {
        super.withExperimentName(experimentName);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public SweepJob withComputeBinding(ComputeBinding computeBinding) {
        super.withComputeBinding(computeBinding);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public SweepJob withOutput(JobOutput output) {
        super.withOutput(output);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public SweepJob withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public SweepJob withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public SweepJob withProperties(Map<String, String> properties) {
        super.withProperties(properties);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (parameterSamplingConfiguration() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property parameterSamplingConfiguration in model SweepJob"));
        } else {
            parameterSamplingConfiguration().validate();
        }
        if (terminationConfiguration() != null) {
            terminationConfiguration().validate();
        }
        if (evaluationConfiguration() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property evaluationConfiguration in model SweepJob"));
        } else {
            evaluationConfiguration().validate();
        }
        if (trialJob() != null) {
            trialJob().validate();
        }
    }
}
