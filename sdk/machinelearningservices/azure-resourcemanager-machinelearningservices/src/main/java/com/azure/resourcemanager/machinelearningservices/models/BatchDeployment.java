// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearningservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** Batch inference settings per deployment. */
@Fluent
public final class BatchDeployment {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(BatchDeployment.class);

    /*
     * The scaleSettings property.
     */
    @JsonProperty(value = "scaleSettings")
    private DeploymentScaleSettings scaleSettings;

    /*
     * Batch inference specific settings per deployment.
     */
    @JsonProperty(value = "batchSettings")
    private BatchDeploymentSettings batchSettings;

    /*
     * Description of the endpoint deployment.
     */
    @JsonProperty(value = "description")
    private String description;

    /*
     * Property dictionary. Properties can be added, but not removed or
     * altered.
     */
    @JsonProperty(value = "properties")
    private Map<String, String> properties;

    /*
     * The modelReference property.
     */
    @JsonProperty(value = "modelReference", required = true)
    private AssetReferenceBase modelReference;

    /*
     * The codeConfiguration property.
     */
    @JsonProperty(value = "codeConfiguration")
    private CodeConfiguration codeConfiguration;

    /*
     * Environment specification for the endpoint deployment.
     */
    @JsonProperty(value = "environmentId")
    private String environmentId;

    /*
     * Provisioning state for the endpoint deployment.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private DeploymentProvisioningState provisioningState;

    /*
     * The error property.
     */
    @JsonProperty(value = "error")
    private RootError error;

    /**
     * Get the scaleSettings property: The scaleSettings property.
     *
     * @return the scaleSettings value.
     */
    public DeploymentScaleSettings scaleSettings() {
        return this.scaleSettings;
    }

    /**
     * Set the scaleSettings property: The scaleSettings property.
     *
     * @param scaleSettings the scaleSettings value to set.
     * @return the BatchDeployment object itself.
     */
    public BatchDeployment withScaleSettings(DeploymentScaleSettings scaleSettings) {
        this.scaleSettings = scaleSettings;
        return this;
    }

    /**
     * Get the batchSettings property: Batch inference specific settings per deployment.
     *
     * @return the batchSettings value.
     */
    public BatchDeploymentSettings batchSettings() {
        return this.batchSettings;
    }

    /**
     * Set the batchSettings property: Batch inference specific settings per deployment.
     *
     * @param batchSettings the batchSettings value to set.
     * @return the BatchDeployment object itself.
     */
    public BatchDeployment withBatchSettings(BatchDeploymentSettings batchSettings) {
        this.batchSettings = batchSettings;
        return this;
    }

    /**
     * Get the description property: Description of the endpoint deployment.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description of the endpoint deployment.
     *
     * @param description the description value to set.
     * @return the BatchDeployment object itself.
     */
    public BatchDeployment withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the properties property: Property dictionary. Properties can be added, but not removed or altered.
     *
     * @return the properties value.
     */
    public Map<String, String> properties() {
        return this.properties;
    }

    /**
     * Set the properties property: Property dictionary. Properties can be added, but not removed or altered.
     *
     * @param properties the properties value to set.
     * @return the BatchDeployment object itself.
     */
    public BatchDeployment withProperties(Map<String, String> properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the modelReference property: The modelReference property.
     *
     * @return the modelReference value.
     */
    public AssetReferenceBase modelReference() {
        return this.modelReference;
    }

    /**
     * Set the modelReference property: The modelReference property.
     *
     * @param modelReference the modelReference value to set.
     * @return the BatchDeployment object itself.
     */
    public BatchDeployment withModelReference(AssetReferenceBase modelReference) {
        this.modelReference = modelReference;
        return this;
    }

    /**
     * Get the codeConfiguration property: The codeConfiguration property.
     *
     * @return the codeConfiguration value.
     */
    public CodeConfiguration codeConfiguration() {
        return this.codeConfiguration;
    }

    /**
     * Set the codeConfiguration property: The codeConfiguration property.
     *
     * @param codeConfiguration the codeConfiguration value to set.
     * @return the BatchDeployment object itself.
     */
    public BatchDeployment withCodeConfiguration(CodeConfiguration codeConfiguration) {
        this.codeConfiguration = codeConfiguration;
        return this;
    }

    /**
     * Get the environmentId property: Environment specification for the endpoint deployment.
     *
     * @return the environmentId value.
     */
    public String environmentId() {
        return this.environmentId;
    }

    /**
     * Set the environmentId property: Environment specification for the endpoint deployment.
     *
     * @param environmentId the environmentId value to set.
     * @return the BatchDeployment object itself.
     */
    public BatchDeployment withEnvironmentId(String environmentId) {
        this.environmentId = environmentId;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state for the endpoint deployment.
     *
     * @return the provisioningState value.
     */
    public DeploymentProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the error property: The error property.
     *
     * @return the error value.
     */
    public RootError error() {
        return this.error;
    }

    /**
     * Set the error property: The error property.
     *
     * @param error the error value to set.
     * @return the BatchDeployment object itself.
     */
    public BatchDeployment withError(RootError error) {
        this.error = error;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (scaleSettings() != null) {
            scaleSettings().validate();
        }
        if (batchSettings() != null) {
            batchSettings().validate();
        }
        if (modelReference() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property modelReference in model BatchDeployment"));
        } else {
            modelReference().validate();
        }
        if (codeConfiguration() != null) {
            codeConfiguration().validate();
        }
        if (error() != null) {
            error().validate();
        }
    }
}
