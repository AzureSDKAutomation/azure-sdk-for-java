// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearningservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** Batch inference settings per deployment. */
@Fluent
public final class BatchDeployment {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(BatchDeployment.class);

    /*
     * Code configuration for the endpoint deployment.
     */
    @JsonProperty(value = "codeConfiguration")
    private CodeConfiguration codeConfiguration;

    /*
     * Configuration for compute binding.
     */
    @JsonProperty(value = "compute")
    private ComputeConfiguration compute;

    /*
     * Description of the endpoint deployment.
     */
    @JsonProperty(value = "description")
    private String description;

    /*
     * ARM resource ID of the environment specification for the endpoint
     * deployment.
     */
    @JsonProperty(value = "environmentId")
    private String environmentId;

    /*
     * Environment variables configuration for the deployment.
     */
    @JsonProperty(value = "environmentVariables")
    private Map<String, String> environmentVariables;

    /*
     * Error threshold, if the error count for the entire input goes above this
     * value,
     * the batch inference will be aborted. Range is [-1, int.MaxValue].
     * For FileDataset, this value is the count of file failures.
     * For TabularDataset, this value is the count of record failures.
     * If set to -1 (the lower bound), all failures during batch inference will
     * be ignored.
     */
    @JsonProperty(value = "errorThreshold")
    private Integer errorThreshold;

    /*
     * Logging level for batch inference operation.
     */
    @JsonProperty(value = "loggingLevel")
    private BatchLoggingLevel loggingLevel;

    /*
     * Size of the mini-batch passed to each batch invocation.
     * For FileDataset, this is the number of files per mini-batch.
     * For TabularDataset, this is the size of the records in bytes, per
     * mini-batch.
     */
    @JsonProperty(value = "miniBatchSize")
    private Long miniBatchSize;

    /*
     * Reference to the model asset for the endpoint deployment.
     */
    @JsonProperty(value = "model")
    private AssetReferenceBase model;

    /*
     * Output configuration for the batch inference operation.
     */
    @JsonProperty(value = "outputConfiguration")
    private BatchOutputConfiguration outputConfiguration;

    /*
     * Partition keys list used for Named partitioning.
     */
    @JsonProperty(value = "partitionKeys")
    private List<String> partitionKeys;

    /*
     * Property dictionary. Properties can be added, but not removed or
     * altered.
     */
    @JsonProperty(value = "properties")
    private Map<String, String> properties;

    /*
     * Retry Settings for the batch inference operation.
     */
    @JsonProperty(value = "retrySettings")
    private BatchRetrySettings retrySettings;

    /**
     * Get the codeConfiguration property: Code configuration for the endpoint deployment.
     *
     * @return the codeConfiguration value.
     */
    public CodeConfiguration codeConfiguration() {
        return this.codeConfiguration;
    }

    /**
     * Set the codeConfiguration property: Code configuration for the endpoint deployment.
     *
     * @param codeConfiguration the codeConfiguration value to set.
     * @return the BatchDeployment object itself.
     */
    public BatchDeployment withCodeConfiguration(CodeConfiguration codeConfiguration) {
        this.codeConfiguration = codeConfiguration;
        return this;
    }

    /**
     * Get the compute property: Configuration for compute binding.
     *
     * @return the compute value.
     */
    public ComputeConfiguration compute() {
        return this.compute;
    }

    /**
     * Set the compute property: Configuration for compute binding.
     *
     * @param compute the compute value to set.
     * @return the BatchDeployment object itself.
     */
    public BatchDeployment withCompute(ComputeConfiguration compute) {
        this.compute = compute;
        return this;
    }

    /**
     * Get the description property: Description of the endpoint deployment.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description of the endpoint deployment.
     *
     * @param description the description value to set.
     * @return the BatchDeployment object itself.
     */
    public BatchDeployment withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the environmentId property: ARM resource ID of the environment specification for the endpoint deployment.
     *
     * @return the environmentId value.
     */
    public String environmentId() {
        return this.environmentId;
    }

    /**
     * Set the environmentId property: ARM resource ID of the environment specification for the endpoint deployment.
     *
     * @param environmentId the environmentId value to set.
     * @return the BatchDeployment object itself.
     */
    public BatchDeployment withEnvironmentId(String environmentId) {
        this.environmentId = environmentId;
        return this;
    }

    /**
     * Get the environmentVariables property: Environment variables configuration for the deployment.
     *
     * @return the environmentVariables value.
     */
    public Map<String, String> environmentVariables() {
        return this.environmentVariables;
    }

    /**
     * Set the environmentVariables property: Environment variables configuration for the deployment.
     *
     * @param environmentVariables the environmentVariables value to set.
     * @return the BatchDeployment object itself.
     */
    public BatchDeployment withEnvironmentVariables(Map<String, String> environmentVariables) {
        this.environmentVariables = environmentVariables;
        return this;
    }

    /**
     * Get the errorThreshold property: Error threshold, if the error count for the entire input goes above this value,
     * the batch inference will be aborted. Range is [-1, int.MaxValue]. For FileDataset, this value is the count of
     * file failures. For TabularDataset, this value is the count of record failures. If set to -1 (the lower bound),
     * all failures during batch inference will be ignored.
     *
     * @return the errorThreshold value.
     */
    public Integer errorThreshold() {
        return this.errorThreshold;
    }

    /**
     * Set the errorThreshold property: Error threshold, if the error count for the entire input goes above this value,
     * the batch inference will be aborted. Range is [-1, int.MaxValue]. For FileDataset, this value is the count of
     * file failures. For TabularDataset, this value is the count of record failures. If set to -1 (the lower bound),
     * all failures during batch inference will be ignored.
     *
     * @param errorThreshold the errorThreshold value to set.
     * @return the BatchDeployment object itself.
     */
    public BatchDeployment withErrorThreshold(Integer errorThreshold) {
        this.errorThreshold = errorThreshold;
        return this;
    }

    /**
     * Get the loggingLevel property: Logging level for batch inference operation.
     *
     * @return the loggingLevel value.
     */
    public BatchLoggingLevel loggingLevel() {
        return this.loggingLevel;
    }

    /**
     * Set the loggingLevel property: Logging level for batch inference operation.
     *
     * @param loggingLevel the loggingLevel value to set.
     * @return the BatchDeployment object itself.
     */
    public BatchDeployment withLoggingLevel(BatchLoggingLevel loggingLevel) {
        this.loggingLevel = loggingLevel;
        return this;
    }

    /**
     * Get the miniBatchSize property: Size of the mini-batch passed to each batch invocation. For FileDataset, this is
     * the number of files per mini-batch. For TabularDataset, this is the size of the records in bytes, per mini-batch.
     *
     * @return the miniBatchSize value.
     */
    public Long miniBatchSize() {
        return this.miniBatchSize;
    }

    /**
     * Set the miniBatchSize property: Size of the mini-batch passed to each batch invocation. For FileDataset, this is
     * the number of files per mini-batch. For TabularDataset, this is the size of the records in bytes, per mini-batch.
     *
     * @param miniBatchSize the miniBatchSize value to set.
     * @return the BatchDeployment object itself.
     */
    public BatchDeployment withMiniBatchSize(Long miniBatchSize) {
        this.miniBatchSize = miniBatchSize;
        return this;
    }

    /**
     * Get the model property: Reference to the model asset for the endpoint deployment.
     *
     * @return the model value.
     */
    public AssetReferenceBase model() {
        return this.model;
    }

    /**
     * Set the model property: Reference to the model asset for the endpoint deployment.
     *
     * @param model the model value to set.
     * @return the BatchDeployment object itself.
     */
    public BatchDeployment withModel(AssetReferenceBase model) {
        this.model = model;
        return this;
    }

    /**
     * Get the outputConfiguration property: Output configuration for the batch inference operation.
     *
     * @return the outputConfiguration value.
     */
    public BatchOutputConfiguration outputConfiguration() {
        return this.outputConfiguration;
    }

    /**
     * Set the outputConfiguration property: Output configuration for the batch inference operation.
     *
     * @param outputConfiguration the outputConfiguration value to set.
     * @return the BatchDeployment object itself.
     */
    public BatchDeployment withOutputConfiguration(BatchOutputConfiguration outputConfiguration) {
        this.outputConfiguration = outputConfiguration;
        return this;
    }

    /**
     * Get the partitionKeys property: Partition keys list used for Named partitioning.
     *
     * @return the partitionKeys value.
     */
    public List<String> partitionKeys() {
        return this.partitionKeys;
    }

    /**
     * Set the partitionKeys property: Partition keys list used for Named partitioning.
     *
     * @param partitionKeys the partitionKeys value to set.
     * @return the BatchDeployment object itself.
     */
    public BatchDeployment withPartitionKeys(List<String> partitionKeys) {
        this.partitionKeys = partitionKeys;
        return this;
    }

    /**
     * Get the properties property: Property dictionary. Properties can be added, but not removed or altered.
     *
     * @return the properties value.
     */
    public Map<String, String> properties() {
        return this.properties;
    }

    /**
     * Set the properties property: Property dictionary. Properties can be added, but not removed or altered.
     *
     * @param properties the properties value to set.
     * @return the BatchDeployment object itself.
     */
    public BatchDeployment withProperties(Map<String, String> properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the retrySettings property: Retry Settings for the batch inference operation.
     *
     * @return the retrySettings value.
     */
    public BatchRetrySettings retrySettings() {
        return this.retrySettings;
    }

    /**
     * Set the retrySettings property: Retry Settings for the batch inference operation.
     *
     * @param retrySettings the retrySettings value to set.
     * @return the BatchDeployment object itself.
     */
    public BatchDeployment withRetrySettings(BatchRetrySettings retrySettings) {
        this.retrySettings = retrySettings;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (codeConfiguration() != null) {
            codeConfiguration().validate();
        }
        if (compute() != null) {
            compute().validate();
        }
        if (model() != null) {
            model().validate();
        }
        if (outputConfiguration() != null) {
            outputConfiguration().validate();
        }
        if (retrySettings() != null) {
            retrySettings().validate();
        }
    }
}
