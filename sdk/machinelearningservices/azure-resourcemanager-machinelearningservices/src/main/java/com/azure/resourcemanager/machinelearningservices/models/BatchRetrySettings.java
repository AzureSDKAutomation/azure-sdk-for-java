// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearningservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Retry settings for a batch inference operation. */
@Fluent
public final class BatchRetrySettings {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(BatchRetrySettings.class);

    /*
     * Maximum retry count for a mini-batch
     */
    @JsonProperty(value = "maximumRetries")
    private Integer maximumRetries;

    /*
     * Invocation timeout for a mini-batch, in seconds.
     */
    @JsonProperty(value = "timeoutInSeconds")
    private Integer timeoutInSeconds;

    /**
     * Get the maximumRetries property: Maximum retry count for a mini-batch.
     *
     * @return the maximumRetries value.
     */
    public Integer maximumRetries() {
        return this.maximumRetries;
    }

    /**
     * Set the maximumRetries property: Maximum retry count for a mini-batch.
     *
     * @param maximumRetries the maximumRetries value to set.
     * @return the BatchRetrySettings object itself.
     */
    public BatchRetrySettings withMaximumRetries(Integer maximumRetries) {
        this.maximumRetries = maximumRetries;
        return this;
    }

    /**
     * Get the timeoutInSeconds property: Invocation timeout for a mini-batch, in seconds.
     *
     * @return the timeoutInSeconds value.
     */
    public Integer timeoutInSeconds() {
        return this.timeoutInSeconds;
    }

    /**
     * Set the timeoutInSeconds property: Invocation timeout for a mini-batch, in seconds.
     *
     * @param timeoutInSeconds the timeoutInSeconds value to set.
     * @return the BatchRetrySettings object itself.
     */
    public BatchRetrySettings withTimeoutInSeconds(Integer timeoutInSeconds) {
        this.timeoutInSeconds = timeoutInSeconds;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
