// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearningservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** Label class definition. */
@Fluent
public final class LabelClass {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(LabelClass.class);

    /*
     * Display name of the label class.
     */
    @JsonProperty(value = "displayName")
    private String displayName;

    /*
     * Dictionary of subclasses of the label class.
     */
    @JsonProperty(value = "subclasses")
    private Map<String, LabelClass> subclasses;

    /**
     * Get the displayName property: Display name of the label class.
     *
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Display name of the label class.
     *
     * @param displayName the displayName value to set.
     * @return the LabelClass object itself.
     */
    public LabelClass withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the subclasses property: Dictionary of subclasses of the label class.
     *
     * @return the subclasses value.
     */
    public Map<String, LabelClass> subclasses() {
        return this.subclasses;
    }

    /**
     * Set the subclasses property: Dictionary of subclasses of the label class.
     *
     * @param subclasses the subclasses value to set.
     * @return the LabelClass object itself.
     */
    public LabelClass withSubclasses(Map<String, LabelClass> subclasses) {
        this.subclasses = subclasses;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (subclasses() != null) {
            subclasses()
                .values()
                .forEach(
                    e -> {
                        if (e != null) {
                            e.validate();
                        }
                    });
        }
    }
}
