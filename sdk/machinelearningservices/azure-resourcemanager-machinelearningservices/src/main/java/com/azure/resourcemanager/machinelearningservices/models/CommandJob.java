// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearningservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.Map;

/** Code Job definition. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "jobType")
@JsonTypeName("Command")
@Fluent
public final class CommandJob extends ComputeJobBase {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(CommandJob.class);

    /*
     * Status of the job.
     */
    @JsonProperty(value = "status")
    private JobStatus status;

    /*
     * The max run duration in seconds, after which the job will be cancelled.
     */
    @JsonProperty(value = "maxRunDurationSeconds")
    private Long maxRunDurationSeconds;

    /*
     * The codeConfiguration property.
     */
    @JsonProperty(value = "codeConfiguration", required = true)
    private CodeConfiguration codeConfiguration;

    /*
     * Environment specification of the job.
     */
    @JsonProperty(value = "environmentId")
    private String environmentId;

    /*
     * Mapping of data bindings used in the job.
     */
    @JsonProperty(value = "dataBindings")
    private Map<String, DataBinding> dataBindings;

    /*
     * The distributionConfiguration property.
     */
    @JsonProperty(value = "distributionConfiguration")
    private DistributionConfiguration distributionConfiguration;

    /**
     * Get the status property: Status of the job.
     *
     * @return the status value.
     */
    public JobStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Status of the job.
     *
     * @param status the status value to set.
     * @return the CommandJob object itself.
     */
    public CommandJob withStatus(JobStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the maxRunDurationSeconds property: The max run duration in seconds, after which the job will be cancelled.
     *
     * @return the maxRunDurationSeconds value.
     */
    public Long maxRunDurationSeconds() {
        return this.maxRunDurationSeconds;
    }

    /**
     * Set the maxRunDurationSeconds property: The max run duration in seconds, after which the job will be cancelled.
     *
     * @param maxRunDurationSeconds the maxRunDurationSeconds value to set.
     * @return the CommandJob object itself.
     */
    public CommandJob withMaxRunDurationSeconds(Long maxRunDurationSeconds) {
        this.maxRunDurationSeconds = maxRunDurationSeconds;
        return this;
    }

    /**
     * Get the codeConfiguration property: The codeConfiguration property.
     *
     * @return the codeConfiguration value.
     */
    public CodeConfiguration codeConfiguration() {
        return this.codeConfiguration;
    }

    /**
     * Set the codeConfiguration property: The codeConfiguration property.
     *
     * @param codeConfiguration the codeConfiguration value to set.
     * @return the CommandJob object itself.
     */
    public CommandJob withCodeConfiguration(CodeConfiguration codeConfiguration) {
        this.codeConfiguration = codeConfiguration;
        return this;
    }

    /**
     * Get the environmentId property: Environment specification of the job.
     *
     * @return the environmentId value.
     */
    public String environmentId() {
        return this.environmentId;
    }

    /**
     * Set the environmentId property: Environment specification of the job.
     *
     * @param environmentId the environmentId value to set.
     * @return the CommandJob object itself.
     */
    public CommandJob withEnvironmentId(String environmentId) {
        this.environmentId = environmentId;
        return this;
    }

    /**
     * Get the dataBindings property: Mapping of data bindings used in the job.
     *
     * @return the dataBindings value.
     */
    public Map<String, DataBinding> dataBindings() {
        return this.dataBindings;
    }

    /**
     * Set the dataBindings property: Mapping of data bindings used in the job.
     *
     * @param dataBindings the dataBindings value to set.
     * @return the CommandJob object itself.
     */
    public CommandJob withDataBindings(Map<String, DataBinding> dataBindings) {
        this.dataBindings = dataBindings;
        return this;
    }

    /**
     * Get the distributionConfiguration property: The distributionConfiguration property.
     *
     * @return the distributionConfiguration value.
     */
    public DistributionConfiguration distributionConfiguration() {
        return this.distributionConfiguration;
    }

    /**
     * Set the distributionConfiguration property: The distributionConfiguration property.
     *
     * @param distributionConfiguration the distributionConfiguration value to set.
     * @return the CommandJob object itself.
     */
    public CommandJob withDistributionConfiguration(DistributionConfiguration distributionConfiguration) {
        this.distributionConfiguration = distributionConfiguration;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public CommandJob withExperimentName(String experimentName) {
        super.withExperimentName(experimentName);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public CommandJob withComputeBinding(ComputeBinding computeBinding) {
        super.withComputeBinding(computeBinding);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public CommandJob withOutput(JobOutput output) {
        super.withOutput(output);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public CommandJob withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public CommandJob withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public CommandJob withProperties(Map<String, String> properties) {
        super.withProperties(properties);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (codeConfiguration() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property codeConfiguration in model CommandJob"));
        } else {
            codeConfiguration().validate();
        }
        if (dataBindings() != null) {
            dataBindings()
                .values()
                .forEach(
                    e -> {
                        if (e != null) {
                            e.validate();
                        }
                    });
        }
        if (distributionConfiguration() != null) {
            distributionConfiguration().validate();
        }
    }
}
