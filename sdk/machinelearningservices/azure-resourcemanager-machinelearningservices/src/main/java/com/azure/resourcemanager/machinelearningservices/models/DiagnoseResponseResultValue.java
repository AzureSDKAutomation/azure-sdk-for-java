// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearningservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Value of DiagnoseResponse. */
@Fluent
public final class DiagnoseResponseResultValue {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DiagnoseResponseResultValue.class);

    /*
     * UDR value
     */
    @JsonProperty(value = "UDR")
    private List<DiagnoseResult> udr;

    /*
     * NSG value
     */
    @JsonProperty(value = "NSG")
    private List<DiagnoseResult> nsg;

    /*
     * Resource Lock
     */
    @JsonProperty(value = "ResourceLock")
    private List<DiagnoseResult> resourceLock;

    /*
     * DNS Resolution
     */
    @JsonProperty(value = "DNSResolution")
    private List<DiagnoseResult> dnsResolution;

    /*
     * Storage Account
     */
    @JsonProperty(value = "StorageAccount")
    private List<DiagnoseResult> storageAccount;

    /*
     * The KeyVault
     */
    @JsonProperty(value = "KeyVault")
    private List<DiagnoseResult> keyVault;

    /*
     * Container Registry
     */
    @JsonProperty(value = "ContainerRegistry")
    private List<DiagnoseResult> containerRegistry;

    /*
     * Other items
     */
    @JsonProperty(value = "Others")
    private List<DiagnoseResult> others;

    /**
     * Get the udr property: UDR value.
     *
     * @return the udr value.
     */
    public List<DiagnoseResult> udr() {
        return this.udr;
    }

    /**
     * Set the udr property: UDR value.
     *
     * @param udr the udr value to set.
     * @return the DiagnoseResponseResultValue object itself.
     */
    public DiagnoseResponseResultValue withUdr(List<DiagnoseResult> udr) {
        this.udr = udr;
        return this;
    }

    /**
     * Get the nsg property: NSG value.
     *
     * @return the nsg value.
     */
    public List<DiagnoseResult> nsg() {
        return this.nsg;
    }

    /**
     * Set the nsg property: NSG value.
     *
     * @param nsg the nsg value to set.
     * @return the DiagnoseResponseResultValue object itself.
     */
    public DiagnoseResponseResultValue withNsg(List<DiagnoseResult> nsg) {
        this.nsg = nsg;
        return this;
    }

    /**
     * Get the resourceLock property: Resource Lock.
     *
     * @return the resourceLock value.
     */
    public List<DiagnoseResult> resourceLock() {
        return this.resourceLock;
    }

    /**
     * Set the resourceLock property: Resource Lock.
     *
     * @param resourceLock the resourceLock value to set.
     * @return the DiagnoseResponseResultValue object itself.
     */
    public DiagnoseResponseResultValue withResourceLock(List<DiagnoseResult> resourceLock) {
        this.resourceLock = resourceLock;
        return this;
    }

    /**
     * Get the dnsResolution property: DNS Resolution.
     *
     * @return the dnsResolution value.
     */
    public List<DiagnoseResult> dnsResolution() {
        return this.dnsResolution;
    }

    /**
     * Set the dnsResolution property: DNS Resolution.
     *
     * @param dnsResolution the dnsResolution value to set.
     * @return the DiagnoseResponseResultValue object itself.
     */
    public DiagnoseResponseResultValue withDnsResolution(List<DiagnoseResult> dnsResolution) {
        this.dnsResolution = dnsResolution;
        return this;
    }

    /**
     * Get the storageAccount property: Storage Account.
     *
     * @return the storageAccount value.
     */
    public List<DiagnoseResult> storageAccount() {
        return this.storageAccount;
    }

    /**
     * Set the storageAccount property: Storage Account.
     *
     * @param storageAccount the storageAccount value to set.
     * @return the DiagnoseResponseResultValue object itself.
     */
    public DiagnoseResponseResultValue withStorageAccount(List<DiagnoseResult> storageAccount) {
        this.storageAccount = storageAccount;
        return this;
    }

    /**
     * Get the keyVault property: The KeyVault.
     *
     * @return the keyVault value.
     */
    public List<DiagnoseResult> keyVault() {
        return this.keyVault;
    }

    /**
     * Set the keyVault property: The KeyVault.
     *
     * @param keyVault the keyVault value to set.
     * @return the DiagnoseResponseResultValue object itself.
     */
    public DiagnoseResponseResultValue withKeyVault(List<DiagnoseResult> keyVault) {
        this.keyVault = keyVault;
        return this;
    }

    /**
     * Get the containerRegistry property: Container Registry.
     *
     * @return the containerRegistry value.
     */
    public List<DiagnoseResult> containerRegistry() {
        return this.containerRegistry;
    }

    /**
     * Set the containerRegistry property: Container Registry.
     *
     * @param containerRegistry the containerRegistry value to set.
     * @return the DiagnoseResponseResultValue object itself.
     */
    public DiagnoseResponseResultValue withContainerRegistry(List<DiagnoseResult> containerRegistry) {
        this.containerRegistry = containerRegistry;
        return this;
    }

    /**
     * Get the others property: Other items.
     *
     * @return the others value.
     */
    public List<DiagnoseResult> others() {
        return this.others;
    }

    /**
     * Set the others property: Other items.
     *
     * @param others the others value to set.
     * @return the DiagnoseResponseResultValue object itself.
     */
    public DiagnoseResponseResultValue withOthers(List<DiagnoseResult> others) {
        this.others = others;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (udr() != null) {
            udr().forEach(e -> e.validate());
        }
        if (nsg() != null) {
            nsg().forEach(e -> e.validate());
        }
        if (resourceLock() != null) {
            resourceLock().forEach(e -> e.validate());
        }
        if (dnsResolution() != null) {
            dnsResolution().forEach(e -> e.validate());
        }
        if (storageAccount() != null) {
            storageAccount().forEach(e -> e.validate());
        }
        if (keyVault() != null) {
            keyVault().forEach(e -> e.validate());
        }
        if (containerRegistry() != null) {
            containerRegistry().forEach(e -> e.validate());
        }
        if (others() != null) {
            others().forEach(e -> e.validate());
        }
    }
}
