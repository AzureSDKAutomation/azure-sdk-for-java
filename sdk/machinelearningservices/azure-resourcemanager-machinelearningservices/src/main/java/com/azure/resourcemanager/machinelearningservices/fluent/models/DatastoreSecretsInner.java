// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearningservices.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.machinelearningservices.models.AccountKeyDatastoreSecrets;
import com.azure.resourcemanager.machinelearningservices.models.CertificateDatastoreSecrets;
import com.azure.resourcemanager.machinelearningservices.models.NoneDatastoreSecrets;
import com.azure.resourcemanager.machinelearningservices.models.SasDatastoreSecrets;
import com.azure.resourcemanager.machinelearningservices.models.ServicePrincipalDatastoreSecrets;
import com.azure.resourcemanager.machinelearningservices.models.SqlAdminDatastoreSecrets;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/** Base definition for datastore secrets. */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    include = JsonTypeInfo.As.PROPERTY,
    property = "secretsType",
    defaultImpl = DatastoreSecretsInner.class)
@JsonTypeName("DatastoreSecrets")
@JsonSubTypes({
    @JsonSubTypes.Type(name = "AccountKey", value = AccountKeyDatastoreSecrets.class),
    @JsonSubTypes.Type(name = "Certificate", value = CertificateDatastoreSecrets.class),
    @JsonSubTypes.Type(name = "None", value = NoneDatastoreSecrets.class),
    @JsonSubTypes.Type(name = "Sas", value = SasDatastoreSecrets.class),
    @JsonSubTypes.Type(name = "ServicePrincipal", value = ServicePrincipalDatastoreSecrets.class),
    @JsonSubTypes.Type(name = "SqlAdmin", value = SqlAdminDatastoreSecrets.class)
})
@Immutable
public class DatastoreSecretsInner {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DatastoreSecretsInner.class);

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
