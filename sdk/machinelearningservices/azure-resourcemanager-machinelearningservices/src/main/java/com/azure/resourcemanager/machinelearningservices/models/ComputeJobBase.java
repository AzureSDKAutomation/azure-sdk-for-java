// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearningservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.Map;

/** Compute job base definition. */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    include = JsonTypeInfo.As.PROPERTY,
    property = "jobType",
    defaultImpl = ComputeJobBase.class)
@JsonTypeName("ComputeJobBase")
@JsonSubTypes({
    @JsonSubTypes.Type(name = "Command", value = CommandJob.class),
    @JsonSubTypes.Type(name = "Sweep", value = SweepJob.class)
})
@Fluent
public class ComputeJobBase extends JobBase {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ComputeJobBase.class);

    /*
     * The name of the experiment the job belongs to. If not set, the job is
     * placed in the "Default" experiment.
     */
    @JsonProperty(value = "experimentName")
    private String experimentName;

    /*
     * Compute binding definition.
     */
    @JsonProperty(value = "computeBinding", required = true)
    private ComputeBinding computeBinding;

    /*
     * The output property.
     */
    @JsonProperty(value = "output")
    private JobOutput output;

    /**
     * Get the experimentName property: The name of the experiment the job belongs to. If not set, the job is placed in
     * the "Default" experiment.
     *
     * @return the experimentName value.
     */
    public String experimentName() {
        return this.experimentName;
    }

    /**
     * Set the experimentName property: The name of the experiment the job belongs to. If not set, the job is placed in
     * the "Default" experiment.
     *
     * @param experimentName the experimentName value to set.
     * @return the ComputeJobBase object itself.
     */
    public ComputeJobBase withExperimentName(String experimentName) {
        this.experimentName = experimentName;
        return this;
    }

    /**
     * Get the computeBinding property: Compute binding definition.
     *
     * @return the computeBinding value.
     */
    public ComputeBinding computeBinding() {
        return this.computeBinding;
    }

    /**
     * Set the computeBinding property: Compute binding definition.
     *
     * @param computeBinding the computeBinding value to set.
     * @return the ComputeJobBase object itself.
     */
    public ComputeJobBase withComputeBinding(ComputeBinding computeBinding) {
        this.computeBinding = computeBinding;
        return this;
    }

    /**
     * Get the output property: The output property.
     *
     * @return the output value.
     */
    public JobOutput output() {
        return this.output;
    }

    /**
     * Set the output property: The output property.
     *
     * @param output the output value to set.
     * @return the ComputeJobBase object itself.
     */
    public ComputeJobBase withOutput(JobOutput output) {
        this.output = output;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ComputeJobBase withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ComputeJobBase withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ComputeJobBase withProperties(Map<String, String> properties) {
        super.withProperties(properties);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (computeBinding() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property computeBinding in model ComputeJobBase"));
        } else {
            computeBinding().validate();
        }
        if (output() != null) {
            output().validate();
        }
    }
}
