// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearningservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.Map;

/** Base definition for a job. */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    include = JsonTypeInfo.As.PROPERTY,
    property = "jobType",
    defaultImpl = JobBase.class)
@JsonTypeName("JobBase")
@JsonSubTypes({
    @JsonSubTypes.Type(name = "Command", value = CommandJob.class),
    @JsonSubTypes.Type(name = "Sweep", value = SweepJob.class)
})
@Fluent
public class JobBase {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(JobBase.class);

    /*
     * The asset description text.
     */
    @JsonProperty(value = "description")
    private String description;

    /*
     * List of JobEndpoints.
     * For local jobs, a job endpoint will have an endpoint value of
     * FileStreamObject.
     */
    @JsonProperty(value = "interactionEndpoints", access = JsonProperty.Access.WRITE_ONLY)
    private Map<String, JobEndpoint> interactionEndpoints;

    /*
     * The asset property dictionary.
     */
    @JsonProperty(value = "properties")
    private Map<String, String> properties;

    /*
     * The provisioningState property.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private JobProvisioningState provisioningState;

    /*
     * Tag dictionary. Tags can be added, removed, and updated.
     */
    @JsonProperty(value = "tags")
    private Map<String, String> tags;

    /**
     * Get the description property: The asset description text.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The asset description text.
     *
     * @param description the description value to set.
     * @return the JobBase object itself.
     */
    public JobBase withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the interactionEndpoints property: List of JobEndpoints. For local jobs, a job endpoint will have an endpoint
     * value of FileStreamObject.
     *
     * @return the interactionEndpoints value.
     */
    public Map<String, JobEndpoint> interactionEndpoints() {
        return this.interactionEndpoints;
    }

    /**
     * Get the properties property: The asset property dictionary.
     *
     * @return the properties value.
     */
    public Map<String, String> properties() {
        return this.properties;
    }

    /**
     * Set the properties property: The asset property dictionary.
     *
     * @param properties the properties value to set.
     * @return the JobBase object itself.
     */
    public JobBase withProperties(Map<String, String> properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioningState property.
     *
     * @return the provisioningState value.
     */
    public JobProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the tags property: Tag dictionary. Tags can be added, removed, and updated.
     *
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Tag dictionary. Tags can be added, removed, and updated.
     *
     * @param tags the tags value to set.
     * @return the JobBase object itself.
     */
    public JobBase withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (interactionEndpoints() != null) {
            interactionEndpoints()
                .values()
                .forEach(
                    e -> {
                        if (e != null) {
                            e.validate();
                        }
                    });
        }
    }
}
