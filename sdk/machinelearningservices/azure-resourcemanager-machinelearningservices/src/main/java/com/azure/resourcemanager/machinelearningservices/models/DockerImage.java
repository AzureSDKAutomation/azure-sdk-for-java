// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearningservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/** Class to represent configuration settings for Docker Build. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "dockerSpecificationType")
@JsonTypeName("Image")
@Fluent
public final class DockerImage extends DockerSpecification {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DockerImage.class);

    /*
     * Image name of a custom base image.
     * <seealso
     * href="https://docs.microsoft.com/en-us/azure/machine-learning"
         + "/how-to-deploy-custom-docker-image#use-a-custom-base-image"
     * />
     */
    @JsonProperty(value = "dockerImageUri", required = true)
    private String dockerImageUri;

    /**
     * Get the dockerImageUri property: Image name of a custom base image. &lt;seealso
     * href="https://docs.microsoft.com/en-us/azure/machine-learning"
         + "/how-to-deploy-custom-docker-image#use-a-custom-base-image"
     * /&gt;.
     *
     * @return the dockerImageUri value.
     */
    public String dockerImageUri() {
        return this.dockerImageUri;
    }

    /**
     * Set the dockerImageUri property: Image name of a custom base image. &lt;seealso
     * href="https://docs.microsoft.com/en-us/azure/machine-learning"
         + "/how-to-deploy-custom-docker-image#use-a-custom-base-image"
     * /&gt;.
     *
     * @param dockerImageUri the dockerImageUri value to set.
     * @return the DockerImage object itself.
     */
    public DockerImage withDockerImageUri(String dockerImageUri) {
        this.dockerImageUri = dockerImageUri;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DockerImage withPlatform(DockerImagePlatform platform) {
        super.withPlatform(platform);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (dockerImageUri() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property dockerImageUri in model DockerImage"));
        }
    }
}
