// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearningservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/** The DeploymentConfigurationBase model. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "computeType")
@JsonTypeName("DeploymentConfigurationBase")
@Fluent
public final class DeploymentConfigurationBase {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DeploymentConfigurationBase.class);

    /*
     * The appInsightsEnabled property.
     */
    @JsonProperty(value = "appInsightsEnabled")
    private Boolean appInsightsEnabled;

    /*
     * The maxConcurrentRequestsPerInstance property.
     */
    @JsonProperty(value = "maxConcurrentRequestsPerInstance")
    private Integer maxConcurrentRequestsPerInstance;

    /*
     * The maxQueueWaitMs property.
     */
    @JsonProperty(value = "maxQueueWaitMs")
    private Integer maxQueueWaitMs;

    /*
     * The scoringTimeoutMs property.
     */
    @JsonProperty(value = "scoringTimeoutMs")
    private Integer scoringTimeoutMs;

    /*
     * The resource requirements for the container (cpu and memory).
     */
    @JsonProperty(value = "containerResourceRequirements")
    private ContainerResourceRequirements containerResourceRequirements;

    /*
     * The liveness probe requirements.
     */
    @JsonProperty(value = "livenessProbeRequirements")
    private LivenessProbeRequirements livenessProbeRequirements;

    /**
     * Get the appInsightsEnabled property: The appInsightsEnabled property.
     *
     * @return the appInsightsEnabled value.
     */
    public Boolean appInsightsEnabled() {
        return this.appInsightsEnabled;
    }

    /**
     * Set the appInsightsEnabled property: The appInsightsEnabled property.
     *
     * @param appInsightsEnabled the appInsightsEnabled value to set.
     * @return the DeploymentConfigurationBase object itself.
     */
    public DeploymentConfigurationBase withAppInsightsEnabled(Boolean appInsightsEnabled) {
        this.appInsightsEnabled = appInsightsEnabled;
        return this;
    }

    /**
     * Get the maxConcurrentRequestsPerInstance property: The maxConcurrentRequestsPerInstance property.
     *
     * @return the maxConcurrentRequestsPerInstance value.
     */
    public Integer maxConcurrentRequestsPerInstance() {
        return this.maxConcurrentRequestsPerInstance;
    }

    /**
     * Set the maxConcurrentRequestsPerInstance property: The maxConcurrentRequestsPerInstance property.
     *
     * @param maxConcurrentRequestsPerInstance the maxConcurrentRequestsPerInstance value to set.
     * @return the DeploymentConfigurationBase object itself.
     */
    public DeploymentConfigurationBase withMaxConcurrentRequestsPerInstance(Integer maxConcurrentRequestsPerInstance) {
        this.maxConcurrentRequestsPerInstance = maxConcurrentRequestsPerInstance;
        return this;
    }

    /**
     * Get the maxQueueWaitMs property: The maxQueueWaitMs property.
     *
     * @return the maxQueueWaitMs value.
     */
    public Integer maxQueueWaitMs() {
        return this.maxQueueWaitMs;
    }

    /**
     * Set the maxQueueWaitMs property: The maxQueueWaitMs property.
     *
     * @param maxQueueWaitMs the maxQueueWaitMs value to set.
     * @return the DeploymentConfigurationBase object itself.
     */
    public DeploymentConfigurationBase withMaxQueueWaitMs(Integer maxQueueWaitMs) {
        this.maxQueueWaitMs = maxQueueWaitMs;
        return this;
    }

    /**
     * Get the scoringTimeoutMs property: The scoringTimeoutMs property.
     *
     * @return the scoringTimeoutMs value.
     */
    public Integer scoringTimeoutMs() {
        return this.scoringTimeoutMs;
    }

    /**
     * Set the scoringTimeoutMs property: The scoringTimeoutMs property.
     *
     * @param scoringTimeoutMs the scoringTimeoutMs value to set.
     * @return the DeploymentConfigurationBase object itself.
     */
    public DeploymentConfigurationBase withScoringTimeoutMs(Integer scoringTimeoutMs) {
        this.scoringTimeoutMs = scoringTimeoutMs;
        return this;
    }

    /**
     * Get the containerResourceRequirements property: The resource requirements for the container (cpu and memory).
     *
     * @return the containerResourceRequirements value.
     */
    public ContainerResourceRequirements containerResourceRequirements() {
        return this.containerResourceRequirements;
    }

    /**
     * Set the containerResourceRequirements property: The resource requirements for the container (cpu and memory).
     *
     * @param containerResourceRequirements the containerResourceRequirements value to set.
     * @return the DeploymentConfigurationBase object itself.
     */
    public DeploymentConfigurationBase withContainerResourceRequirements(
        ContainerResourceRequirements containerResourceRequirements) {
        this.containerResourceRequirements = containerResourceRequirements;
        return this;
    }

    /**
     * Get the livenessProbeRequirements property: The liveness probe requirements.
     *
     * @return the livenessProbeRequirements value.
     */
    public LivenessProbeRequirements livenessProbeRequirements() {
        return this.livenessProbeRequirements;
    }

    /**
     * Set the livenessProbeRequirements property: The liveness probe requirements.
     *
     * @param livenessProbeRequirements the livenessProbeRequirements value to set.
     * @return the DeploymentConfigurationBase object itself.
     */
    public DeploymentConfigurationBase withLivenessProbeRequirements(
        LivenessProbeRequirements livenessProbeRequirements) {
        this.livenessProbeRequirements = livenessProbeRequirements;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (containerResourceRequirements() != null) {
            containerResourceRequirements().validate();
        }
        if (livenessProbeRequirements() != null) {
            livenessProbeRequirements().validate();
        }
    }
}
