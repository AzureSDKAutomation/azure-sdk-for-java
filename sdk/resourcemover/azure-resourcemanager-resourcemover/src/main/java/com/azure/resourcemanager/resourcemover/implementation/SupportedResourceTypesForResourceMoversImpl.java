// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcemover.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.resourcemover.fluent.SupportedResourceTypesForResourceMoversClient;
import com.azure.resourcemanager.resourcemover.fluent.models.SupportedResourceTypesForResourceMoverInner;
import com.azure.resourcemanager.resourcemover.models.SupportedResourceTypesForResourceMover;
import com.azure.resourcemanager.resourcemover.models.SupportedResourceTypesForResourceMovers;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class SupportedResourceTypesForResourceMoversImpl implements SupportedResourceTypesForResourceMovers {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(SupportedResourceTypesForResourceMoversImpl.class);

    private final SupportedResourceTypesForResourceMoversClient innerClient;

    private final com.azure.resourcemanager.resourcemover.ResourceMoverManager serviceManager;

    public SupportedResourceTypesForResourceMoversImpl(
        SupportedResourceTypesForResourceMoversClient innerClient,
        com.azure.resourcemanager.resourcemover.ResourceMoverManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public SupportedResourceTypesForResourceMover get() {
        SupportedResourceTypesForResourceMoverInner inner = this.serviceClient().get();
        if (inner != null) {
            return new SupportedResourceTypesForResourceMoverImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SupportedResourceTypesForResourceMover> getWithResponse(Context context) {
        Response<SupportedResourceTypesForResourceMoverInner> inner = this.serviceClient().getWithResponse(context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SupportedResourceTypesForResourceMoverImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private SupportedResourceTypesForResourceMoversClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.resourcemover.ResourceMoverManager manager() {
        return this.serviceManager;
    }
}
