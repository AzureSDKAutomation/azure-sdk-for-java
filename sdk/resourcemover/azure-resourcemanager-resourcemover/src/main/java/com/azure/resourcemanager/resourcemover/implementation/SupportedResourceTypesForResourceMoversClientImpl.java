// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcemover.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.resourcemover.fluent.SupportedResourceTypesForResourceMoversClient;
import com.azure.resourcemanager.resourcemover.fluent.models.SupportedResourceTypesForResourceMoverInner;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * SupportedResourceTypesForResourceMoversClient.
 */
public final class SupportedResourceTypesForResourceMoversClientImpl
    implements SupportedResourceTypesForResourceMoversClient {
    private final ClientLogger logger = new ClientLogger(SupportedResourceTypesForResourceMoversClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final SupportedResourceTypesForResourceMoversService service;

    /** The service client containing this operation class. */
    private final ResourceMoverServiceApiImpl client;

    /**
     * Initializes an instance of SupportedResourceTypesForResourceMoversClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    SupportedResourceTypesForResourceMoversClientImpl(ResourceMoverServiceApiImpl client) {
        this.service =
            RestProxy
                .create(
                    SupportedResourceTypesForResourceMoversService.class,
                    client.getHttpPipeline(),
                    client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ResourceMoverServiceApiSupportedResourceTypesForResourceMovers to be
     * used by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ResourceMoverService")
    private interface SupportedResourceTypesForResourceMoversService {
        @Headers({"Content-Type: application/json"})
        @Post("/providers/Microsoft.Migrate/operations/supportedResourceTypesForResourceMover")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SupportedResourceTypesForResourceMoverInner>> get(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets the supported resource types for resource mover. It also communicates whether the resource type requires
     * sync or not and whether the resource supports copy or migrate paradigm.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the supported resource types for resource mover.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SupportedResourceTypesForResourceMoverInner>> getWithResponseAsync() {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the supported resource types for resource mover. It also communicates whether the resource type requires
     * sync or not and whether the resource supports copy or migrate paradigm.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the supported resource types for resource mover.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SupportedResourceTypesForResourceMoverInner>> getWithResponseAsync(Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), accept, context);
    }

    /**
     * Gets the supported resource types for resource mover. It also communicates whether the resource type requires
     * sync or not and whether the resource supports copy or migrate paradigm.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the supported resource types for resource mover.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SupportedResourceTypesForResourceMoverInner> getAsync() {
        return getWithResponseAsync()
            .flatMap(
                (Response<SupportedResourceTypesForResourceMoverInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the supported resource types for resource mover. It also communicates whether the resource type requires
     * sync or not and whether the resource supports copy or migrate paradigm.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the supported resource types for resource mover.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SupportedResourceTypesForResourceMoverInner get() {
        return getAsync().block();
    }

    /**
     * Gets the supported resource types for resource mover. It also communicates whether the resource type requires
     * sync or not and whether the resource supports copy or migrate paradigm.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the supported resource types for resource mover.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SupportedResourceTypesForResourceMoverInner> getWithResponse(Context context) {
        return getWithResponseAsync(context).block();
    }
}
