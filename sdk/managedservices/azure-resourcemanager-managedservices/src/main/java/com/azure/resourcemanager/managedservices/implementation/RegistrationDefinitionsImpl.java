// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managedservices.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.managedservices.ManagedServicesManager;
import com.azure.resourcemanager.managedservices.fluent.RegistrationDefinitionsClient;
import com.azure.resourcemanager.managedservices.fluent.models.RegistrationDefinitionInner;
import com.azure.resourcemanager.managedservices.models.RegistrationDefinition;
import com.azure.resourcemanager.managedservices.models.RegistrationDefinitions;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class RegistrationDefinitionsImpl implements RegistrationDefinitions {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(RegistrationDefinitionsImpl.class);

    private final RegistrationDefinitionsClient innerClient;

    private final ManagedServicesManager serviceManager;

    public RegistrationDefinitionsImpl(
        RegistrationDefinitionsClient innerClient, ManagedServicesManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public RegistrationDefinition get(String scope, String registrationDefinitionId) {
        RegistrationDefinitionInner inner = this.serviceClient().get(scope, registrationDefinitionId);
        if (inner != null) {
            return new RegistrationDefinitionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<RegistrationDefinition> getWithResponse(
        String scope, String registrationDefinitionId, Context context) {
        Response<RegistrationDefinitionInner> inner =
            this.serviceClient().getWithResponse(scope, registrationDefinitionId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RegistrationDefinitionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String registrationDefinitionId, String scope) {
        this.serviceClient().delete(registrationDefinitionId, scope);
    }

    public Response<Void> deleteWithResponse(String registrationDefinitionId, String scope, Context context) {
        return this.serviceClient().deleteWithResponse(registrationDefinitionId, scope, context);
    }

    public RegistrationDefinition createOrUpdate(
        String registrationDefinitionId, String scope, RegistrationDefinitionInner requestBody) {
        RegistrationDefinitionInner inner =
            this.serviceClient().createOrUpdate(registrationDefinitionId, scope, requestBody);
        if (inner != null) {
            return new RegistrationDefinitionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public RegistrationDefinition createOrUpdate(
        String registrationDefinitionId, String scope, RegistrationDefinitionInner requestBody, Context context) {
        RegistrationDefinitionInner inner =
            this.serviceClient().createOrUpdate(registrationDefinitionId, scope, requestBody, context);
        if (inner != null) {
            return new RegistrationDefinitionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<RegistrationDefinition> list(String scope) {
        PagedIterable<RegistrationDefinitionInner> inner = this.serviceClient().list(scope);
        return inner.mapPage(inner1 -> new RegistrationDefinitionImpl(inner1, this.manager()));
    }

    public PagedIterable<RegistrationDefinition> list(String scope, Context context) {
        PagedIterable<RegistrationDefinitionInner> inner = this.serviceClient().list(scope, context);
        return inner.mapPage(inner1 -> new RegistrationDefinitionImpl(inner1, this.manager()));
    }

    private RegistrationDefinitionsClient serviceClient() {
        return this.innerClient;
    }

    private ManagedServicesManager manager() {
        return this.serviceManager;
    }
}
