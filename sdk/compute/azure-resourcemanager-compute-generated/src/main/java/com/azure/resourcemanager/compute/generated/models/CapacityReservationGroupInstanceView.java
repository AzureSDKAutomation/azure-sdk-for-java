// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.compute.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The CapacityReservationGroupInstanceView model. */
@Fluent
public final class CapacityReservationGroupInstanceView {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(CapacityReservationGroupInstanceView.class);

    /*
     * List of instance view of the Capacity Reservations under the Capacity
     * Reservation group.
     */
    @JsonProperty(value = "capacityReservations")
    private List<CapacityReservationInstanceViewWithName> capacityReservations;

    /**
     * Get the capacityReservations property: List of instance view of the Capacity Reservations under the Capacity
     * Reservation group.
     *
     * @return the capacityReservations value.
     */
    public List<CapacityReservationInstanceViewWithName> capacityReservations() {
        return this.capacityReservations;
    }

    /**
     * Set the capacityReservations property: List of instance view of the Capacity Reservations under the Capacity
     * Reservation group.
     *
     * @param capacityReservations the capacityReservations value to set.
     * @return the CapacityReservationGroupInstanceView object itself.
     */
    public CapacityReservationGroupInstanceView withCapacityReservations(
        List<CapacityReservationInstanceViewWithName> capacityReservations) {
        this.capacityReservations = capacityReservations;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (capacityReservations() != null) {
            capacityReservations().forEach(e -> e.validate());
        }
    }
}
