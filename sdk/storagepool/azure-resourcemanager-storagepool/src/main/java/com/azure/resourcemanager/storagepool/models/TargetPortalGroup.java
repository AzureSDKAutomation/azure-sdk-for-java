// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagepool.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Response properties for iSCSI target portal group. */
@Fluent
public final class TargetPortalGroup {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(TargetPortalGroup.class);

    /*
     * List of LUNs to be exposed through iSCSI Target Portal Group.
     */
    @JsonProperty(value = "luns", required = true)
    private List<IscsiLun> luns;

    /*
     * Access Control List (ACL) for an iSCSI Target Portal Group.
     */
    @JsonProperty(value = "acls", required = true)
    private List<Acl> acls;

    /*
     * Attributes of an iSCSI Target Portal Group.
     */
    @JsonProperty(value = "attributes", required = true)
    private Attributes attributes;

    /*
     * List of private IPv4 addresses to connect to the iSCSI Target.
     */
    @JsonProperty(value = "endpoints", required = true, access = JsonProperty.Access.WRITE_ONLY)
    private List<String> endpoints;

    /*
     * The tag associated with the iSCSI Target Portal Group.
     */
    @JsonProperty(value = "tag", required = true, access = JsonProperty.Access.WRITE_ONLY)
    private int tag;

    /*
     * The port used by iSCSI Target Portal Group.
     */
    @JsonProperty(value = "port", required = true, access = JsonProperty.Access.WRITE_ONLY)
    private int port;

    /**
     * Get the luns property: List of LUNs to be exposed through iSCSI Target Portal Group.
     *
     * @return the luns value.
     */
    public List<IscsiLun> luns() {
        return this.luns;
    }

    /**
     * Set the luns property: List of LUNs to be exposed through iSCSI Target Portal Group.
     *
     * @param luns the luns value to set.
     * @return the TargetPortalGroup object itself.
     */
    public TargetPortalGroup withLuns(List<IscsiLun> luns) {
        this.luns = luns;
        return this;
    }

    /**
     * Get the acls property: Access Control List (ACL) for an iSCSI Target Portal Group.
     *
     * @return the acls value.
     */
    public List<Acl> acls() {
        return this.acls;
    }

    /**
     * Set the acls property: Access Control List (ACL) for an iSCSI Target Portal Group.
     *
     * @param acls the acls value to set.
     * @return the TargetPortalGroup object itself.
     */
    public TargetPortalGroup withAcls(List<Acl> acls) {
        this.acls = acls;
        return this;
    }

    /**
     * Get the attributes property: Attributes of an iSCSI Target Portal Group.
     *
     * @return the attributes value.
     */
    public Attributes attributes() {
        return this.attributes;
    }

    /**
     * Set the attributes property: Attributes of an iSCSI Target Portal Group.
     *
     * @param attributes the attributes value to set.
     * @return the TargetPortalGroup object itself.
     */
    public TargetPortalGroup withAttributes(Attributes attributes) {
        this.attributes = attributes;
        return this;
    }

    /**
     * Get the endpoints property: List of private IPv4 addresses to connect to the iSCSI Target.
     *
     * @return the endpoints value.
     */
    public List<String> endpoints() {
        return this.endpoints;
    }

    /**
     * Get the tag property: The tag associated with the iSCSI Target Portal Group.
     *
     * @return the tag value.
     */
    public int tag() {
        return this.tag;
    }

    /**
     * Get the port property: The port used by iSCSI Target Portal Group.
     *
     * @return the port value.
     */
    public int port() {
        return this.port;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (luns() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property luns in model TargetPortalGroup"));
        } else {
            luns().forEach(e -> e.validate());
        }
        if (acls() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property acls in model TargetPortalGroup"));
        } else {
            acls().forEach(e -> e.validate());
        }
        if (attributes() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property attributes in model TargetPortalGroup"));
        } else {
            attributes().validate();
        }
    }
}
