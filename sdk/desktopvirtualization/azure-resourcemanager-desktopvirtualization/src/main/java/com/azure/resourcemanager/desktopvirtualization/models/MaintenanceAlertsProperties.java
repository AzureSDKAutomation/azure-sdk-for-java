// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Properties for host pool update maintenance alerts. */
@Fluent
public final class MaintenanceAlertsProperties {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(MaintenanceAlertsProperties.class);

    /*
     * The path to the legacy object to migrate.
     */
    @JsonProperty(value = "message")
    private String message;

    /*
     * The time maintenance notification will be sent relative to before/after
     * the update kickoff in minutes.
     */
    @JsonProperty(value = "duration")
    private Integer duration;

    /*
     * Whether to send maintenance alert after or before hostpool update. False
     * by default.
     */
    @JsonProperty(value = "beforeKickOff")
    private Boolean beforeKickOff;

    /**
     * Get the message property: The path to the legacy object to migrate.
     *
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Set the message property: The path to the legacy object to migrate.
     *
     * @param message the message value to set.
     * @return the MaintenanceAlertsProperties object itself.
     */
    public MaintenanceAlertsProperties withMessage(String message) {
        this.message = message;
        return this;
    }

    /**
     * Get the duration property: The time maintenance notification will be sent relative to before/after the update
     * kickoff in minutes.
     *
     * @return the duration value.
     */
    public Integer duration() {
        return this.duration;
    }

    /**
     * Set the duration property: The time maintenance notification will be sent relative to before/after the update
     * kickoff in minutes.
     *
     * @param duration the duration value to set.
     * @return the MaintenanceAlertsProperties object itself.
     */
    public MaintenanceAlertsProperties withDuration(Integer duration) {
        this.duration = duration;
        return this;
    }

    /**
     * Get the beforeKickOff property: Whether to send maintenance alert after or before hostpool update. False by
     * default.
     *
     * @return the beforeKickOff value.
     */
    public Boolean beforeKickOff() {
        return this.beforeKickOff;
    }

    /**
     * Set the beforeKickOff property: Whether to send maintenance alert after or before hostpool update. False by
     * default.
     *
     * @param beforeKickOff the beforeKickOff value to set.
     * @return the MaintenanceAlertsProperties object itself.
     */
    public MaintenanceAlertsProperties withBeforeKickOff(Boolean beforeKickOff) {
        this.beforeKickOff = beforeKickOff;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
