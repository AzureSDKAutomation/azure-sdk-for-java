// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Credentials needed to create the virtual machine. */
@Fluent
public final class CredentialsProperties {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(CredentialsProperties.class);

    /*
     * The local admin credentials.
     */
    @JsonProperty(value = "localAdmin")
    private KeyVaultCredentialProperties localAdmin;

    /*
     * The domain admin credentials.
     */
    @JsonProperty(value = "domainAdmin")
    private KeyVaultCredentialProperties domainAdmin;

    /**
     * Get the localAdmin property: The local admin credentials.
     *
     * @return the localAdmin value.
     */
    public KeyVaultCredentialProperties localAdmin() {
        return this.localAdmin;
    }

    /**
     * Set the localAdmin property: The local admin credentials.
     *
     * @param localAdmin the localAdmin value to set.
     * @return the CredentialsProperties object itself.
     */
    public CredentialsProperties withLocalAdmin(KeyVaultCredentialProperties localAdmin) {
        this.localAdmin = localAdmin;
        return this;
    }

    /**
     * Get the domainAdmin property: The domain admin credentials.
     *
     * @return the domainAdmin value.
     */
    public KeyVaultCredentialProperties domainAdmin() {
        return this.domainAdmin;
    }

    /**
     * Set the domainAdmin property: The domain admin credentials.
     *
     * @param domainAdmin the domainAdmin value to set.
     * @return the CredentialsProperties object itself.
     */
    public CredentialsProperties withDomainAdmin(KeyVaultCredentialProperties domainAdmin) {
        this.domainAdmin = domainAdmin;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (localAdmin() != null) {
            localAdmin().validate();
        }
        if (domainAdmin() != null) {
            domainAdmin().validate();
        }
    }
}
