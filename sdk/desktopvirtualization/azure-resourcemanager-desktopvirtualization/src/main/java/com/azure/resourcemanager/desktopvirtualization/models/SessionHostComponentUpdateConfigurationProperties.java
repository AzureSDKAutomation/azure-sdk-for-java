// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The session host configuration for updating agent, monitoring agent, and stack component. */
@Fluent
public final class SessionHostComponentUpdateConfigurationProperties {
    @JsonIgnore
    private final ClientLogger logger = new ClientLogger(SessionHostComponentUpdateConfigurationProperties.class);

    /*
     * The type of maintenance for session host components.
     */
    @JsonProperty(value = "maintenanceType")
    private SessionHostComponentUpdateType maintenanceType;

    /*
     * Whether to use localTime of the virtual machine.
     */
    @JsonProperty(value = "useSessionHostLocalTime")
    private Boolean useSessionHostLocalTime;

    /*
     * Time zone for maintenance as defined in
     * https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.findsystemtimezonebyid?view=net-5.0.
     * Must be set if useLocalTime is true.
     */
    @JsonProperty(value = "maintenanceWindowTimeZone")
    private String maintenanceWindowTimeZone;

    /*
     * Primary Window of the maintenance. Maintenance windows are 2 hours long.
     * We try to push component update in this window first.
     */
    @JsonProperty(value = "primaryWindow")
    private MaintenanceWindowProperties primaryWindow;

    /*
     * Secondary maintenance windows. Maintenance windows are 2 hours long. We
     * try to exercise this only when the primary window update fails.
     */
    @JsonProperty(value = "secondaryWindow")
    private SecondaryWindowProperties secondaryWindow;

    /**
     * Get the maintenanceType property: The type of maintenance for session host components.
     *
     * @return the maintenanceType value.
     */
    public SessionHostComponentUpdateType maintenanceType() {
        return this.maintenanceType;
    }

    /**
     * Set the maintenanceType property: The type of maintenance for session host components.
     *
     * @param maintenanceType the maintenanceType value to set.
     * @return the SessionHostComponentUpdateConfigurationProperties object itself.
     */
    public SessionHostComponentUpdateConfigurationProperties withMaintenanceType(
        SessionHostComponentUpdateType maintenanceType) {
        this.maintenanceType = maintenanceType;
        return this;
    }

    /**
     * Get the useSessionHostLocalTime property: Whether to use localTime of the virtual machine.
     *
     * @return the useSessionHostLocalTime value.
     */
    public Boolean useSessionHostLocalTime() {
        return this.useSessionHostLocalTime;
    }

    /**
     * Set the useSessionHostLocalTime property: Whether to use localTime of the virtual machine.
     *
     * @param useSessionHostLocalTime the useSessionHostLocalTime value to set.
     * @return the SessionHostComponentUpdateConfigurationProperties object itself.
     */
    public SessionHostComponentUpdateConfigurationProperties withUseSessionHostLocalTime(
        Boolean useSessionHostLocalTime) {
        this.useSessionHostLocalTime = useSessionHostLocalTime;
        return this;
    }

    /**
     * Get the maintenanceWindowTimeZone property: Time zone for maintenance as defined in
     * https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.findsystemtimezonebyid?view=net-5.0. Must be set
     * if useLocalTime is true.
     *
     * @return the maintenanceWindowTimeZone value.
     */
    public String maintenanceWindowTimeZone() {
        return this.maintenanceWindowTimeZone;
    }

    /**
     * Set the maintenanceWindowTimeZone property: Time zone for maintenance as defined in
     * https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.findsystemtimezonebyid?view=net-5.0. Must be set
     * if useLocalTime is true.
     *
     * @param maintenanceWindowTimeZone the maintenanceWindowTimeZone value to set.
     * @return the SessionHostComponentUpdateConfigurationProperties object itself.
     */
    public SessionHostComponentUpdateConfigurationProperties withMaintenanceWindowTimeZone(
        String maintenanceWindowTimeZone) {
        this.maintenanceWindowTimeZone = maintenanceWindowTimeZone;
        return this;
    }

    /**
     * Get the primaryWindow property: Primary Window of the maintenance. Maintenance windows are 2 hours long. We try
     * to push component update in this window first.
     *
     * @return the primaryWindow value.
     */
    public MaintenanceWindowProperties primaryWindow() {
        return this.primaryWindow;
    }

    /**
     * Set the primaryWindow property: Primary Window of the maintenance. Maintenance windows are 2 hours long. We try
     * to push component update in this window first.
     *
     * @param primaryWindow the primaryWindow value to set.
     * @return the SessionHostComponentUpdateConfigurationProperties object itself.
     */
    public SessionHostComponentUpdateConfigurationProperties withPrimaryWindow(
        MaintenanceWindowProperties primaryWindow) {
        this.primaryWindow = primaryWindow;
        return this;
    }

    /**
     * Get the secondaryWindow property: Secondary maintenance windows. Maintenance windows are 2 hours long. We try to
     * exercise this only when the primary window update fails.
     *
     * @return the secondaryWindow value.
     */
    public SecondaryWindowProperties secondaryWindow() {
        return this.secondaryWindow;
    }

    /**
     * Set the secondaryWindow property: Secondary maintenance windows. Maintenance windows are 2 hours long. We try to
     * exercise this only when the primary window update fails.
     *
     * @param secondaryWindow the secondaryWindow value to set.
     * @return the SessionHostComponentUpdateConfigurationProperties object itself.
     */
    public SessionHostComponentUpdateConfigurationProperties withSecondaryWindow(
        SecondaryWindowProperties secondaryWindow) {
        this.secondaryWindow = secondaryWindow;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (primaryWindow() != null) {
            primaryWindow().validate();
        }
        if (secondaryWindow() != null) {
            secondaryWindow().validate();
        }
    }
}
