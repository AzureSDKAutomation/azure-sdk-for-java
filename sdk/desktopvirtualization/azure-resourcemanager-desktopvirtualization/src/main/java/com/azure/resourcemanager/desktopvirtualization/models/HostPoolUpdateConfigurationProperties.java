// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The configurations of a hostpool update. */
@Fluent
public final class HostPoolUpdateConfigurationProperties {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(HostPoolUpdateConfigurationProperties.class);

    /*
     * Whether to save original disk. False by default.
     */
    @JsonProperty(value = "saveOriginalDisk")
    private Boolean saveOriginalDisk;

    /*
     * The maximum virtual machines to be removed during hostpool update.
     */
    @JsonProperty(value = "maxVMsRemovedDuringUpdate")
    private Integer maxVMsRemovedDuringUpdate;

    /*
     * The alerts given to customers for hostpool update.
     */
    @JsonProperty(value = "maintenanceAlerts")
    private List<MaintenanceAlertsProperties> maintenanceAlerts;

    /*
     * Grace period before logging off users in seconds.
     */
    @JsonProperty(value = "logOffDelaySeconds")
    private Integer logOffDelaySeconds;

    /*
     * Log off message sent to user for logoff.
     */
    @JsonProperty(value = "logOffMessage")
    private String logOffMessage;

    /*
     * When set schedules the hostpool update at specific time.
     */
    @JsonProperty(value = "scheduledTime")
    private ScheduledTimeProperties scheduledTime;

    /**
     * Get the saveOriginalDisk property: Whether to save original disk. False by default.
     *
     * @return the saveOriginalDisk value.
     */
    public Boolean saveOriginalDisk() {
        return this.saveOriginalDisk;
    }

    /**
     * Set the saveOriginalDisk property: Whether to save original disk. False by default.
     *
     * @param saveOriginalDisk the saveOriginalDisk value to set.
     * @return the HostPoolUpdateConfigurationProperties object itself.
     */
    public HostPoolUpdateConfigurationProperties withSaveOriginalDisk(Boolean saveOriginalDisk) {
        this.saveOriginalDisk = saveOriginalDisk;
        return this;
    }

    /**
     * Get the maxVMsRemovedDuringUpdate property: The maximum virtual machines to be removed during hostpool update.
     *
     * @return the maxVMsRemovedDuringUpdate value.
     */
    public Integer maxVMsRemovedDuringUpdate() {
        return this.maxVMsRemovedDuringUpdate;
    }

    /**
     * Set the maxVMsRemovedDuringUpdate property: The maximum virtual machines to be removed during hostpool update.
     *
     * @param maxVMsRemovedDuringUpdate the maxVMsRemovedDuringUpdate value to set.
     * @return the HostPoolUpdateConfigurationProperties object itself.
     */
    public HostPoolUpdateConfigurationProperties withMaxVMsRemovedDuringUpdate(Integer maxVMsRemovedDuringUpdate) {
        this.maxVMsRemovedDuringUpdate = maxVMsRemovedDuringUpdate;
        return this;
    }

    /**
     * Get the maintenanceAlerts property: The alerts given to customers for hostpool update.
     *
     * @return the maintenanceAlerts value.
     */
    public List<MaintenanceAlertsProperties> maintenanceAlerts() {
        return this.maintenanceAlerts;
    }

    /**
     * Set the maintenanceAlerts property: The alerts given to customers for hostpool update.
     *
     * @param maintenanceAlerts the maintenanceAlerts value to set.
     * @return the HostPoolUpdateConfigurationProperties object itself.
     */
    public HostPoolUpdateConfigurationProperties withMaintenanceAlerts(
        List<MaintenanceAlertsProperties> maintenanceAlerts) {
        this.maintenanceAlerts = maintenanceAlerts;
        return this;
    }

    /**
     * Get the logOffDelaySeconds property: Grace period before logging off users in seconds.
     *
     * @return the logOffDelaySeconds value.
     */
    public Integer logOffDelaySeconds() {
        return this.logOffDelaySeconds;
    }

    /**
     * Set the logOffDelaySeconds property: Grace period before logging off users in seconds.
     *
     * @param logOffDelaySeconds the logOffDelaySeconds value to set.
     * @return the HostPoolUpdateConfigurationProperties object itself.
     */
    public HostPoolUpdateConfigurationProperties withLogOffDelaySeconds(Integer logOffDelaySeconds) {
        this.logOffDelaySeconds = logOffDelaySeconds;
        return this;
    }

    /**
     * Get the logOffMessage property: Log off message sent to user for logoff.
     *
     * @return the logOffMessage value.
     */
    public String logOffMessage() {
        return this.logOffMessage;
    }

    /**
     * Set the logOffMessage property: Log off message sent to user for logoff.
     *
     * @param logOffMessage the logOffMessage value to set.
     * @return the HostPoolUpdateConfigurationProperties object itself.
     */
    public HostPoolUpdateConfigurationProperties withLogOffMessage(String logOffMessage) {
        this.logOffMessage = logOffMessage;
        return this;
    }

    /**
     * Get the scheduledTime property: When set schedules the hostpool update at specific time.
     *
     * @return the scheduledTime value.
     */
    public ScheduledTimeProperties scheduledTime() {
        return this.scheduledTime;
    }

    /**
     * Set the scheduledTime property: When set schedules the hostpool update at specific time.
     *
     * @param scheduledTime the scheduledTime value to set.
     * @return the HostPoolUpdateConfigurationProperties object itself.
     */
    public HostPoolUpdateConfigurationProperties withScheduledTime(ScheduledTimeProperties scheduledTime) {
        this.scheduledTime = scheduledTime;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (maintenanceAlerts() != null) {
            maintenanceAlerts().forEach(e -> e.validate());
        }
        if (scheduledTime() != null) {
            scheduledTime().validate();
        }
    }
}
