// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Image configurations of session host in a HostPool. */
@Fluent
public final class ImageInfoProperties {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ImageInfoProperties.class);

    /*
     * The type of image session hosts use in the hostpool.
     */
    @JsonProperty(value = "type")
    private ImageType type;

    /*
     * The values to uniquely identify a gallery image.
     */
    @JsonProperty(value = "marketPlaceInfo")
    private MarketPlaceInfoProperties marketPlaceInfo;

    /*
     * The uri to the storage blob which contains the VHD. Image type must be
     * StorageBlob.
     */
    @JsonProperty(value = "storageBlobUri")
    private String storageBlobUri;

    /*
     * The resource id of the custom image or shared image. Image type must be
     * CustomImage.
     */
    @JsonProperty(value = "customId")
    private String customId;

    /**
     * Get the type property: The type of image session hosts use in the hostpool.
     *
     * @return the type value.
     */
    public ImageType type() {
        return this.type;
    }

    /**
     * Set the type property: The type of image session hosts use in the hostpool.
     *
     * @param type the type value to set.
     * @return the ImageInfoProperties object itself.
     */
    public ImageInfoProperties withType(ImageType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the marketPlaceInfo property: The values to uniquely identify a gallery image.
     *
     * @return the marketPlaceInfo value.
     */
    public MarketPlaceInfoProperties marketPlaceInfo() {
        return this.marketPlaceInfo;
    }

    /**
     * Set the marketPlaceInfo property: The values to uniquely identify a gallery image.
     *
     * @param marketPlaceInfo the marketPlaceInfo value to set.
     * @return the ImageInfoProperties object itself.
     */
    public ImageInfoProperties withMarketPlaceInfo(MarketPlaceInfoProperties marketPlaceInfo) {
        this.marketPlaceInfo = marketPlaceInfo;
        return this;
    }

    /**
     * Get the storageBlobUri property: The uri to the storage blob which contains the VHD. Image type must be
     * StorageBlob.
     *
     * @return the storageBlobUri value.
     */
    public String storageBlobUri() {
        return this.storageBlobUri;
    }

    /**
     * Set the storageBlobUri property: The uri to the storage blob which contains the VHD. Image type must be
     * StorageBlob.
     *
     * @param storageBlobUri the storageBlobUri value to set.
     * @return the ImageInfoProperties object itself.
     */
    public ImageInfoProperties withStorageBlobUri(String storageBlobUri) {
        this.storageBlobUri = storageBlobUri;
        return this;
    }

    /**
     * Get the customId property: The resource id of the custom image or shared image. Image type must be CustomImage.
     *
     * @return the customId value.
     */
    public String customId() {
        return this.customId;
    }

    /**
     * Set the customId property: The resource id of the custom image or shared image. Image type must be CustomImage.
     *
     * @param customId the customId value to set.
     * @return the ImageInfoProperties object itself.
     */
    public ImageInfoProperties withCustomId(String customId) {
        this.customId = customId;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (marketPlaceInfo() != null) {
            marketPlaceInfo().validate();
        }
    }
}
