// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The report for session host information. */
@Immutable
public final class SessionHostHealthCheckReport {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(SessionHostHealthCheckReport.class);

    /*
     * Represents the name of the health check operation performed.
     * DomainJoinedCheck - Verifies the SessionHost is joined to a domain. If
     * this check fails is classified as fatal as no connection can succeed if
     * the SessionHost is not joined to the domain. DomainTrustCheck - Verifies
     * the SessionHost is not experiencing domain trust issues that will
     * prevent authentication on SessionHost at connection time when session is
     * created. If this check fails is classified as fatal as no connection can
     * succeed if we cannot reach the domain for authentication on the
     * SessionHost. FSLogixHealthCheck - Verifies the FSLogix service is up and
     * running to make sure users' profiles are loaded in the session. If this
     * check fails is classified as fatal as even if the connection can
     * succeed, user experience is bad as the user profile cannot be loaded and
     * user will get a temporary profile in the session. SxSStackListenerCheck
     * - Verifies that the SxS stack is up and running so connections can
     * succeed. If this check fails is classified as fatal as no connection can
     * succeed if the SxS stack is not ready. UrlsAccessibleCheck - Verifies
     * that the required WVD service and Geneva URLs are reachable from the
     * SessionHost. These URLs are: RdTokenUri, RdBrokerURI, RdDiagnosticsUri
     * and storage blob URLs for agent monitoring (geneva). If this check
     * fails, it is non fatal and the machine still can service connections,
     * main issue may be that monitoring agent is unable to store warm path
     * data (logs, operations ...). MonitoringAgentCheck - Verifies that the
     * required Geneva agent is running. If this check fails, it is non fatal
     * and the machine still can service connections, main issue may be that
     * monitoring agent is missing or running (possibly) older version.
     * DomainReachable - Verifies the domain the SessionHost is joined to is
     * still reachable. If this check fails is classified as fatal as no
     * connection can succeed if the domain the SessionHost is joined is not
     * reachable at the time of connection. WebRTCRedirectorCheck - Verifies
     * whether the WebRTCRedirector component is healthy. The WebRTCRedirector
     * component is used to optimize video and audio performance in Microsoft
     * Teams. This checks whether the component is still running, and whether
     * there is a higher version available. If this check fails, it is non
     * fatal and the machine still can service connections, main issue may be
     * the WebRTCRedirector component has to be restarted or updated.
     * SupportedEncryptionCheck - Verifies the value of SecurityLayer
     * registration key. If the value is 0 (SecurityLayer.RDP) this check fails
     * with Error code = NativeMethodErrorCode.E_FAIL and is fatal. If the
     * value is 1 (SecurityLayer.Negotiate) this check fails with Error code =
     * NativeMethodErrorCode.ERROR_SUCCESS and is non fatal.
     * MetaDataServiceCheck - Verifies the metadata service is accessible and
     * return compute properties. AppAttachHealthCheck - Verifies that the
     * AppAttachService is healthy (there were no issues during package
     * staging). The AppAttachService is used to enable the
     * staging/registration (and eventual deregistration/destaging) of MSIX
     * apps that have been set up by the tenant admin. This checks whether the
     * component had any failures during package staging. Failures in staging
     * will prevent some MSIX apps from working properly for the end user. If
     * this check fails, it is non fatal and the machine still can service
     * connections, main issue may be certain apps will not work for end-users.
     */
    @JsonProperty(value = "healthCheckName", access = JsonProperty.Access.WRITE_ONLY)
    private HealthCheckName healthCheckName;

    /*
     * Represents the Health state of the health check we performed. Unknown -
     * Health check result is not currently known. HealthCheckSucceeded -
     * Health check passed. HealthCheckFailed - Health check failed.
     * SessionHostShutdown - We received a Shutdown notification.
     */
    @JsonProperty(value = "healthCheckResult", access = JsonProperty.Access.WRITE_ONLY)
    private HealthCheckResult healthCheckResult;

    /*
     * Additional detailed information on the failure.
     */
    @JsonProperty(value = "additionalFailureDetails", access = JsonProperty.Access.WRITE_ONLY)
    private SessionHostHealthCheckFailureDetails additionalFailureDetails;

    /**
     * Get the healthCheckName property: Represents the name of the health check operation performed. DomainJoinedCheck
     * - Verifies the SessionHost is joined to a domain. If this check fails is classified as fatal as no connection can
     * succeed if the SessionHost is not joined to the domain. DomainTrustCheck - Verifies the SessionHost is not
     * experiencing domain trust issues that will prevent authentication on SessionHost at connection time when session
     * is created. If this check fails is classified as fatal as no connection can succeed if we cannot reach the domain
     * for authentication on the SessionHost. FSLogixHealthCheck - Verifies the FSLogix service is up and running to
     * make sure users' profiles are loaded in the session. If this check fails is classified as fatal as even if the
     * connection can succeed, user experience is bad as the user profile cannot be loaded and user will get a temporary
     * profile in the session. SxSStackListenerCheck - Verifies that the SxS stack is up and running so connections can
     * succeed. If this check fails is classified as fatal as no connection can succeed if the SxS stack is not ready.
     * UrlsAccessibleCheck - Verifies that the required WVD service and Geneva URLs are reachable from the SessionHost.
     * These URLs are: RdTokenUri, RdBrokerURI, RdDiagnosticsUri and storage blob URLs for agent monitoring (geneva). If
     * this check fails, it is non fatal and the machine still can service connections, main issue may be that
     * monitoring agent is unable to store warm path data (logs, operations ...). MonitoringAgentCheck - Verifies that
     * the required Geneva agent is running. If this check fails, it is non fatal and the machine still can service
     * connections, main issue may be that monitoring agent is missing or running (possibly) older version.
     * DomainReachable - Verifies the domain the SessionHost is joined to is still reachable. If this check fails is
     * classified as fatal as no connection can succeed if the domain the SessionHost is joined is not reachable at the
     * time of connection. WebRTCRedirectorCheck - Verifies whether the WebRTCRedirector component is healthy. The
     * WebRTCRedirector component is used to optimize video and audio performance in Microsoft Teams. This checks
     * whether the component is still running, and whether there is a higher version available. If this check fails, it
     * is non fatal and the machine still can service connections, main issue may be the WebRTCRedirector component has
     * to be restarted or updated. SupportedEncryptionCheck - Verifies the value of SecurityLayer registration key. If
     * the value is 0 (SecurityLayer.RDP) this check fails with Error code = NativeMethodErrorCode.E_FAIL and is fatal.
     * If the value is 1 (SecurityLayer.Negotiate) this check fails with Error code =
     * NativeMethodErrorCode.ERROR_SUCCESS and is non fatal. MetaDataServiceCheck - Verifies the metadata service is
     * accessible and return compute properties. AppAttachHealthCheck - Verifies that the AppAttachService is healthy
     * (there were no issues during package staging). The AppAttachService is used to enable the staging/registration
     * (and eventual deregistration/destaging) of MSIX apps that have been set up by the tenant admin. This checks
     * whether the component had any failures during package staging. Failures in staging will prevent some MSIX apps
     * from working properly for the end user. If this check fails, it is non fatal and the machine still can service
     * connections, main issue may be certain apps will not work for end-users.
     *
     * @return the healthCheckName value.
     */
    public HealthCheckName healthCheckName() {
        return this.healthCheckName;
    }

    /**
     * Get the healthCheckResult property: Represents the Health state of the health check we performed. Unknown -
     * Health check result is not currently known. HealthCheckSucceeded - Health check passed. HealthCheckFailed -
     * Health check failed. SessionHostShutdown - We received a Shutdown notification.
     *
     * @return the healthCheckResult value.
     */
    public HealthCheckResult healthCheckResult() {
        return this.healthCheckResult;
    }

    /**
     * Get the additionalFailureDetails property: Additional detailed information on the failure.
     *
     * @return the additionalFailureDetails value.
     */
    public SessionHostHealthCheckFailureDetails additionalFailureDetails() {
        return this.additionalFailureDetails;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (additionalFailureDetails() != null) {
            additionalFailureDetails().validate();
        }
    }
}
