/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.hdinsight.job.models;

import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The SparkBatchJobRequest model.
 */
public class SparkBatchJobRequest {
    /**
     * File containing the application to execute.
     */
    @JsonProperty(value = "file")
    private String file;

    /**
     * User to impersonate when running the job.
     */
    @JsonProperty(value = "proxyUser")
    private String proxyUser;

    /**
     * Application Java/Spark main class.
     */
    @JsonProperty(value = "className")
    private String className;

    /**
     * Command line arguments for the application.
     */
    @JsonProperty(value = "args")
    private List<String> arguments;

    /**
     * Jars to be used in this batch job.
     */
    @JsonProperty(value = "jars")
    private List<String> jars;

    /**
     * Python files to be used in this batch job.
     */
    @JsonProperty(value = "pyFiles")
    private List<String> pythonFiles;

    /**
     * Files to be used in this batch job.
     */
    @JsonProperty(value = "files")
    private List<String> files;

    /**
     * Amount of memory to use for the driver process.
     */
    @JsonProperty(value = "driverMemory")
    private String driverMemory;

    /**
     * Number of cores to use for the driver process.
     */
    @JsonProperty(value = "driverCores")
    private Integer driverCores;

    /**
     * Amount of memory to use per executor process.
     */
    @JsonProperty(value = "executorMemory")
    private String executorMemory;

    /**
     * Number of cores to use for each executor.
     */
    @JsonProperty(value = "executorCores")
    private Integer executorCores;

    /**
     * Number of executors to launch for this batch job.
     */
    @JsonProperty(value = "numExecutors")
    private Integer executorCount;

    /**
     * Archives to be used in this batch job.
     */
    @JsonProperty(value = "archives")
    private List<String> archives;

    /**
     * The name of the YARN queue to which submitted.
     */
    @JsonProperty(value = "queue")
    private String queue;

    /**
     * The name of this batch job.
     */
    @JsonProperty(value = "name")
    private String name;

    /**
     * Spark configuration properties.
     */
    @JsonProperty(value = "conf")
    private Map<String, String> configuration;

    /**
     * Get file containing the application to execute.
     *
     * @return the file value
     */
    public String file() {
        return this.file;
    }

    /**
     * Set file containing the application to execute.
     *
     * @param file the file value to set
     * @return the SparkBatchJobRequest object itself.
     */
    public SparkBatchJobRequest withFile(String file) {
        this.file = file;
        return this;
    }

    /**
     * Get user to impersonate when running the job.
     *
     * @return the proxyUser value
     */
    public String proxyUser() {
        return this.proxyUser;
    }

    /**
     * Set user to impersonate when running the job.
     *
     * @param proxyUser the proxyUser value to set
     * @return the SparkBatchJobRequest object itself.
     */
    public SparkBatchJobRequest withProxyUser(String proxyUser) {
        this.proxyUser = proxyUser;
        return this;
    }

    /**
     * Get application Java/Spark main class.
     *
     * @return the className value
     */
    public String className() {
        return this.className;
    }

    /**
     * Set application Java/Spark main class.
     *
     * @param className the className value to set
     * @return the SparkBatchJobRequest object itself.
     */
    public SparkBatchJobRequest withClassName(String className) {
        this.className = className;
        return this;
    }

    /**
     * Get command line arguments for the application.
     *
     * @return the arguments value
     */
    public List<String> arguments() {
        return this.arguments;
    }

    /**
     * Set command line arguments for the application.
     *
     * @param arguments the arguments value to set
     * @return the SparkBatchJobRequest object itself.
     */
    public SparkBatchJobRequest withArguments(List<String> arguments) {
        this.arguments = arguments;
        return this;
    }

    /**
     * Get jars to be used in this batch job.
     *
     * @return the jars value
     */
    public List<String> jars() {
        return this.jars;
    }

    /**
     * Set jars to be used in this batch job.
     *
     * @param jars the jars value to set
     * @return the SparkBatchJobRequest object itself.
     */
    public SparkBatchJobRequest withJars(List<String> jars) {
        this.jars = jars;
        return this;
    }

    /**
     * Get python files to be used in this batch job.
     *
     * @return the pythonFiles value
     */
    public List<String> pythonFiles() {
        return this.pythonFiles;
    }

    /**
     * Set python files to be used in this batch job.
     *
     * @param pythonFiles the pythonFiles value to set
     * @return the SparkBatchJobRequest object itself.
     */
    public SparkBatchJobRequest withPythonFiles(List<String> pythonFiles) {
        this.pythonFiles = pythonFiles;
        return this;
    }

    /**
     * Get files to be used in this batch job.
     *
     * @return the files value
     */
    public List<String> files() {
        return this.files;
    }

    /**
     * Set files to be used in this batch job.
     *
     * @param files the files value to set
     * @return the SparkBatchJobRequest object itself.
     */
    public SparkBatchJobRequest withFiles(List<String> files) {
        this.files = files;
        return this;
    }

    /**
     * Get amount of memory to use for the driver process.
     *
     * @return the driverMemory value
     */
    public String driverMemory() {
        return this.driverMemory;
    }

    /**
     * Set amount of memory to use for the driver process.
     *
     * @param driverMemory the driverMemory value to set
     * @return the SparkBatchJobRequest object itself.
     */
    public SparkBatchJobRequest withDriverMemory(String driverMemory) {
        this.driverMemory = driverMemory;
        return this;
    }

    /**
     * Get number of cores to use for the driver process.
     *
     * @return the driverCores value
     */
    public Integer driverCores() {
        return this.driverCores;
    }

    /**
     * Set number of cores to use for the driver process.
     *
     * @param driverCores the driverCores value to set
     * @return the SparkBatchJobRequest object itself.
     */
    public SparkBatchJobRequest withDriverCores(Integer driverCores) {
        this.driverCores = driverCores;
        return this;
    }

    /**
     * Get amount of memory to use per executor process.
     *
     * @return the executorMemory value
     */
    public String executorMemory() {
        return this.executorMemory;
    }

    /**
     * Set amount of memory to use per executor process.
     *
     * @param executorMemory the executorMemory value to set
     * @return the SparkBatchJobRequest object itself.
     */
    public SparkBatchJobRequest withExecutorMemory(String executorMemory) {
        this.executorMemory = executorMemory;
        return this;
    }

    /**
     * Get number of cores to use for each executor.
     *
     * @return the executorCores value
     */
    public Integer executorCores() {
        return this.executorCores;
    }

    /**
     * Set number of cores to use for each executor.
     *
     * @param executorCores the executorCores value to set
     * @return the SparkBatchJobRequest object itself.
     */
    public SparkBatchJobRequest withExecutorCores(Integer executorCores) {
        this.executorCores = executorCores;
        return this;
    }

    /**
     * Get number of executors to launch for this batch job.
     *
     * @return the executorCount value
     */
    public Integer executorCount() {
        return this.executorCount;
    }

    /**
     * Set number of executors to launch for this batch job.
     *
     * @param executorCount the executorCount value to set
     * @return the SparkBatchJobRequest object itself.
     */
    public SparkBatchJobRequest withExecutorCount(Integer executorCount) {
        this.executorCount = executorCount;
        return this;
    }

    /**
     * Get archives to be used in this batch job.
     *
     * @return the archives value
     */
    public List<String> archives() {
        return this.archives;
    }

    /**
     * Set archives to be used in this batch job.
     *
     * @param archives the archives value to set
     * @return the SparkBatchJobRequest object itself.
     */
    public SparkBatchJobRequest withArchives(List<String> archives) {
        this.archives = archives;
        return this;
    }

    /**
     * Get the name of the YARN queue to which submitted.
     *
     * @return the queue value
     */
    public String queue() {
        return this.queue;
    }

    /**
     * Set the name of the YARN queue to which submitted.
     *
     * @param queue the queue value to set
     * @return the SparkBatchJobRequest object itself.
     */
    public SparkBatchJobRequest withQueue(String queue) {
        this.queue = queue;
        return this;
    }

    /**
     * Get the name of this batch job.
     *
     * @return the name value
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name of this batch job.
     *
     * @param name the name value to set
     * @return the SparkBatchJobRequest object itself.
     */
    public SparkBatchJobRequest withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get spark configuration properties.
     *
     * @return the configuration value
     */
    public Map<String, String> configuration() {
        return this.configuration;
    }

    /**
     * Set spark configuration properties.
     *
     * @param configuration the configuration value to set
     * @return the SparkBatchJobRequest object itself.
     */
    public SparkBatchJobRequest withConfiguration(Map<String, String> configuration) {
        this.configuration = configuration;
        return this;
    }

}
