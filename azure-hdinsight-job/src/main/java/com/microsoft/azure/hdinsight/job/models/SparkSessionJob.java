/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.hdinsight.job.models;

import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The SparkSessionJob model.
 */
public class SparkSessionJob {
    /**
     * The livy id of the spark session job.
     */
    @JsonProperty(value = "id")
    private Integer id;

    /**
     * The application id of this job.
     */
    @JsonProperty(value = "appId")
    private String appId;

    /**
     * Remote user who submitted this job.
     */
    @JsonProperty(value = "owner")
    private String owner;

    /**
     * User to impersonate when running.
     */
    @JsonProperty(value = "proxyUser")
    private String proxyUser;

    /**
     * Spark session job kind. Possible values include: 'spark', 'pyspark',
     * 'sparkr', 'sql'.
     */
    @JsonProperty(value = "kind")
    private SessionJobKind kind;

    /**
     * The log lines.
     */
    @JsonProperty(value = "log")
    private List<String> logLines;

    /**
     * The current state of the spark session job. Possible values include:
     * 'not_started', 'starting', 'idle', 'running', 'busy', 'shutting_down',
     * 'error', 'dead', 'killed', 'success', 'recovering'.
     */
    @JsonProperty(value = "state")
    private JobState state;

    /**
     * The detailed application info.
     */
    @JsonProperty(value = "appInfo")
    private Map<String, String> appInfo;

    /**
     * Get the livy id of the spark session job.
     *
     * @return the id value
     */
    public Integer id() {
        return this.id;
    }

    /**
     * Set the livy id of the spark session job.
     *
     * @param id the id value to set
     * @return the SparkSessionJob object itself.
     */
    public SparkSessionJob withId(Integer id) {
        this.id = id;
        return this;
    }

    /**
     * Get the application id of this job.
     *
     * @return the appId value
     */
    public String appId() {
        return this.appId;
    }

    /**
     * Set the application id of this job.
     *
     * @param appId the appId value to set
     * @return the SparkSessionJob object itself.
     */
    public SparkSessionJob withAppId(String appId) {
        this.appId = appId;
        return this;
    }

    /**
     * Get remote user who submitted this job.
     *
     * @return the owner value
     */
    public String owner() {
        return this.owner;
    }

    /**
     * Set remote user who submitted this job.
     *
     * @param owner the owner value to set
     * @return the SparkSessionJob object itself.
     */
    public SparkSessionJob withOwner(String owner) {
        this.owner = owner;
        return this;
    }

    /**
     * Get user to impersonate when running.
     *
     * @return the proxyUser value
     */
    public String proxyUser() {
        return this.proxyUser;
    }

    /**
     * Set user to impersonate when running.
     *
     * @param proxyUser the proxyUser value to set
     * @return the SparkSessionJob object itself.
     */
    public SparkSessionJob withProxyUser(String proxyUser) {
        this.proxyUser = proxyUser;
        return this;
    }

    /**
     * Get spark session job kind. Possible values include: 'spark', 'pyspark', 'sparkr', 'sql'.
     *
     * @return the kind value
     */
    public SessionJobKind kind() {
        return this.kind;
    }

    /**
     * Set spark session job kind. Possible values include: 'spark', 'pyspark', 'sparkr', 'sql'.
     *
     * @param kind the kind value to set
     * @return the SparkSessionJob object itself.
     */
    public SparkSessionJob withKind(SessionJobKind kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the log lines.
     *
     * @return the logLines value
     */
    public List<String> logLines() {
        return this.logLines;
    }

    /**
     * Set the log lines.
     *
     * @param logLines the logLines value to set
     * @return the SparkSessionJob object itself.
     */
    public SparkSessionJob withLogLines(List<String> logLines) {
        this.logLines = logLines;
        return this;
    }

    /**
     * Get the current state of the spark session job. Possible values include: 'not_started', 'starting', 'idle', 'running', 'busy', 'shutting_down', 'error', 'dead', 'killed', 'success', 'recovering'.
     *
     * @return the state value
     */
    public JobState state() {
        return this.state;
    }

    /**
     * Set the current state of the spark session job. Possible values include: 'not_started', 'starting', 'idle', 'running', 'busy', 'shutting_down', 'error', 'dead', 'killed', 'success', 'recovering'.
     *
     * @param state the state value to set
     * @return the SparkSessionJob object itself.
     */
    public SparkSessionJob withState(JobState state) {
        this.state = state;
        return this;
    }

    /**
     * Get the detailed application info.
     *
     * @return the appInfo value
     */
    public Map<String, String> appInfo() {
        return this.appInfo;
    }

    /**
     * Set the detailed application info.
     *
     * @param appInfo the appInfo value to set
     * @return the SparkSessionJob object itself.
     */
    public SparkSessionJob withAppInfo(Map<String, String> appInfo) {
        this.appInfo = appInfo;
        return this;
    }

}
